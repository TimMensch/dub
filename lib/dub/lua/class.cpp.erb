#include "<%= @class.header %>"

#include "lua_doxy_helper.h"

<% if @class.prefix %>
using namespace <%= @class.prefix %>;
<% end %>

/* ============================ Constructors     ====================== */

<%= @class.constructor %>

/* ============================ Destructor       ====================== */

static int <%= @class.destructor_name %>(lua_State *L) {
  <%= @class.name %> **userdata = (<%= @class.name %>**)luaL_checkudata(L, 1, <%= @class.id_name.inspect %>);
  if (*userdata) delete *userdata;
  *userdata = NULL;
  return 0;
}

/* ============================ Member Methods   ====================== */

<% @class.members.each do |function| %>
<%= function %>

<% end %>


/* ============================ Lua Registration ====================== */

static const struct luaL_Reg <%= @class.lib_name %>_member_methods[] = {
<%= indent(method_registration, 2) %>,
  {NULL, NULL},
};

static const struct luaL_Reg <%= @class.lib_name %>_class_methods[] = {
<%= indent(class_method_registration, 2) %>,
  {NULL, NULL},
};

static void luaopen_<%= @class.lib_name %>(lua_State *L) {
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, <%= @class.id_name.inspect %>); // "doxy.Matrix"

  // metatable.__index = metatable (find methods in the table itself)
  lua_pushvalue(L, -1);
  lua_setfield(L, -2, "__index");

  // register member methods
  luaL_register(L, NULL, <%= @class.lib_name %>_member_methods);  // doxy_Matrix_member_methods

  // register class methods in a global table like "doxy.Matrix"
  luaL_register(L, <%= @class.id_name.inspect %>, <%= @class.lib_name %>_class_methods); // doxy_Matrix_class_methods
<% @class.alias_names.each do |name| %>
  luaL_register(L, <%= @class.id_name(name).inspect %>, <%= @class.lib_name %>_class_methods); // typedef
<% end %>
}
