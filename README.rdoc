= Dub (Doxygen based Ubiquitous Binder)

This is a tool to ease the creation of scripting language bindings for a C++ library.
It was initially developed to create the OpenCV bindings for Lua in Lubyk (http://lubyk.org).

The generator uses the xml output from Doxygen to avoid parsing C++ code by itself.

Homepage: http://lubyk.org/en/project311.html

= Features

Currently, the parser supports:

 * public methods
 * public attributes read/write
 * public class methods
 * public static attributes read/write
 * natural casting from std::string to string type (can include '\0')
 * class instantiation from templates through typedefs
 * class alias through typedefs
 * bindings for superclass
 * automatic casting to base class
 * handling of default argument values
 * handling of overloaded functions
 * return value optimization (no copy)
 * simple type garbage collection optimization (no __gc method)
 * hand made bindings for special cases
 * well tested

= TODO

 * documentation
 * class enums
 * namespace enums
 * group constant defines

= Usage

  Create an inspector that will inspect a list of headers given by 'INPUT' (a list
  of files and directories. You need to have Doxygen installed

    local ins = dub.Inspector {
      INPUT    = 'foo/include',
      -- optional
      DOXYGEN_CMD = 'path/to/doxygen',
    }
  
  Create bindings:

    local binder = dub.LuaBinder()

    binder:bind(ins, {
      output_directory = 'tmp',
    })
    
  You should now have a 'cpp' file for each class in tmp.

  Example to build a class called 'Vect':

    binder:build {
      work_dir = '.',
      output   = 'tmp/Vect.so',
      inputs   = {
        'tmp/dub/dub.cpp',
        'tmp/Vect.cpp',
        'fixtures/pointers/vect.cpp',
      },
      includes = {
        'tmp',
        'foo/include',
      },
    }     

  You can now use your class:

    package.cpath = package.cpath .. 'tmp/?.so;'
    require 'Vect'
    local v = Vect(1,3)
    v.x = 4
    print(v.x)
    -- etc

Please read the tests for more detail until the documentation is updated.
