<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classcv_1_1_scalar__" kind="class" prot="public">
    <compoundname>cv::Scalar_</compoundname>
    <basecompoundref refid="classcv_1_1_vec" prot="public" virt="non-virtual">cv::Vec&lt; _Tp, 4 &gt;</basecompoundref>
    <includes refid="cxcore_8hpp" local="no">cxcore.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>_Tp</declname>
        <defname>_Tp</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcv_1_1_scalar___1ae1f585cbf709bbce60762f802c571211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Scalar_&lt; _Tp &gt;::Scalar_</definition>
        <argsstring>()</argsstring>
        <name>Scalar_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="427"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1ae64e021266b9f7661f66a3c77d175c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Scalar_&lt; _Tp &gt;::Scalar_</definition>
        <argsstring>(_Tp v0, _Tp v1, _Tp v2=0, _Tp v3=0)</argsstring>
        <name>Scalar_</name>
        <param>
          <type>_Tp</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>_Tp</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>_Tp</type>
          <declname>v2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>_Tp</type>
          <declname>v3</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="428"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1ad882af49ebbea352268959dbcb4b2a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Scalar_&lt; _Tp &gt;::Scalar_</definition>
        <argsstring>(const CvScalar &amp;s)</argsstring>
        <name>Scalar_</name>
        <param>
          <type>const <ref refid="struct_cv_scalar" kindref="compound">CvScalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="429"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1a3929afa654b588e2d9b2dde86060e689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Scalar_&lt; _Tp &gt;::Scalar_</definition>
        <argsstring>(_Tp v0)</argsstring>
        <name>Scalar_</name>
        <param>
          <type>_Tp</type>
          <declname>v0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="430"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1a7e82b74016e7134955bd5e4f3ea43eaf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Scalar_&lt; _Tp &gt;::operator CvScalar</definition>
        <argsstring>() const </argsstring>
        <name>operator CvScalar</name>
        <reimplements refid="classcv_1_1_vec_1a6bba31a2f784e19509f23161d1ae2490">operator CvScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="432"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1a5cdacdd7b9b4d6f3aebbf7c9c830cdde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>cv::Scalar_&lt; _Tp &gt;::operator Scalar_&lt; T2 &gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator Scalar_&lt; T2 &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="434"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1a9220cda4988b7af1fd62d72419baaa54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar_</ref>&lt; _Tp &gt;</type>
        <definition>Scalar_&lt;_Tp&gt; cv::Scalar_&lt; _Tp &gt;::mul</definition>
        <argsstring>(const Scalar_&lt; _Tp &gt; &amp;t, double scale=1) const </argsstring>
        <name>mul</name>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar_</ref>&lt; _Tp &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="436"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_scalar___1a95f3a5ffa3f17e545c84c731acba4082" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void cv::Scalar_&lt; _Tp &gt;::convertTo</definition>
        <argsstring>(T2 *buf, int channels, int unroll_to=0) const </argsstring>
        <name>convertTo</name>
        <param>
          <type>T2 *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>unroll_to</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="437"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar_</ref>&lt; _Tp &gt;</type>
        <definition>static Scalar_&lt;_Tp&gt; cv::Scalar_&lt; _Tp &gt;::all</definition>
        <argsstring>(_Tp v0)</argsstring>
        <name>all</name>
        <reimplements refid="classcv_1_1_vec_1a86371c4948f9dbb4496cfd7a559c51b4">all</reimplements>
        <param>
          <type>_Tp</type>
          <declname>v0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="431"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="347">
        <label>cv::Scalar_&lt; _Tp &gt;</label>
        <link refid="classcv_1_1_scalar__"/>
        <childnode refid="348" relation="public-inheritance">
        </childnode>
      </node>
      <node id="348">
        <label>cv::Vec&lt; _Tp, 4 &gt;</label>
        <link refid="classcv_1_1_vec"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="349">
        <label>cv::Scalar_&lt; _Tp &gt;</label>
        <link refid="classcv_1_1_scalar__"/>
        <childnode refid="350" relation="public-inheritance">
        </childnode>
      </node>
      <node id="350">
        <label>cv::Vec&lt; _Tp, 4 &gt;</label>
        <link refid="classcv_1_1_vec"/>
        <childnode refid="351" relation="usage">
          <edgelabel>val</edgelabel>
        </childnode>
      </node>
      <node id="351">
        <label>_Tp</label>
      </node>
    </collaborationgraph>
    <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="425" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="424" bodyend="438"/>
    <listofallmembers>
      <member refid="classcv_1_1_scalar___1ac1509a4b8454fe7fe29db069e13a2e6f" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>all</name></member>
      <member refid="classcv_1_1_vec_1acee7fcb659e3761ecc7ced13e399c33fae9575073c9a06ece6f8f689cfdaffda1" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>channels</name></member>
      <member refid="classcv_1_1_scalar___1a95f3a5ffa3f17e545c84c731acba4082" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>convertTo</name></member>
      <member refid="classcv_1_1_vec_1a0a747642fbef7c45bd089b8255327423" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>cross</name></member>
      <member refid="classcv_1_1_vec_1a7657dfa378030b145035425d227306ad" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>ddot</name></member>
      <member refid="classcv_1_1_vec_1acee7fcb659e3761ecc7ced13e399c33fac384741a50c6182a73308a227f912207" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>depth</name></member>
      <member refid="classcv_1_1_vec_1ab621963ce41a34ebea38468e68beecf7" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>dot</name></member>
      <member refid="classcv_1_1_scalar___1a9220cda4988b7af1fd62d72419baaa54" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>mul</name></member>
      <member refid="classcv_1_1_scalar___1a7e82b74016e7134955bd5e4f3ea43eaf" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>operator CvScalar</name></member>
      <member refid="classcv_1_1_scalar___1a5cdacdd7b9b4d6f3aebbf7c9c830cdde" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>operator Scalar_&lt; T2 &gt;</name></member>
      <member refid="classcv_1_1_vec_1a5355e4a1861b19224f92932e47ded71a" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>operator Vec&lt; T2, cn &gt;</name></member>
      <member refid="classcv_1_1_vec_1af49eab1e1f471c1b24297415f6538d6e" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>operator[]</name></member>
      <member refid="classcv_1_1_vec_1ac65f71f08e6af6e807ba4ca47ffd0d90" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>operator[]</name></member>
      <member refid="classcv_1_1_scalar___1ae1f585cbf709bbce60762f802c571211" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Scalar_</name></member>
      <member refid="classcv_1_1_scalar___1ae64e021266b9f7661f66a3c77d175c1f" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Scalar_</name></member>
      <member refid="classcv_1_1_scalar___1ad882af49ebbea352268959dbcb4b2a0c" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Scalar_</name></member>
      <member refid="classcv_1_1_scalar___1a3929afa654b588e2d9b2dde86060e689" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Scalar_</name></member>
      <member refid="classcv_1_1_vec_1acee7fcb659e3761ecc7ced13e399c33fa6b9faf6f7c5de5b8d02cd192d847cba0" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>type</name></member>
      <member refid="classcv_1_1_vec_1a915665691f65a3a0ad247446384a95b2" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>val</name></member>
      <member refid="classcv_1_1_vec_1adca5e5fb1c491d3f253c9110777969aa" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>value_type</name></member>
      <member refid="classcv_1_1_vec_1a72bcb5232e9c11542886319edb9809a9" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a70931c51a1f6c84bc8f1863b8f35fadc" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1ab3c6059e273514f79aebefc2825ea06c" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a72280b48a5d716939114289dc0930ba6" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a4860aebf83282553be32c021cf9726bc" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1ae50afd23b21fbd313dbfc8476db849b2" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a841ae2e0076c9393b42baee62f1ddafc" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a78a6c4b0bd6932de02c191365a4e7d87" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1af133aa5b6e162a522a72a999a7130786" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a25667a57fe49571f285bf5b65e8e76d0" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a74ba63687a0a3878d9a3ded1e0990622" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
      <member refid="classcv_1_1_vec_1a2bcc2be2e6fc71d00a03f109e445f86b" prot="public" virt="non-virtual"><scope>cv::Scalar_</scope><name>Vec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
