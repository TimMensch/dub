<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.5.1">
  <compounddef id="b2_collision_8h" kind="file">
    <compoundname>b2Collision.h</compoundname>
    <includes local="no">Box2D/Common/b2Math.h</includes>
    <includes local="no">climits</includes>
    <incdepgraph>
      <node id="29">
        <label>/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h</label>
        <link refid="b2Collision.h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>Box2D/Common/b2Math.h</label>
      </node>
      <node id="31">
        <label>climits</label>
      </node>
    </incdepgraph>
    <innerclass refid="structb2_contact_feature" prot="public">b2ContactFeature</innerclass>
    <innerclass refid="unionb2_contact_i_d" prot="public">b2ContactID</innerclass>
    <innerclass refid="structb2_manifold_point" prot="public">b2ManifoldPoint</innerclass>
    <innerclass refid="structb2_manifold" prot="public">b2Manifold</innerclass>
    <innerclass refid="structb2_world_manifold" prot="public">b2WorldManifold</innerclass>
    <innerclass refid="structb2_clip_vertex" prot="public">b2ClipVertex</innerclass>
    <innerclass refid="structb2_ray_cast_input" prot="public">b2RayCastInput</innerclass>
    <innerclass refid="structb2_ray_cast_output" prot="public">b2RayCastOutput</innerclass>
    <innerclass refid="structb2_a_a_b_b" prot="public">b2AABB</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" prot="public" static="no">
        <name>b2PointState</name>
        <enumvalue id="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663da7ce77ce1a592f49d92939997976c217b" prot="public">
          <name>b2_nullState</name>
          <briefdescription>
<para>point does not exist </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663dac60dc479bee2089a695b37948179b3d4" prot="public">
          <name>b2_addState</name>
          <briefdescription>
<para>point was added in the update </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663dafb032f2175741fa95361e55d1c069e0a" prot="public">
          <name>b2_persistState</name>
          <briefdescription>
<para>point persisted across the update </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663da42ca6d7de57b948c8c895cd6f51ee8be" prot="public">
          <name>b2_removeState</name>
          <briefdescription>
<para>point was removed in the update </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>This is used for determining the state of contact points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="126" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" bodystart="125" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="b2_collision_8h_1a910fdc8a802b3cac220f2ee873109818" prot="public" static="no" mutable="no">
        <type>const <ref refid="b2_settings_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref></type>
        <definition>const uint8 b2_nullFeature</definition>
        <argsstring></argsstring>
        <name>b2_nullFeature</name>
        <initializer> UCHAR_MAX</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="34" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="b2_collision_8h_1a401e2747d276e9fbfd131989e02ff568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2GetPointStates</definition>
        <argsstring>(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints], const b2Manifold *manifold1, const b2Manifold *manifold2)</argsstring>
        <name>b2GetPointStates</name>
        <param>
          <type><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" kindref="member">b2PointState</ref></type>
          <declname>state1</declname>
          <array>[b2_maxManifoldPoints]</array>
        </param>
        <param>
          <type><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" kindref="member">b2PointState</ref></type>
          <declname>state2</declname>
          <array>[b2_maxManifoldPoints]</array>
        </param>
        <param>
          <type>const <ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold1</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the point states given two manifolds. The states pertain to the transition from manifold1 to manifold2. So state1 is either persist or remove while state2 is either add or persist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="136"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1ab8a1bf2c6a9453307466f4870c1fa333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2CollideCircles</definition>
        <argsstring>(b2Manifold *manifold, const b2CircleShape *circleA, const b2Transform &amp;xfA, const b2CircleShape *circleB, const b2Transform &amp;xfB)</argsstring>
        <name>b2CollideCircles</name>
        <param>
          <type><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_circle_shape" kindref="compound">b2CircleShape</ref> *</type>
          <declname>circleA</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfA</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_circle_shape" kindref="compound">b2CircleShape</ref> *</type>
          <declname>circleB</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfB</declname>
        </param>
        <briefdescription>
<para>Compute the collision manifold between two circles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="220"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1a30da13c857596fbefa40b47c3e1e78d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2CollidePolygonAndCircle</definition>
        <argsstring>(b2Manifold *manifold, const b2PolygonShape *polygonA, const b2Transform &amp;xfA, const b2CircleShape *circleB, const b2Transform &amp;xfB)</argsstring>
        <name>b2CollidePolygonAndCircle</name>
        <param>
          <type><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref> *</type>
          <declname>polygonA</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfA</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_circle_shape" kindref="compound">b2CircleShape</ref> *</type>
          <declname>circleB</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfB</declname>
        </param>
        <briefdescription>
<para>Compute the collision manifold between a polygon and a circle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="225"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1a2f7b9859479384c0e2cceb9e7744afcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2CollidePolygons</definition>
        <argsstring>(b2Manifold *manifold, const b2PolygonShape *polygonA, const b2Transform &amp;xfA, const b2PolygonShape *polygonB, const b2Transform &amp;xfB)</argsstring>
        <name>b2CollidePolygons</name>
        <param>
          <type><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref> *</type>
          <declname>polygonA</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfA</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref> *</type>
          <declname>polygonB</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfB</declname>
        </param>
        <briefdescription>
<para>Compute the collision manifold between two polygons. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="230"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1aee6f752fdf8c89152e824da12e944733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2CollideEdgeAndCircle</definition>
        <argsstring>(b2Manifold *manifold, const b2EdgeShape *polygonA, const b2Transform &amp;xfA, const b2CircleShape *circleB, const b2Transform &amp;xfB)</argsstring>
        <name>b2CollideEdgeAndCircle</name>
        <param>
          <type><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_edge_shape" kindref="compound">b2EdgeShape</ref> *</type>
          <declname>polygonA</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfA</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_circle_shape" kindref="compound">b2CircleShape</ref> *</type>
          <declname>circleB</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfB</declname>
        </param>
        <briefdescription>
<para>Compute the collision manifold between an edge and a circle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="235"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1a5d0c5fab412d5ca886b1965666b16d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void b2CollideEdgeAndPolygon</definition>
        <argsstring>(b2Manifold *manifold, const b2EdgeShape *edgeA, const b2Transform &amp;xfA, const b2PolygonShape *circleB, const b2Transform &amp;xfB)</argsstring>
        <name>b2CollideEdgeAndPolygon</name>
        <param>
          <type><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref> *</type>
          <declname>manifold</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_edge_shape" kindref="compound">b2EdgeShape</ref> *</type>
          <declname>edgeA</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfA</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref> *</type>
          <declname>circleB</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfB</declname>
        </param>
        <briefdescription>
<para>Compute the collision manifold between an edge and a circle. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="240"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1a8b36e651798f55f2533f9837462ded41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref></type>
        <definition>int32 b2ClipSegmentToLine</definition>
        <argsstring>(b2ClipVertex vOut[2], const b2ClipVertex vIn[2], const b2Vec2 &amp;normal, float32 offset, int32 vertexIndexA)</argsstring>
        <name>b2ClipSegmentToLine</name>
        <param>
          <type><ref refid="structb2_clip_vertex" kindref="compound">b2ClipVertex</ref></type>
          <declname>vOut</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>const <ref refid="structb2_clip_vertex" kindref="compound">b2ClipVertex</ref></type>
          <declname>vIn</declname>
          <array>[2]</array>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>normal</declname>
        </param>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref></type>
          <declname>vertexIndexA</declname>
        </param>
        <briefdescription>
<para>Clipping for contact manifolds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="244"/>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1ae7601420d0b42c1ee494e879dd2009a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool b2TestOverlap</definition>
        <argsstring>(const b2Shape *shapeA, int32 indexA, const b2Shape *shapeB, int32 indexB, const b2Transform &amp;xfA, const b2Transform &amp;xfB)</argsstring>
        <name>b2TestOverlap</name>
        <param>
          <type>const <ref refid="classb2_shape" kindref="compound">b2Shape</ref> *</type>
          <declname>shapeA</declname>
        </param>
        <param>
          <type><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref></type>
          <declname>indexA</declname>
        </param>
        <param>
          <type>const <ref refid="classb2_shape" kindref="compound">b2Shape</ref> *</type>
          <declname>shapeB</declname>
        </param>
        <param>
          <type><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref></type>
          <declname>indexB</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfA</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>xfB</declname>
        </param>
        <briefdescription>
<para>Determine if two generic shapes overlap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="249"/>
        <referencedby refid="classb2_dynamic_tree_1adf70aee89b4692fc79d65b1f54308585" compoundref="b2_dynamic_tree_8h" startline="164" endline="196">b2DynamicTree::Query</referencedby>
        <referencedby refid="classb2_dynamic_tree_1abd7a5c6a5bc109dbbdb0ec3aae039648" compoundref="b2_dynamic_tree_8h" startline="199" endline="282">b2DynamicTree::RayCast</referencedby>
        <referencedby refid="classb2_broad_phase_1a1785eb29d14997d81bd537f064d22aba" compoundref="b2_broad_phase_8h" startline="148" endline="153">b2BroadPhase::TestOverlap</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_collision_8h_1a3dea7a8a1115626c450a697f6c6bf97e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool b2TestOverlap</definition>
        <argsstring>(const b2AABB &amp;a, const b2AABB &amp;b)</argsstring>
        <name>b2TestOverlap</name>
        <param>
          <type>const <ref refid="structb2_a_a_b_b" kindref="compound">b2AABB</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_a_a_b_b" kindref="compound">b2AABB</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" line="262" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h" bodystart="261" bodyend="274"/>
        <references refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" compoundref="b2_collision_8h" startline="213">b2AABB::lowerBound</references>
        <references refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" compoundref="b2_collision_8h" startline="214">b2AABB::upperBound</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Structures and functions used for computing contact points, distance queries, and TOI queries. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2006-2009<sp/>Erin<sp/>Catto<sp/>http://www.box2d.org</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>B2_COLLISION_H</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>B2_COLLISION_H</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Box2D/Common/b2Math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classb2_shape" kindref="compound">b2Shape</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classb2_circle_shape" kindref="compound" tooltip="A circle shape.">b2CircleShape</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classb2_edge_shape" kindref="compound">b2EdgeShape</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="b2_collision_8h_1a910fdc8a802b3cac220f2ee873109818" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="b2_collision_8h_1a910fdc8a802b3cac220f2ee873109818" kindref="member">b2_nullFeature</ref><sp/>=<sp/>UCHAR_MAX;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structb2_contact_feature" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_contact_feature" kindref="compound">b2ContactFeature</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="structb2_contact_feature_1a29fb037bd886215d2ddd6e68148ac154" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structb2_contact_feature_1a29fb037bd886215d2ddd6e68148ac154" kindref="member">Type</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42" refid="structb2_contact_feature_1a29fb037bd886215d2ddd6e68148ac154aa95b71c62e0571ed761fb1f86e344d87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_contact_feature_1a29fb037bd886215d2ddd6e68148ac154aa95b71c62e0571ed761fb1f86e344d87" kindref="member">e_vertex</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="43" refid="structb2_contact_feature_1a29fb037bd886215d2ddd6e68148ac154a175f380cac64d8475b95c0d5ad6ef55c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_contact_feature_1a29fb037bd886215d2ddd6e68148ac154a175f380cac64d8475b95c0d5ad6ef55c" kindref="member">e_face</ref><sp/>=<sp/>1</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structb2_contact_feature_1a833bc746e7cb5e3cd458f1c0809101d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="structb2_contact_feature_1a833bc746e7cb5e3cd458f1c0809101d0" kindref="member" tooltip="Feature index on shapeA.">indexA</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47" refid="structb2_contact_feature_1ad96712b6a0cc1f4b22b85b5948eab81d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="structb2_contact_feature_1ad96712b6a0cc1f4b22b85b5948eab81d" kindref="member" tooltip="Feature index on shapeB.">indexB</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48" refid="structb2_contact_feature_1a3361b651f0a88fb60ec6aba9f4921cc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="structb2_contact_feature_1a3361b651f0a88fb60ec6aba9f4921cc2" kindref="member" tooltip="The feature type on shapeA.">typeA</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49" refid="structb2_contact_feature_1abb74afd6ee5b60834a3f8e2616182bdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref><sp/><ref refid="structb2_contact_feature_1abb74afd6ee5b60834a3f8e2616182bdf" kindref="member" tooltip="The feature type on shapeB.">typeB</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="unionb2_contact_i_d" refkind="compound"><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionb2_contact_i_d" kindref="compound" tooltip="Contact ids to facilitate warm starting.">b2ContactID</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55" refid="unionb2_contact_i_d_1a58b6732f909bc760f75e7aff3cd4be08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_contact_feature" kindref="compound">b2ContactFeature</ref><sp/><ref refid="unionb2_contact_i_d_1a58b6732f909bc760f75e7aff3cd4be08" kindref="member">cf</ref>;</highlight></codeline>
<codeline lineno="56" refid="unionb2_contact_i_d_1a04c04f8fdcb799b33552d01b3aa3f245" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref><sp/><ref refid="unionb2_contact_i_d_1a04c04f8fdcb799b33552d01b3aa3f245" kindref="member" tooltip="Used to quickly compare contact ids.">key</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="structb2_manifold_point" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_manifold_point" kindref="compound">b2ManifoldPoint</ref></highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71" refid="structb2_manifold_point_1ab3616990e7d1644deeeb691246094bfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_manifold_point_1ab3616990e7d1644deeeb691246094bfa" kindref="member" tooltip="usage depends on manifold type">localPoint</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="structb2_manifold_point_1af4218c2359cb7762cd4e9d8ecefab173" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_manifold_point_1af4218c2359cb7762cd4e9d8ecefab173" kindref="member" tooltip="the non-penetration impulse">normalImpulse</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="structb2_manifold_point_1a0ac5375b1fc4675a0073129f56aa62c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_manifold_point_1a0ac5375b1fc4675a0073129f56aa62c9" kindref="member" tooltip="the friction impulse">tangentImpulse</ref>;<sp/></highlight></codeline>
<codeline lineno="74" refid="structb2_manifold_point_1afa7ec272b2b27abe129540f8fbe57fc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionb2_contact_i_d" kindref="compound" tooltip="Contact ids to facilitate warm starting.">b2ContactID</ref><sp/><ref refid="structb2_manifold_point_1afa7ec272b2b27abe129540f8fbe57fc5" kindref="member" tooltip="uniquely identifies a contact point between two shapes">id</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structb2_manifold" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref></highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95" refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12" kindref="member">Type</ref></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97" refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12a8263240a3d2b01ca3c19dff3f5fad008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12a8263240a3d2b01ca3c19dff3f5fad008" kindref="member">e_circles</ref>,</highlight></codeline>
<codeline lineno="98" refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12a42af1689472a0f5c7797ef196b9a666b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12a42af1689472a0f5c7797ef196b9a666b" kindref="member">e_faceA</ref>,</highlight></codeline>
<codeline lineno="99" refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12a08643d45b9a9e499dfc774d2cafb8fd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12a08643d45b9a9e499dfc774d2cafb8fd2" kindref="member">e_faceB</ref></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structb2_manifold_1ab8021128e9792cc7391a8804ea02173d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_manifold_point" kindref="compound">b2ManifoldPoint</ref><sp/><ref refid="structb2_manifold_1ab8021128e9792cc7391a8804ea02173d" kindref="member" tooltip="the points of contact">points</ref>[<ref refid="b2_settings_8h_1aa5f44cc9edf711433dea2b2ec94f3c42" kindref="member">b2_maxManifoldPoints</ref>];<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103" refid="structb2_manifold_1a3604e9fef2a03347c5649c71a9fd4c79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_manifold_1a3604e9fef2a03347c5649c71a9fd4c79" kindref="member" tooltip="not use for Type::e_points">localNormal</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="structb2_manifold_1a8825cea31b27dbbaf22c13c3070870d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_manifold_1a8825cea31b27dbbaf22c13c3070870d5" kindref="member" tooltip="usage depends on manifold type">localPoint</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105" refid="structb2_manifold_1a4cb6ceba7105513b1e5bd6dbf0cce168" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_manifold_1aa9c347e2ff2e27ee820a926efbb33e12" kindref="member">Type</ref><sp/><ref refid="structb2_manifold_1a4cb6ceba7105513b1e5bd6dbf0cce168" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="106" refid="structb2_manifold_1abf59ff6fa36bed34b0242ad54951a696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/><ref refid="structb2_manifold_1abf59ff6fa36bed34b0242ad54951a696" kindref="member" tooltip="the number of manifold points">pointCount</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structb2_world_manifold" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_world_manifold" kindref="compound" tooltip="This is used to compute the current state of a contact manifold.">b2WorldManifold</ref></highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_world_manifold_1a896dd7e7d4d6f6a5bc69e19fbd6871bd" kindref="member">Initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>radiusA,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>radiusB);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structb2_world_manifold_1acf8de61b73d9784d16f7d0e824ce44bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_world_manifold_1acf8de61b73d9784d16f7d0e824ce44bf" kindref="member" tooltip="world vector pointing from A to B">normal</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121" refid="structb2_world_manifold_1af15e84b90f102c0ac433be2d63604021" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_world_manifold_1af15e84b90f102c0ac433be2d63604021" kindref="member" tooltip="world contact point (point of intersection)">points</ref>[<ref refid="b2_settings_8h_1aa5f44cc9edf711433dea2b2ec94f3c42" kindref="member">b2_maxManifoldPoints</ref>];<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" kindref="member" tooltip="This is used for determining the state of contact points.">b2PointState</ref></highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127" refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663da7ce77ce1a592f49d92939997976c217b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663da7ce77ce1a592f49d92939997976c217b" kindref="member" tooltip="point does not exist">b2_nullState</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128" refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663dac60dc479bee2089a695b37948179b3d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663dac60dc479bee2089a695b37948179b3d4" kindref="member" tooltip="point was added in the update">b2_addState</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129" refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663dafb032f2175741fa95361e55d1c069e0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663dafb032f2175741fa95361e55d1c069e0a" kindref="member" tooltip="point persisted across the update">b2_persistState</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130" refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663da42ca6d7de57b948c8c895cd6f51ee8be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663da42ca6d7de57b948c8c895cd6f51ee8be" kindref="member" tooltip="point was removed in the update">b2_removeState</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1a401e2747d276e9fbfd131989e02ff568" kindref="member">b2GetPointStates</ref>(<ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" kindref="member" tooltip="This is used for determining the state of contact points.">b2PointState</ref><sp/>state1[<ref refid="b2_settings_8h_1aa5f44cc9edf711433dea2b2ec94f3c42" kindref="member">b2_maxManifoldPoints</ref>],<sp/><ref refid="b2_collision_8h_1a0a894e3715ce8c61b7958dd6e083663d" kindref="member" tooltip="This is used for determining the state of contact points.">b2PointState</ref><sp/>state2[b2_maxManifoldPoints],</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold2);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="structb2_clip_vertex" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_clip_vertex" kindref="compound" tooltip="Used for computing contact manifolds.">b2ClipVertex</ref></highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141" refid="structb2_clip_vertex_1a6c8d8e4c0667755d5295a9c0d91d5b87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_clip_vertex_1a6c8d8e4c0667755d5295a9c0d91d5b87" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="142" refid="structb2_clip_vertex_1ac0f6d48eafc40a665bc18d4aa821689d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionb2_contact_i_d" kindref="compound" tooltip="Contact ids to facilitate warm starting.">b2ContactID</ref><sp/><ref refid="structb2_clip_vertex_1ac0f6d48eafc40a665bc18d4aa821689d" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structb2_ray_cast_input" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_ray_cast_input" kindref="compound" tooltip="Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).">b2RayCastInput</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148" refid="structb2_ray_cast_input_1a850102c843469781a3a627c871043d0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_ray_cast_input_1a7254a7062422833b1124fa464ab4caf3" kindref="member">p1</ref>,<sp/><ref refid="structb2_ray_cast_input_1a850102c843469781a3a627c871043d0b" kindref="member">p2</ref>;</highlight></codeline>
<codeline lineno="149" refid="structb2_ray_cast_input_1acb5c88e0ef2c3716a1334611522ab0b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_ray_cast_input_1acb5c88e0ef2c3716a1334611522ab0b2" kindref="member">maxFraction</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="structb2_ray_cast_output" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_ray_cast_output" kindref="compound">b2RayCastOutput</ref></highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156" refid="structb2_ray_cast_output_1aa9bbfe75afa23c21e85cb1bd3736529b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_ray_cast_output_1aa9bbfe75afa23c21e85cb1bd3736529b" kindref="member">normal</ref>;</highlight></codeline>
<codeline lineno="157" refid="structb2_ray_cast_output_1a191c69bb399304bfe30c69e2158b3f29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_ray_cast_output_1a191c69bb399304bfe30c69e2158b3f29" kindref="member">fraction</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="structb2_a_a_b_b" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref></highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b_1a8d170a2de7a267c3e19f5365685b713d" kindref="member" tooltip="Verify that the bounds are sorted.">IsValid</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structb2_a_a_b_b_1aa26703e234bd6fb30fd443cd5001795a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_a_a_b_b_1aa26703e234bd6fb30fd443cd5001795a" kindref="member" tooltip="Get the center of the AABB.">GetCenter</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="168"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5f<sp/>*<sp/>(<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref><sp/>+<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="structb2_a_a_b_b_1aff8b9aa64069a33fe45025299aa0e9b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_a_a_b_b_1aff8b9aa64069a33fe45025299aa0e9b7" kindref="member" tooltip="Get the extents of the AABB (half-widths).">GetExtents</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="174"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.5f<sp/>*<sp/>(<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref><sp/>-<sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="structb2_a_a_b_b_1ace4448c60ef309726e59247a8ae67db5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_a_a_b_b_1ace4448c60ef309726e59247a8ae67db5" kindref="member" tooltip="Get the perimeter length.">GetPerimeter</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="180"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>wx<sp/>=<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>-<sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>wy<sp/>=<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>-<sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2.0f<sp/>*<sp/>(wx<sp/>+<sp/>wy);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="structb2_a_a_b_b_1ad551edba62d2ad6094672a9ba3e26496" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b_1ad551edba62d2ad6094672a9ba3e26496" kindref="member" tooltip="Combine an AABB into this one.">Combine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref>&amp;<sp/>aabb)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref><sp/>=<sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>,<sp/>aabb.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref><sp/>=<sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>,<sp/>aabb.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="structb2_a_a_b_b_1a34b9c7d824df845c10caa9c12ae90452" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b_1ad551edba62d2ad6094672a9ba3e26496" kindref="member" tooltip="Combine an AABB into this one.">Combine</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref>&amp;<sp/>aabb1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref>&amp;<sp/>aabb2)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref><sp/>=<sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(aabb1.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>,<sp/>aabb2.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref><sp/>=<sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(aabb1.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>,<sp/>aabb2.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="structb2_a_a_b_b_1aba5fc112e3c8d05e034a21d95fc37704" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b_1aba5fc112e3c8d05e034a21d95fc37704" kindref="member" tooltip="Does this aabb contain the provided AABB.">Contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref>&amp;<sp/>aabb)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="202"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1adf46fee3107905e425f34254cbce0d9a" kindref="member">result</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>&amp;&amp;<sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>&lt;=<sp/>aabb.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>&amp;&amp;<sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>&lt;=<sp/>aabb.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>&amp;&amp;<sp/>aabb.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>&lt;=<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>&amp;&amp;<sp/>aabb.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>&lt;=<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1adf46fee3107905e425f34254cbce0d9a" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b_1a8a9a3dbc76c1175e80bb767437240ef5" kindref="member">RayCast</ref>(<ref refid="structb2_ray_cast_output" kindref="compound">b2RayCastOutput</ref>*<sp/><ref refid="cvaux_8h_1ad2a91d797896d7d86e0c03dc705a4abc" kindref="member">output</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_ray_cast_input" kindref="compound" tooltip="Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).">b2RayCastInput</ref>&amp;<sp/><ref refid="cvaux_8h_1a8f45a3157cd8bdbb30d638b20fd31f1a" kindref="member">input</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214" refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1ab8a1bf2c6a9453307466f4870c1fa333" kindref="member" tooltip="Compute the collision manifold between two circles.">b2CollideCircles</ref>(<ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_circle_shape" kindref="compound" tooltip="A circle shape.">b2CircleShape</ref>*<sp/>circleA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_circle_shape" kindref="compound" tooltip="A circle shape.">b2CircleShape</ref>*<sp/>circleB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1a30da13c857596fbefa40b47c3e1e78d0" kindref="member" tooltip="Compute the collision manifold between a polygon and a circle.">b2CollidePolygonAndCircle</ref>(<ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref>*<sp/>polygonA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_circle_shape" kindref="compound" tooltip="A circle shape.">b2CircleShape</ref>*<sp/>circleB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1a2f7b9859479384c0e2cceb9e7744afcb" kindref="member" tooltip="Compute the collision manifold between two polygons.">b2CollidePolygons</ref>(<ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref>*<sp/>polygonA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref>*<sp/>polygonB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1aee6f752fdf8c89152e824da12e944733" kindref="member" tooltip="Compute the collision manifold between an edge and a circle.">b2CollideEdgeAndCircle</ref>(<ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_edge_shape" kindref="compound">b2EdgeShape</ref>*<sp/>polygonA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_circle_shape" kindref="compound" tooltip="A circle shape.">b2CircleShape</ref>*<sp/>circleB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1a5d0c5fab412d5ca886b1965666b16d99" kindref="member" tooltip="Compute the collision manifold between an edge and a circle.">b2CollideEdgeAndPolygon</ref>(<ref refid="structb2_manifold" kindref="compound">b2Manifold</ref>*<sp/>manifold,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_edge_shape" kindref="compound">b2EdgeShape</ref>*<sp/>edgeA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_polygon_shape" kindref="compound">b2PolygonShape</ref>*<sp/>circleB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/><ref refid="b2_collision_8h_1a8b36e651798f55f2533f9837462ded41" kindref="member" tooltip="Clipping for contact manifolds.">b2ClipSegmentToLine</ref>(<ref refid="structb2_clip_vertex" kindref="compound" tooltip="Used for computing contact manifolds.">b2ClipVertex</ref><sp/>vOut[2],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_clip_vertex" kindref="compound" tooltip="Used for computing contact manifolds.">b2ClipVertex</ref><sp/>vIn[2],</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>normal,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1aecaf8d39ccebc1daaa89ee5f071a9090" kindref="member">offset</ref>,<sp/><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/>vertexIndexA);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1ae7601420d0b42c1ee494e879dd2009a5" kindref="member" tooltip="Determine if two generic shapes overlap.">b2TestOverlap</ref>(<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_shape" kindref="compound">b2Shape</ref>*<sp/>shapeA,<sp/><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/>indexA,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classb2_shape" kindref="compound">b2Shape</ref>*<sp/>shapeB,<sp/><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/>indexB,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>xfB);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------<sp/>Inline<sp/>Functions<sp/>------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="structb2_a_a_b_b_1a8d170a2de7a267c3e19f5365685b713d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b_1a8d170a2de7a267c3e19f5365685b713d" kindref="member" tooltip="Verify that the bounds are sorted.">b2AABB::IsValid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="254"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref><sp/>=<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref><sp/>-<sp/><ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/>d.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>&gt;=<sp/>0.0f<sp/>&amp;&amp;<sp/>d.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>&gt;=<sp/>0.0f;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/>valid<sp/>&amp;&amp;<sp/>lowerBound.IsValid()<sp/>&amp;&amp;<sp/><ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>.<ref refid="structb2_vec2_1aafb971cf7cc726f91fc3a8215fb0aa17" kindref="member" tooltip="Does this vector contain finite coordinates?">IsValid</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="b2_collision_8h_1a3dea7a8a1115626c450a697f6c6bf97e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="b2_collision_8h_1ae7601420d0b42c1ee494e879dd2009a5" kindref="member" tooltip="Determine if two generic shapes overlap.">b2TestOverlap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_a_a_b_b" kindref="compound" tooltip="An axis aligned bounding box.">b2AABB</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>d1,<sp/>d2;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d1<sp/>=<sp/>b.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref><sp/>-<sp/>a.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>a.<ref refid="structb2_a_a_b_b_1ab94b68fbad8348b22b0522469b11bdb5" kindref="member" tooltip="the lower vertex">lowerBound</ref><sp/>-<sp/>b.<ref refid="structb2_a_a_b_b_1ad4a8ec483ba13a2c02918b01d058a18f" kindref="member" tooltip="the upper vertex">upperBound</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d1.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>&gt;<sp/>0.0f<sp/>||<sp/>d1.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d2.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>&gt;<sp/>0.0f<sp/>||<sp/>d2.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>&gt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Collision.h"/>
  </compounddef>
</doxygen>
