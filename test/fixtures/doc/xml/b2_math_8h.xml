<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.5.1">
  <compounddef id="b2_math_8h" kind="file">
    <compoundname>b2Math.h</compoundname>
    <includes local="no">Box2D/Common/b2Settings.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cfloat</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">limits</includes>
    <incdepgraph>
      <node id="97">
        <label>limits</label>
      </node>
      <node id="94">
        <label>cmath</label>
      </node>
      <node id="95">
        <label>cfloat</label>
      </node>
      <node id="96">
        <label>cstddef</label>
      </node>
      <node id="93">
        <label>Box2D/Common/b2Settings.h</label>
      </node>
      <node id="92">
        <label>/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h</label>
        <link refid="b2Math.h"/>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structb2_vec2" prot="public">b2Vec2</innerclass>
    <innerclass refid="structb2_vec3" prot="public">b2Vec3</innerclass>
    <innerclass refid="structb2_mat22" prot="public">b2Mat22</innerclass>
    <innerclass refid="structb2_mat33" prot="public">b2Mat33</innerclass>
    <innerclass refid="structb2_rot" prot="public">b2Rot</innerclass>
    <innerclass refid="structb2_transform" prot="public">b2Transform</innerclass>
    <innerclass refid="structb2_sweep" prot="public">b2Sweep</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="b2_math_8h_1a58e7c8ed67b5f0f98a0873cfb0035076" prot="public" static="no">
        <name>b2Sqrt</name>
        <param><defname>x</defname></param>
        <initializer>std::sqrt(<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="60" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="60" bodyend="-1"/>
        <referencedby refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" compoundref="b2_math_8h" startline="112" endline="115">b2Vec2::Length</referencedby>
      </memberdef>
      <memberdef kind="define" id="b2_math_8h_1afe19f6449028d2aaa14c9c4c3b22066d" prot="public" static="no">
        <name>b2Atan2</name>
        <param><defname>y</defname></param>
        <param><defname>x</defname></param>
        <initializer>std::atan2(<ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>, <ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="61" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="61" bodyend="-1"/>
        <referencedby refid="structb2_rot_1a67a6c08812c009654f00800256c8bfdc" compoundref="b2_math_8h" startline="338" endline="341">b2Rot::GetAngle</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="b2_math_8h_1ad6f7495e1f1adf7369190bf3f89a60db" prot="public" static="no" mutable="no">
        <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>const b2Vec2 b2Vec2_zero</definition>
        <argsstring></argsstring>
        <name>b2Vec2_zero</name>
        <briefdescription>
<para>Useful constant. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="414"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="b2_math_8h_1a6e846de254fa783f9618ed93bcf8a394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool b2IsValid</definition>
        <argsstring>(float32 x)</argsstring>
        <name>b2IsValid</name>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to ensure that a floating point number is not a NaN or infinity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="32" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="31" bodyend="41"/>
        <referencedby refid="structb2_vec2_1aafb971cf7cc726f91fc3a8215fb0aa17" compoundref="b2_math_8h" startline="140" endline="143">b2Vec2::IsValid</referencedby>
        <referencedby refid="classb2_fixture_1ad4e1d9323103975c8931d022b952d04a" compoundref="b2_fixture_8h" startline="293" endline="297">b2Fixture::SetDensity</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a94db844858ec5b062e9df27f843d1552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
        <definition>float32 b2InvSqrt</definition>
        <argsstring>(float32 x)</argsstring>
        <name>b2InvSqrt</name>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>This is a approximate yet fast inverse square-root. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="45" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
        <definition>float32 b2Dot</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Dot</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the dot product on two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="418" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="417" bodyend="420"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
        <referencedby refid="b2_math_8h_1a1fb7f05d9bd9a362fa2c6741cf3fbd3b" compoundref="b2_math_8h" startline="484" endline="488">b2DistanceSquared</referencedby>
        <referencedby refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" compoundref="b2_math_8h" startline="451" endline="454">b2MulT</referencedby>
        <referencedby refid="classb2_body_1a8c8916caf67c1e618a07d8b6b9253fa8" compoundref="b2_body_8h" startline="538" endline="541">b2Body::GetInertia</referencedby>
        <referencedby refid="classb2_body_1ad0a90df7e2617a8572cd476267f95417" compoundref="b2_body_8h" startline="543" endline="548">b2Body::GetMassData</referencedby>
        <referencedby refid="structb2_distance_proxy_1ad763543846db0c220e6b0a29275d723e" compoundref="b2_distance_8h" startline="107" endline="122">b2DistanceProxy::GetSupport</referencedby>
        <referencedby refid="structb2_distance_proxy_1ad98a909b9aee9e42ba184b1e6bd526ba" compoundref="b2_distance_8h" startline="124" endline="139">b2DistanceProxy::GetSupportVertex</referencedby>
        <referencedby refid="classb2_dynamic_tree_1abd7a5c6a5bc109dbbdb0ec3aae039648" compoundref="b2_dynamic_tree_8h" startline="199" endline="282">b2DynamicTree::RayCast</referencedby>
        <referencedby refid="classb2_body_1a832f3989a44f0d4782c80456832197ad" compoundref="b2_body_8h" startline="493" endline="506">b2Body::SetLinearVelocity</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
        <definition>float32 b2Cross</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the cross product on two vectors. In 2D this produces a scalar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="424" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="423" bodyend="426"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
        <referencedby refid="classb2_body_1aa1a2ebd027635ea5a81749f267a19261" compoundref="b2_body_8h" startline="745" endline="759">b2Body::ApplyForce</referencedby>
        <referencedby refid="classb2_body_1ada3c2a70cbb53c4fcee5a4febbbefc15" compoundref="b2_body_8h" startline="791" endline="804">b2Body::ApplyLinearImpulse</referencedby>
        <referencedby refid="classb2_body_1a4238ae43f5afeb2126b8e8bf765334b5" compoundref="b2_body_8h" startline="570" endline="573">b2Body::GetLinearVelocityFromWorldPoint</referencedby>
        <referencedby refid="classb2_dynamic_tree_1abd7a5c6a5bc109dbbdb0ec3aae039648" compoundref="b2_dynamic_tree_8h" startline="199" endline="282">b2DynamicTree::RayCast</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a7b096c85fbb12ec43c813f92ede17480" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Cross</definition>
        <argsstring>(const b2Vec2 &amp;a, float32 s)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the cross product on a vector and a scalar. In 2D this produces a vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="431" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="430" bodyend="433"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aa058d7bfcf20a7b49d1d22d2284fef8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Cross</definition>
        <argsstring>(float32 s, const b2Vec2 &amp;a)</argsstring>
        <name>b2Cross</name>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform the cross product on a scalar and a vector. In 2D this produces a vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="438" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="437" bodyend="440"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Mul</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Vec2 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply a matrix times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="445" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="444" bodyend="447"/>
        <references refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" compoundref="b2_math_8h" startline="264">b2Mat22::ex</references>
        <references refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" compoundref="b2_math_8h" startline="264">b2Mat22::ey</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
        <referencedby refid="classb2_body_1a018ca81f6c1bef31942931dfa9459f4f" compoundref="b2_body_8h" startline="826" endline="834">b2Body::Advance</referencedby>
        <referencedby refid="b2_math_8h_1ac1fb7bf7a1dcf65382301b64ed0321a4" compoundref="b2_math_8h" startline="525" endline="528">b2Mul</referencedby>
        <referencedby refid="structb2_sweep_1a81947646092468290d15005928e12fcd" compoundref="b2_math_8h" startline="703" endline="711">b2Sweep::GetTransform</referencedby>
        <referencedby refid="classb2_body_1a8055b90bccb51383caa8c42fbc96c9c3" compoundref="b2_body_8h" startline="550" endline="553">b2Body::GetWorldPoint</referencedby>
        <referencedby refid="classb2_body_1afd44622669b5e45202c23e4a212895fc" compoundref="b2_body_8h" startline="555" endline="558">b2Body::GetWorldVector</referencedby>
        <referencedby refid="classb2_body_1a4ce4a12de31c4e877ac5075331cb3a47" compoundref="b2_body_8h" startline="820" endline="824">b2Body::SynchronizeTransform</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2MulT</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Vec2 &amp;v)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply a matrix transpose times a vector. If a rotation matrix is provided, then this transforms the vector from one frame to another (inverse transform). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="452" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="451" bodyend="454"/>
        <references refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" compoundref="b2_math_8h" startline="417" endline="420">b2Dot</references>
        <references refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" compoundref="b2_math_8h" startline="264">b2Mat22::ex</references>
        <references refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" compoundref="b2_math_8h" startline="264">b2Mat22::ey</references>
        <referencedby refid="b2_math_8h_1aa6a218f164938003edd5040760e36c8e" compoundref="b2_math_8h" startline="618" endline="624">b2MulT</referencedby>
        <referencedby refid="classb2_body_1a8f9ef0226b7eb989e700fa8898d29fc0" compoundref="b2_body_8h" startline="560" endline="563">b2Body::GetLocalPoint</referencedby>
        <referencedby refid="classb2_body_1a93de09565c0c1a9da2601c1847aa22df" compoundref="b2_body_8h" startline="565" endline="568">b2Body::GetLocalVector</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aabe5cfd3c0c2436622fe392122f3504d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 operator+</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="458" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="457" bodyend="460"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a42a4d381fdfdde9aa5a3078b13f6b76b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 operator-</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Subtract two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="464" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="463" bodyend="466"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a8a3ec3a803ef689abd6674c943eb358b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 operator*</definition>
        <argsstring>(float32 s, const b2Vec2 &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="469" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="468" bodyend="471"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1af7e4f3ac0ffef6bbd586543e2e1b04d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="474" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="473" bodyend="476"/>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a55ee8f478626440779e88f2343c698b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
        <definition>float32 b2Distance</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Distance</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="479" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="478" bodyend="482"/>
        <references refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" compoundref="cvaux_8h" startline="602">b</references>
        <references refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" compoundref="cvaux_8h" startline="602">c</references>
        <references refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" compoundref="b2_math_8h" startline="112" endline="115">b2Vec2::Length</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a1fb7f05d9bd9a362fa2c6741cf3fbd3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
        <definition>float32 b2DistanceSquared</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2DistanceSquared</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="485" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="484" bodyend="488"/>
        <references refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" compoundref="cvaux_8h" startline="602">b</references>
        <references refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" compoundref="b2_math_8h" startline="417" endline="420">b2Dot</references>
        <references refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" compoundref="cvaux_8h" startline="602">c</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ae5e8a56041cc2acb728eab2e7971f826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 operator*</definition>
        <argsstring>(float32 s, const b2Vec3 &amp;a)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="491" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="490" bodyend="493"/>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
        <references refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" compoundref="b2_math_8h" startline="190">b2Vec3::z</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ac5671b7f3534b00e99a757eb4ade907c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 operator+</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Add two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="497" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="496" bodyend="499"/>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
        <references refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" compoundref="b2_math_8h" startline="190">b2Vec3::z</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ac1489cdb9e1d32e58ebf0f416e710dce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 operator-</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Subtract two vectors component-wise. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="503" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="502" bodyend="505"/>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
        <references refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" compoundref="b2_math_8h" startline="190">b2Vec3::z</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a1e77dac3105b68676fb43c15c0bb9ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref></type>
        <definition>float32 b2Dot</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>b2Dot</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the dot product on two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="509" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="508" bodyend="511"/>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
        <references refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" compoundref="b2_math_8h" startline="190">b2Vec3::z</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a25353226a22975a6774247a74c2309db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 b2Cross</definition>
        <argsstring>(const b2Vec3 &amp;a, const b2Vec3 &amp;b)</argsstring>
        <name>b2Cross</name>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Perform the cross product on two vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="515" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="514" bodyend="517"/>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
        <references refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" compoundref="b2_math_8h" startline="190">b2Vec3::z</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ad26d99f359b3a6f100d9538ce8fba78f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 operator+</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Mat22 &amp;B)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="520" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="519" bodyend="522"/>
        <references refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" compoundref="b2_math_8h" startline="264">b2Mat22::ex</references>
        <references refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" compoundref="b2_math_8h" startline="264">b2Mat22::ey</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ac1fb7bf7a1dcf65382301b64ed0321a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 b2Mul</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Mat22 &amp;B)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="526" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="525" bodyend="528"/>
        <references refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" compoundref="b2_math_8h" startline="444" endline="447">b2Mul</references>
        <references refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" compoundref="b2_math_8h" startline="264">b2Mat22::ex</references>
        <references refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" compoundref="b2_math_8h" startline="264">b2Mat22::ey</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a6904a90ebef81abe11a580958edb0768" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 b2MulT</definition>
        <argsstring>(const b2Mat22 &amp;A, const b2Mat22 &amp;B)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="532" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="531" bodyend="536"/>
        <references refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" compoundref="b2_math_8h" startline="417" endline="420">b2Dot</references>
        <references refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" compoundref="b2_math_8h" startline="264">b2Mat22::ex</references>
        <references refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" compoundref="b2_math_8h" startline="264">b2Mat22::ey</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aea5a2dc18e95eea003db180aa6b65f5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec3" kindref="compound">b2Vec3</ref></type>
        <definition>b2Vec3 b2Mul</definition>
        <argsstring>(const b2Mat33 &amp;A, const b2Vec3 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_mat33" kindref="compound">b2Mat33</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec3" kindref="compound">b2Vec3</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Multiply a matrix times a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="540" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="539" bodyend="542"/>
        <references refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" compoundref="b2_math_8h" startline="306">b2Mat33::ex</references>
        <references refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" compoundref="b2_math_8h" startline="306">b2Mat33::ey</references>
        <references refid="structb2_mat33_1ae700fc46f679b4ef211a2517005b0557" compoundref="b2_math_8h" startline="306">b2Mat33::ez</references>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
        <references refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" compoundref="b2_math_8h" startline="190">b2Vec3::z</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a598e4404e88fde61e4be408721663193" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Mul22</definition>
        <argsstring>(const b2Mat33 &amp;A, const b2Vec2 &amp;v)</argsstring>
        <name>b2Mul22</name>
        <param>
          <type>const <ref refid="structb2_mat33" kindref="compound">b2Mat33</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Multiply a matrix times a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="546" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="545" bodyend="548"/>
        <references refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" compoundref="b2_math_8h" startline="306">b2Mat33::ex</references>
        <references refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" compoundref="b2_math_8h" startline="306">b2Mat33::ey</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" compoundref="b2_math_8h" startline="190">b2Vec3::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
        <references refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" compoundref="b2_math_8h" startline="190">b2Vec3::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a8656bfe0202c1f9be67adbf172028e4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_rot" kindref="compound">b2Rot</ref></type>
        <definition>b2Rot b2Mul</definition>
        <argsstring>(const b2Rot &amp;q, const b2Rot &amp;r)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_rot" kindref="compound">b2Rot</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_rot" kindref="compound">b2Rot</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Multiply two rotations: q * r. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="552" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="551" bodyend="561"/>
        <references refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" compoundref="b2_math_8h" startline="356">b2Rot::c</references>
        <references refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" compoundref="b2_math_8h" startline="356">b2Rot::s</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a37986fc259888a4e588e6cdb72ad9cd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_rot" kindref="compound">b2Rot</ref></type>
        <definition>b2Rot b2MulT</definition>
        <argsstring>(const b2Rot &amp;q, const b2Rot &amp;r)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_rot" kindref="compound">b2Rot</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_rot" kindref="compound">b2Rot</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Transpose multiply two rotations: qT * r. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="565" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="564" bodyend="574"/>
        <references refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" compoundref="b2_math_8h" startline="356">b2Rot::c</references>
        <references refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" compoundref="b2_math_8h" startline="356">b2Rot::s</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a2c19b253c5ce1933a3520082a86f41f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Mul</definition>
        <argsstring>(const b2Rot &amp;q, const b2Vec2 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_rot" kindref="compound">b2Rot</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Rotate a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="578" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="577" bodyend="580"/>
        <references refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" compoundref="b2_math_8h" startline="356">b2Rot::c</references>
        <references refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" compoundref="b2_math_8h" startline="356">b2Rot::s</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a61bc6ce555c51823d7c0747bc7b010b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2MulT</definition>
        <argsstring>(const b2Rot &amp;q, const b2Vec2 &amp;v)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_rot" kindref="compound">b2Rot</ref> &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inverse rotate a vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="584" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="583" bodyend="586"/>
        <references refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" compoundref="b2_math_8h" startline="356">b2Rot::c</references>
        <references refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" compoundref="b2_math_8h" startline="356">b2Rot::s</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1adc2859334a7f260742bf13e0d506e977" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Mul</definition>
        <argsstring>(const b2Transform &amp;T, const b2Vec2 &amp;v)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="589" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="588" bodyend="594"/>
        <references refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" compoundref="b2_math_8h" startline="356">b2Rot::c</references>
        <references refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" compoundref="b2_math_8h" startline="383">b2Transform::p</references>
        <references refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" compoundref="b2_math_8h" startline="384">b2Transform::q</references>
        <references refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" compoundref="b2_math_8h" startline="356">b2Rot::s</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a157696518d038a2b900f81e0e40ef27f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2MulT</definition>
        <argsstring>(const b2Transform &amp;T, const b2Vec2 &amp;v)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="597" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="596" bodyend="604"/>
        <references refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" compoundref="b2_math_8h" startline="356">b2Rot::c</references>
        <references refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" compoundref="b2_math_8h" startline="383">b2Transform::p</references>
        <references refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" compoundref="b2_math_8h" startline="384">b2Transform::q</references>
        <references refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" compoundref="b2_math_8h" startline="356">b2Rot::s</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a5dee99094252065c5c334ddde9c95e59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_transform" kindref="compound">b2Transform</ref></type>
        <definition>b2Transform b2Mul</definition>
        <argsstring>(const b2Transform &amp;A, const b2Transform &amp;B)</argsstring>
        <name>b2Mul</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="609" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="608" bodyend="614"/>
        <references refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" compoundref="b2_math_8h" startline="444" endline="447">b2Mul</references>
        <references refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" compoundref="b2_math_8h" startline="383">b2Transform::p</references>
        <references refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" compoundref="b2_math_8h" startline="384">b2Transform::q</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1aa6a218f164938003edd5040760e36c8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_transform" kindref="compound">b2Transform</ref></type>
        <definition>b2Transform b2MulT</definition>
        <argsstring>(const b2Transform &amp;A, const b2Transform &amp;B)</argsstring>
        <name>b2MulT</name>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_transform" kindref="compound">b2Transform</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="619" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="618" bodyend="624"/>
        <references refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" compoundref="b2_math_8h" startline="451" endline="454">b2MulT</references>
        <references refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" compoundref="b2_math_8h" startline="383">b2Transform::p</references>
        <references refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" compoundref="b2_math_8h" startline="384">b2Transform::q</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
        <definition>T b2Abs</definition>
        <argsstring>(T a)</argsstring>
        <name>b2Abs</name>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="628" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="627" bodyend="630"/>
        <references refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" compoundref="cvaux_8h" startline="602">a</references>
        <references refid="cv_8h_1a3efb9551a871ddd0463079a808916717" compoundref="cv_8h" startline="1450">T</references>
        <referencedby refid="b2_math_8h_1a9a96bf0b2b574a8b88346e631ce85312" compoundref="b2_math_8h" startline="632" endline="635">b2Abs</referencedby>
        <referencedby refid="classb2_dynamic_tree_1abd7a5c6a5bc109dbbdb0ec3aae039648" compoundref="b2_dynamic_tree_8h" startline="199" endline="282">b2DynamicTree::RayCast</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a9a96bf0b2b574a8b88346e631ce85312" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Abs</definition>
        <argsstring>(const b2Vec2 &amp;a)</argsstring>
        <name>b2Abs</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="633" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="632" bodyend="635"/>
        <references refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" compoundref="b2_math_8h" startline="627" endline="630">b2Abs</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a4e14463da9e9a214121aedc4590822c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_mat22" kindref="compound">b2Mat22</ref></type>
        <definition>b2Mat22 b2Abs</definition>
        <argsstring>(const b2Mat22 &amp;A)</argsstring>
        <name>b2Abs</name>
        <param>
          <type>const <ref refid="structb2_mat22" kindref="compound">b2Mat22</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="638" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="637" bodyend="640"/>
        <references refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" compoundref="b2_math_8h" startline="627" endline="630">b2Abs</references>
        <references refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" compoundref="b2_math_8h" startline="264">b2Mat22::ex</references>
        <references refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" compoundref="b2_math_8h" startline="264">b2Mat22::ey</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
        <definition>T b2Min</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>b2Min</name>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="644" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="643" bodyend="646"/>
        <references refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" compoundref="cvaux_8h" startline="602">b</references>
        <referencedby refid="b2_math_8h_1afd644f04a598cfa9ee1286ff04333d53" compoundref="b2_math_8h" startline="665" endline="668">b2Clamp</referencedby>
        <referencedby refid="b2_math_8h_1a87b278b32677b28124d594008742f8c7" compoundref="b2_math_8h" startline="648" endline="651">b2Min</referencedby>
        <referencedby refid="structb2_a_a_b_b_1ad551edba62d2ad6094672a9ba3e26496" compoundref="b2_collision_8h" startline="187" endline="191">b2AABB::Combine</referencedby>
        <referencedby refid="classb2_dynamic_tree_1abd7a5c6a5bc109dbbdb0ec3aae039648" compoundref="b2_dynamic_tree_8h" startline="199" endline="282">b2DynamicTree::RayCast</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a87b278b32677b28124d594008742f8c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Min</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Min</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="649" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="648" bodyend="651"/>
        <references refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" compoundref="b2_math_8h" startline="643" endline="646">b2Min</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1ab35d30607cf554096fa67407304be217" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
        <definition>T b2Max</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>b2Max</name>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="655" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="654" bodyend="657"/>
        <references refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" compoundref="cvaux_8h" startline="602">b</references>
        <referencedby refid="b2_math_8h_1afd644f04a598cfa9ee1286ff04333d53" compoundref="b2_math_8h" startline="665" endline="668">b2Clamp</referencedby>
        <referencedby refid="b2_math_8h_1adf07fe44a1bfc17daef355f8f1281b00" compoundref="b2_math_8h" startline="659" endline="662">b2Max</referencedby>
        <referencedby refid="structb2_a_a_b_b_1ad551edba62d2ad6094672a9ba3e26496" compoundref="b2_collision_8h" startline="187" endline="191">b2AABB::Combine</referencedby>
        <referencedby refid="classb2_dynamic_tree_1abd7a5c6a5bc109dbbdb0ec3aae039648" compoundref="b2_dynamic_tree_8h" startline="199" endline="282">b2DynamicTree::RayCast</referencedby>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1adf07fe44a1bfc17daef355f8f1281b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Max</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;b)</argsstring>
        <name>b2Max</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="660" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="659" bodyend="662"/>
        <references refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" compoundref="b2_math_8h" startline="654" endline="657">b2Max</references>
        <references refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" compoundref="b2_math_8h" startline="151">b2Vec2::x</references>
        <references refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" compoundref="b2_math_8h" startline="151">b2Vec2::y</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1afd644f04a598cfa9ee1286ff04333d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
        <definition>T b2Clamp</definition>
        <argsstring>(T a, T low, T high)</argsstring>
        <name>b2Clamp</name>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>low</declname>
        </param>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="666" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="665" bodyend="668"/>
        <references refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" compoundref="b2_math_8h" startline="654" endline="657">b2Max</references>
        <references refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" compoundref="b2_math_8h" startline="643" endline="646">b2Min</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a26a6e5df5af01d16c687a9d1a0d72771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structb2_vec2" kindref="compound">b2Vec2</ref></type>
        <definition>b2Vec2 b2Clamp</definition>
        <argsstring>(const b2Vec2 &amp;a, const b2Vec2 &amp;low, const b2Vec2 &amp;high)</argsstring>
        <name>b2Clamp</name>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const <ref refid="structb2_vec2" kindref="compound">b2Vec2</ref> &amp;</type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="671" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="670" bodyend="673"/>
        <references refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" compoundref="b2_math_8h" startline="654" endline="657">b2Max</references>
        <references refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" compoundref="b2_math_8h" startline="643" endline="646">b2Min</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a68c06593a75374fd69e2eb1d1f1caf09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void b2Swap</definition>
        <argsstring>(T &amp;a, T &amp;b)</argsstring>
        <name>b2Swap</name>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="676" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="675" bodyend="680"/>
        <references refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" compoundref="cvaux_8h" startline="602">a</references>
        <references refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" compoundref="cvaux_8h" startline="602">b</references>
        <references refid="cv_8h_1a3efb9551a871ddd0463079a808916717" compoundref="cv_8h" startline="1450">T</references>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a1bd53d288c039f6eeb1526bd55ce1414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 b2NextPowerOfTwo</definition>
        <argsstring>(uint32 x)</argsstring>
        <name>b2NextPowerOfTwo</name>
        <param>
          <type><ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>"Next Largest Power of 2 Given a binary integer value x, the next largest power of 2 can be computed by a SWAR algorithm that recursively &quot;folds&quot; the upper bits into the lower bits. This process yields a bit vector with the same most significant 1 as x, but all 1&apos;s below it. Adding 1 to that value yields the next largest power of 2. For a 32-bit value:" </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="688" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="687" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="b2_math_8h_1a8c73c20bd0705c5a19148486ae305a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool b2IsPowerOfTwo</definition>
        <argsstring>(uint32 x)</argsstring>
        <name>b2IsPowerOfTwo</name>
        <param>
          <type><ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" line="698" bodyfile="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h" bodystart="697" bodyend="701"/>
        <references refid="cv_8h_1adf46fee3107905e425f34254cbce0d9a" compoundref="cv_8h" startline="418">result</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2006-2009<sp/>Erin<sp/>Catto<sp/>http://www.box2d.org</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>B2_MATH_H</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>B2_MATH_H</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Box2D/Common/b2Settings.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="b2_math_8h_1a6e846de254fa783f9618ed93bcf8a394" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1a6e846de254fa783f9618ed93bcf8a394" kindref="member">b2IsValid</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>x)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>infinity<sp/>=<sp/>std::numeric_limits&lt;float32&gt;::infinity();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-infinity<sp/>&lt;<sp/>x<sp/>&amp;&amp;<sp/>x<sp/>&lt;<sp/>infinity;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="b2_math_8h_1a94db844858ec5b062e9df27f843d1552" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="b2_math_8h_1a94db844858ec5b062e9df27f843d1552" kindref="member" tooltip="This is a approximate yet fast inverse square-root.">b2InvSqrt</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/>i;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>convert;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert.x<sp/>=<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>xhalf<sp/>=<sp/>0.5f<sp/>*<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert.i<sp/>=<sp/>0x5f3759df<sp/>-<sp/>(convert.i<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>convert.x;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>*<sp/>(1.5f<sp/>-<sp/>xhalf<sp/>*<sp/>x<sp/>*<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="b2_math_8h_1a58e7c8ed67b5f0f98a0873cfb0035076" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>b2Sqrt(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sqrt(x)</highlight></codeline>
<codeline lineno="61" refid="b2_math_8h_1afe19f6449028d2aaa14c9c4c3b22066d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>b2Atan2(y,<sp/>x)<sp/><sp/><sp/>std::atan2(y,<sp/>x)</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="64" refid="structb2_vec2" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67" refid="structb2_vec2_1a9171b31deb83af96872f99689939a12f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2_1a9171b31deb83af96872f99689939a12f" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec2</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structb2_vec2_1aa8a2f026420a84bbbc62f3a3de2041d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2_1aa8a2f026420a84bbbc62f3a3de2041d6" kindref="member" tooltip="Construct using coordinates.">b2Vec2</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>)<sp/>:<sp/>x(x),<sp/>y(y)<sp/>{}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structb2_vec2_1a5c6cbe27cfb29c6dbb29b9a3285b88d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a5c6cbe27cfb29c6dbb29b9a3285b88d0" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>()<sp/>{<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0.0f;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structb2_vec2_1a4d61640a645e470a50b451307d8e94c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a4d61640a645e470a50b451307d8e94c3" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>x_,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>y_)<sp/>{<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>x_;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>=<sp/>y_;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structb2_vec2_1ab1f648091d3cba00b4c132758fcf4450" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_vec2_1ab1f648091d3cba00b4c132758fcf4450" kindref="member" tooltip="Negate this vector.">operator -</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>v;<sp/>v.<ref refid="structb2_vec2_1a4d61640a645e470a50b451307d8e94c3" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(-<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>,<sp/>-<ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82" refid="structb2_vec2_1a9cb67b5f755b82d40673337a3652d81f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec2_1a9cb67b5f755b82d40673337a3652d81f" kindref="member" tooltip="Read from and indexed element.">operator () </ref>(<ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="83"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)[i];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structb2_vec2_1a50b39580d9f479e17b23ce3cb8efbac6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref>&amp;<sp/><ref refid="structb2_vec2_1a9cb67b5f755b82d40673337a3652d81f" kindref="member" tooltip="Read from and indexed element.">operator () </ref>(<ref refid="b2_settings_8h_1a43d43196463bde49cb067f5c20ab8481" kindref="member">int32</ref><sp/>i)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)[i];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structb2_vec2_1a590789342e22ac1e7f9c1a63a2778b6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a590789342e22ac1e7f9c1a63a2778b6d" kindref="member" tooltip="Add a vector to this vector.">operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>+=<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>+=<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100" refid="structb2_vec2_1a6b48cab4695a979ae40b7613aedc8b17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a6b48cab4695a979ae40b7613aedc8b17" kindref="member" tooltip="Subtract a vector from this vector.">operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>-=<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>-=<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structb2_vec2_1a7097696dce578322928f4535b34f1c6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a7097696dce578322928f4535b34f1c6b" kindref="member" tooltip="Multiply this vector by a scalar.">operator *= </ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>*=<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>*=<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="113"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1a58e7c8ed67b5f0f98a0873cfb0035076" kindref="member">b2Sqrt</ref>(<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>*<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>+<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>*<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="structb2_vec2_1af66641b887488490e2168bfafc5a7e36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec2_1af66641b887488490e2168bfafc5a7e36" kindref="member">LengthSquared</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>*<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>+<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>*<sp/><ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="structb2_vec2_1adda78c92f318fe53d8a53f9b5cfd8e41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec2_1adda78c92f318fe53d8a53f9b5cfd8e41" kindref="member" tooltip="Convert this vector into a unit vector. Returns the length.">Normalize</ref>()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1ae6e9777096c69325d9685fc0a8430685" kindref="member">length</ref><sp/>=<sp/><ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/><ref refid="b2_settings_8h_1ae6bc48338c82daa4598d38f8ebc6f075" kindref="member">b2_epsilon</ref>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0f;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>invLength<sp/>=<sp/>1.0f<sp/>/<sp/><ref refid="cv_8h_1ae6e9777096c69325d9685fc0a8430685" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>*=<sp/>invLength;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>*=<sp/>invLength;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1ae6e9777096c69325d9685fc0a8430685" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="structb2_vec2_1aafb971cf7cc726f91fc3a8215fb0aa17" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1aafb971cf7cc726f91fc3a8215fb0aa17" kindref="member" tooltip="Does this vector contain finite coordinates?">IsValid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="141"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1a6e846de254fa783f9618ed93bcf8a394" kindref="member">b2IsValid</ref>(<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)<sp/>&amp;&amp;<sp/><ref refid="b2_math_8h_1a6e846de254fa783f9618ed93bcf8a394" kindref="member">b2IsValid</ref>(<ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structb2_vec2_1a8f2c6e60cb5898bc239801bd19e2d619" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_vec2_1a8f2c6e60cb5898bc239801bd19e2d619" kindref="member" tooltip="Get the skew vector such that dot(skew_vec, other) == cross(vec, other)">Skew</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="147"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2_1a9171b31deb83af96872f99689939a12f" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec2</ref>(-<ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>,<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/><ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="structb2_vec3" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref></highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158" refid="structb2_vec3_1a837423f66d6fb72d815e7390c09938b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3_1a837423f66d6fb72d815e7390c09938b9" kindref="member" tooltip="Default constructor does nothing (for performance).">b2Vec3</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="structb2_vec3_1a47df55b26ab254dcf42a16638c7feeeb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3_1a47df55b26ab254dcf42a16638c7feeeb" kindref="member" tooltip="Construct using coordinates.">b2Vec3</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>)<sp/>:<sp/>x(x),<sp/>y(y),<sp/>z(z)<sp/>{}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>()<sp/>{<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>0.0f;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>=<sp/>0.0f;<sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structb2_vec3_1a12a1bc14bbe722dfb175a492d2d00a79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a12a1bc14bbe722dfb175a492d2d00a79" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>x_,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>y_,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>z_)<sp/>{<sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>x_;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>=<sp/>y_;<sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>=<sp/>z_;<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="structb2_vec3_1a246cb7ed59d3e758989939ed4e30e5ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="structb2_vec3_1a246cb7ed59d3e758989939ed4e30e5ec" kindref="member" tooltip="Negate this vector.">operator -</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/>v;<sp/>v.<ref refid="structb2_vec3_1a12a1bc14bbe722dfb175a492d2d00a79" kindref="member" tooltip="Set this vector to some specified coordinates.">Set</ref>(-<ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>,<sp/>-<ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>,<sp/>-<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;<sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="structb2_vec3_1a2aaeed3f5308aad85d19c5f0efc72641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a2aaeed3f5308aad85d19c5f0efc72641" kindref="member" tooltip="Add a vector to this vector.">operator += </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>+=<sp/>v.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>+=<sp/>v.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>;<sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>+=<sp/>v.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="structb2_vec3_1a9e5b535548e1c5dfc0dc258d08f5ca32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1a9e5b535548e1c5dfc0dc258d08f5ca32" kindref="member" tooltip="Subtract a vector from this vector.">operator -= </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>-=<sp/>v.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>-=<sp/>v.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>;<sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>-=<sp/>v.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="structb2_vec3_1aaa9aa20195cd0ee53c7176a9a9b02389" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3_1aaa9aa20195cd0ee53c7176a9a9b02389" kindref="member" tooltip="Multiply this vector by a scalar.">operator *= </ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>s)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>*=<sp/>s;<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>*=<sp/>s;<sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>*=<sp/>s;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>,<sp/><ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>,<sp/><ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="structb2_mat22" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref></highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197" refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="structb2_mat22_1abd674c6d92e26962977f34bcd92ff24d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref><sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref><sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="structb2_mat22_1a41d5d8743bda32cb8c6e212528934810" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1ac3e10f6d457c8dab9062ba378f66bc4d" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat22</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>a11,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>a12,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>a21,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>a22)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>a11;<sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>a21;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>a12;<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>a22;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="structb2_mat22_1aed3bee1de38a0b3f36e21c90faa24112" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1aed3bee1de38a0b3f36e21c90faa24112" kindref="member" tooltip="Initialize this matrix using columns.">Set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>c2)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref><sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref><sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="structb2_mat22_1a7192f063b771ac9ded060e41df890509" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1a7192f063b771ac9ded060e41df890509" kindref="member" tooltip="Set this to the identity matrix.">SetIdentity</ref>()</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>1.0f;<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>0.0f;<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="structb2_mat22_1aaeae95f61cf3171ffb94703980e3594b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22_1aaeae95f61cf3171ffb94703980e3594b" kindref="member" tooltip="Set this matrix to all zeros.">SetZero</ref>()</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>0.0f;<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>0.0f;<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="structb2_mat22_1af8d14ac8f48feb282cdd669f36ac8070" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/><ref refid="structb2_mat22_1af8d14ac8f48feb282cdd669f36ac8070" kindref="member">GetInverse</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="235"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref><sp/>=<sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref><sp/>=<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/><ref refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" kindref="member">c</ref><sp/>=<sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref><sp/>=<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>det<sp/>=<sp/>a<sp/>*<sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref><sp/>-<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref><sp/>*<sp/><ref refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(det<sp/>!=<sp/>0.0f)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/><sp/>det<sp/>*<sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref>;<sp/><sp/><sp/><sp/><sp/><sp/>B.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>-det<sp/>*<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>-det<sp/>*<sp/><ref refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" kindref="member">c</ref>;<sp/><sp/><sp/><sp/><sp/><sp/>B.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/><sp/>det<sp/>*<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structb2_mat22_1ab511ad33f5abf87351581842628a9dc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_mat22_1ab511ad33f5abf87351581842628a9dc3" kindref="member">Solve</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="251"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>a11<sp/>=<sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>a12<sp/>=<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>a21<sp/>=<sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>a22<sp/>=<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>det<sp/>=<sp/>a11<sp/>*<sp/>a22<sp/>-<sp/>a12<sp/>*<sp/>a21;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(det<sp/>!=<sp/>0.0f)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>det<sp/>=<sp/>1.0f<sp/>/<sp/>det;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>=<sp/>det<sp/>*<sp/>(a22<sp/>*<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>-<sp/>a12<sp/>*<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>=<sp/>det<sp/>*<sp/>(a11<sp/>*<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>-<sp/>a21<sp/>*<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>,<sp/><ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="structb2_mat33" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref></highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271" refid="structb2_mat33_1a1f4d7ddf1c8a202fc08ec64dfe191463" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1a1f4d7ddf1c8a202fc08ec64dfe191463" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat33</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="structb2_mat33_1a36d99a037008776c8d09fe0aeb5c759c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1a1f4d7ddf1c8a202fc08ec64dfe191463" kindref="member" tooltip="The default constructor does nothing (for performance).">b2Mat33</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>c1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>c2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>c3)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" kindref="member">ex</ref><sp/>=<sp/>c1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" kindref="member">ey</ref><sp/>=<sp/>c2;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1ae700fc46f679b4ef211a2517005b0557" kindref="member">ez</ref><sp/>=<sp/>c3;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="structb2_mat33_1a42fc6953b025e1c8b59717d0ee7accde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33_1a42fc6953b025e1c8b59717d0ee7accde" kindref="member" tooltip="Set this matrix to all zeros.">SetZero</ref>()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" kindref="member">ex</ref>.<ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" kindref="member">ey</ref>.<ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_mat33_1ae700fc46f679b4ef211a2517005b0557" kindref="member">ez</ref>.<ref refid="structb2_vec3_1a5a459ed49f1910a347ca247f848a2dd8" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="structb2_mat33_1a478872c7b6a3bedd13fbedd3ec7a2edb" kindref="member">Solve33</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_mat33_1a2580ac2afadc48028a63ed4c8a1f16bc" kindref="member">Solve22</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33_1a9eb5090b15d08ab495458adfec50e7cb" kindref="member">GetInverse22</ref>(<ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref>*<sp/><ref refid="cv_8h_1a7f0e2a68246903f15305db190c0750f0" kindref="member">M</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33_1a501f85edde8f080e4e9ecff0ec2ee27e" kindref="member">GetSymInverse33</ref>(<ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref>*<sp/><ref refid="cv_8h_1a7f0e2a68246903f15305db190c0750f0" kindref="member">M</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="structb2_mat33_1ae700fc46f679b4ef211a2517005b0557" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" kindref="member">ex</ref>,<sp/><ref refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" kindref="member">ey</ref>,<sp/><ref refid="structb2_mat33_1ae700fc46f679b4ef211a2517005b0557" kindref="member">ez</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">};</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="structb2_rot" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref></highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312" refid="structb2_rot_1a8cabd61f7e293b67748640fa5aa19841" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1a8cabd61f7e293b67748640fa5aa19841" kindref="member">b2Rot</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="structb2_rot_1aa40dda6d390a2f54c793c63027a9b46e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structb2_rot_1a8cabd61f7e293b67748640fa5aa19841" kindref="member">b2Rot</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a00147158cd32c0f762ad7d5917e6d8fd" kindref="member">angle</ref>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>=<sp/>sinf(angle);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>=<sp/>cosf(angle);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="structb2_rot_1acde9186de0a4a7397bf8ef714408ad60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_rot_1acde9186de0a4a7397bf8ef714408ad60" kindref="member" tooltip="Set using an angle in radians.">Set</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a00147158cd32c0f762ad7d5917e6d8fd" kindref="member">angle</ref>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>=<sp/>sinf(angle);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>=<sp/>cosf(angle);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="structb2_rot_1a7f534cb7ece8d325662d7d0e27d4f617" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_rot_1a7f534cb7ece8d325662d7d0e27d4f617" kindref="member" tooltip="Set to the identity rotation.">SetIdentity</ref>()</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="structb2_rot_1a67a6c08812c009654f00800256c8bfdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_rot_1a67a6c08812c009654f00800256c8bfdc" kindref="member" tooltip="Get the angle in radians.">GetAngle</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="339"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1afe19f6449028d2aaa14c9c4c3b22066d" kindref="member">b2Atan2</ref>(<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>,<sp/><ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="structb2_rot_1ac4ab7f262adb99f161775314852723d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_rot_1ac4ab7f262adb99f161775314852723d8" kindref="member" tooltip="Get the x-axis.">GetXAxis</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="345"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref>,<sp/><ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="structb2_rot_1ae731c7434fe1754114ee70149df36c7f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_rot_1ae731c7434fe1754114ee70149df36c7f" kindref="member" tooltip="Get the u-axis.">GetYAxis</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="351"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(-<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>,<sp/><ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>,<sp/><ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="361" refid="structb2_transform" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_transform" kindref="compound">b2Transform</ref></highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364" refid="structb2_transform_1a765a2e5c692a2e1d05c7a5441019373d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1a765a2e5c692a2e1d05c7a5441019373d" kindref="member" tooltip="The default constructor does nothing.">b2Transform</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="structb2_transform_1a823e190e4810e35e8100f4414d0bef62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1a823e190e4810e35e8100f4414d0bef62" kindref="member" tooltip="Initialize using a position vector and a rotation.">b2Transform</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/>rotation)<sp/>:<sp/><ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>(position),<sp/><ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>(rotation)<sp/>{}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="structb2_transform_1af92af4ec6833552b1b22a6ca6d4f5644" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_transform_1af92af4ec6833552b1b22a6ca6d4f5644" kindref="member" tooltip="Set this to the identity transform.">SetIdentity</ref>()</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>.<ref refid="structb2_vec2_1a5c6cbe27cfb29c6dbb29b9a3285b88d0" kindref="member" tooltip="Set this vector to all zeros.">SetZero</ref>();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1a7f534cb7ece8d325662d7d0e27d4f617" kindref="member" tooltip="Set to the identity rotation.">SetIdentity</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="structb2_transform_1a4db696a0b3fada95f95cde3e7e85ced9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_transform_1a4db696a0b3fada95f95cde3e7e85ced9" kindref="member" tooltip="Set this based on the position and angle.">Set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>position,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a00147158cd32c0f762ad7d5917e6d8fd" kindref="member">angle</ref>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref><sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1acde9186de0a4a7397bf8ef714408ad60" kindref="member" tooltip="Set using an angle in radians.">Set</ref>(angle);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="384" refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref><sp/><ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="structb2_sweep" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structb2_sweep" kindref="compound">b2Sweep</ref></highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a81947646092468290d15005928e12fcd" kindref="member">GetTransform</ref>(<ref refid="structb2_transform" kindref="compound">b2Transform</ref>*<sp/>xfb,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a35eb9b976ca87c9b8d758bec070c6c06" kindref="member">Advance</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1ad41061098bac66a8a839219e14877324" kindref="member">alpha</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1ad66a3086bc7656df9cf7454013a2f61b" kindref="member" tooltip="Normalize the angles.">Normalize</ref>();</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="structb2_sweep_1a4bcc302cf78771896d6256fc53f2f8be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_sweep_1a4bcc302cf78771896d6256fc53f2f8be" kindref="member" tooltip="local center of mass position">localCenter</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="405" refid="structb2_sweep_1a16dacd7188f3c7b2adef3242012587d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="structb2_sweep_1a16dacd7188f3c7b2adef3242012587d8" kindref="member">c0</ref>,<sp/><ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="406" refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" kindref="member">a0</ref>,<sp/><ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1ad6f7495e1f1adf7369190bf3f89a60db" kindref="member" tooltip="Useful constant.">b2Vec2_zero</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>*<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>*<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" kindref="member" tooltip="Perform the cross product on two vectors. In 2D this produces a scalar.">b2Cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>*<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>-<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>*<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="b2_math_8h_1a7b096c85fbb12ec43c813f92ede17480" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" kindref="member" tooltip="Perform the cross product on two vectors. In 2D this produces a scalar.">b2Cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>s)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(s<sp/>*<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>-s<sp/>*<sp/>a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="437" refid="b2_math_8h_1aa058d7bfcf20a7b49d1d22d2284fef8f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" kindref="member" tooltip="Perform the cross product on two vectors. In 2D this produces a scalar.">b2Cross</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(-s<sp/>*<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>s<sp/>*<sp/>a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(<ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(v,<sp/>A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>),<sp/><ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(v,<sp/>A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>));</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="b2_math_8h_1aabe5cfd3c0c2436622fe392122f3504d" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1aabe5cfd3c0c2436622fe392122f3504d" kindref="member" tooltip="Add two vectors component-wise.">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>+<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="b2_math_8h_1a42a4d381fdfdde9aa5a3078b13f6b76b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a42a4d381fdfdde9aa5a3078b13f6b76b" kindref="member" tooltip="Subtract two vectors component-wise.">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>-<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>-<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="b2_math_8h_1a8a3ec3a803ef689abd6674c943eb358b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a8a3ec3a803ef689abd6674c943eb358b" kindref="member">operator * </ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(s<sp/>*<sp/>a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>s<sp/>*<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="b2_math_8h_1af7e4f3ac0ffef6bbd586543e2e1b04d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1af7e4f3ac0ffef6bbd586543e2e1b04d5" kindref="member">operator == </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>==<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>&amp;&amp;<sp/>a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>==<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="b2_math_8h_1a55ee8f478626440779e88f2343c698b1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="b2_distance_8h_1af8aa0d6b55c276763e2d2d8854400a8e" kindref="member">b2Distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" kindref="member">c</ref><sp/>=<sp/>a<sp/>-<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c.<ref refid="structb2_vec2_1afb1c498214b88874fcb07eb6322374da" kindref="member" tooltip="Get the length of this vector (the norm).">Length</ref>();</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="b2_math_8h_1a1fb7f05d9bd9a362fa2c6741cf3fbd3b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="b2_math_8h_1a1fb7f05d9bd9a362fa2c6741cf3fbd3b" kindref="member">b2DistanceSquared</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="cvaux_8h_1a1971420173e06f45845eed2ab4e3d5d0" kindref="member">c</ref><sp/>=<sp/>a<sp/>-<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(c,<sp/>c);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="b2_math_8h_1ae5e8a56041cc2acb728eab2e7971f826" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="b2_math_8h_1a8a3ec3a803ef689abd6674c943eb358b" kindref="member">operator * </ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(s<sp/>*<sp/>a.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>,<sp/>s<sp/>*<sp/>a.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>,<sp/>s<sp/>*<sp/>a.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="b2_math_8h_1ac5671b7f3534b00e99a757eb4ade907c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="b2_math_8h_1aabe5cfd3c0c2436622fe392122f3504d" kindref="member" tooltip="Add two vectors component-wise.">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(a.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>+<sp/>b.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>,<sp/>a.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>+<sp/>b.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>,<sp/>a.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>+<sp/>b.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="b2_math_8h_1ac1489cdb9e1d32e58ebf0f416e710dce" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="b2_math_8h_1a42a4d381fdfdde9aa5a3078b13f6b76b" kindref="member" tooltip="Subtract two vectors component-wise.">operator - </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(a.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>-<sp/>b.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>,<sp/>a.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>-<sp/>b.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>,<sp/>a.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>-<sp/>b.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="b2_math_8h_1a1e77dac3105b68676fb43c15c0bb9ee3" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>+<sp/>a.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>+<sp/>a.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="b2_math_8h_1a25353226a22975a6774247a74c2309db" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="b2_math_8h_1a33b1b80b1114eb2d03c307b02ca6fdf6" kindref="member" tooltip="Perform the cross product on two vectors. In 2D this produces a scalar.">b2Cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>(a.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>-<sp/>a.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref>,<sp/>a.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>-<sp/>a.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref>,<sp/>a.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>-<sp/>a.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>*<sp/>b.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="b2_math_8h_1ad26d99f359b3a6f100d9538ce8fba78f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/><ref refid="b2_math_8h_1aabe5cfd3c0c2436622fe392122f3504d" kindref="member" tooltip="Add two vectors component-wise.">operator + </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref><sp/>+<sp/>B.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>,<sp/>A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref><sp/>+<sp/>B.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>*<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="b2_math_8h_1ac1fb7bf7a1dcf65382301b64ed0321a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(<ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(A,<sp/>B.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>),<sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(A,<sp/>B.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>));</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A^T<sp/>*<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="b2_math_8h_1a6904a90ebef81abe11a580958edb0768" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c1(<ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>,<sp/>B.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>),<sp/><ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>,<sp/>B.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/>c2(<ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>,<sp/>B.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>),<sp/><ref refid="b2_math_8h_1a70b92f24af9112e7951ced79045363f1" kindref="member" tooltip="Perform the dot product on two vectors.">b2Dot</ref>(A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>,<sp/>B.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(c1,<sp/>c2);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="b2_math_8h_1aea5a2dc18e95eea003db180aa6b65f5e" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec3" kindref="compound" tooltip="A 2D column vector with 3 elements.">b2Vec3</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>*<sp/>A.<ref refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" kindref="member">ex</ref><sp/>+<sp/>v.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>*<sp/>A.<ref refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" kindref="member">ey</ref><sp/>+<sp/>v.<ref refid="structb2_vec3_1a7cb88968ff10fa500df0b10f5c425536" kindref="member">z</ref><sp/>*<sp/>A.<ref refid="structb2_mat33_1ae700fc46f679b4ef211a2517005b0557" kindref="member">ez</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="b2_math_8h_1a598e4404e88fde61e4be408721663193" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a598e4404e88fde61e4be408721663193" kindref="member" tooltip="Multiply a matrix times a vector.">b2Mul22</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat33" kindref="compound" tooltip="A 3-by-3 matrix. Stored in column-major order.">b2Mat33</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(A.<ref refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" kindref="member">ex</ref>.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>A.<ref refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" kindref="member">ey</ref>.<ref refid="structb2_vec3_1aedc5e37849caa413a8e767fc47741db2" kindref="member">x</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>A.<ref refid="structb2_mat33_1a132f00e6550d1e19c75fb60ce1229638" kindref="member">ex</ref>.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>A.<ref refid="structb2_mat33_1ababc69c718c73a04a651f7a6a981ecf4" kindref="member">ey</ref>.<ref refid="structb2_vec3_1af5a7e99d13d02ff9abb323838d44d3b1" kindref="member">y</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="b2_math_8h_1a8656bfe0202c1f9be67adbf172028e4f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/>q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/><ref refid="cxcore_8h_1a54709f3b06b33b66763f1613cc7fb571" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[qc<sp/>-qs]<sp/>*<sp/>[rc<sp/>-rs]<sp/>=<sp/>[qc*rc-qs*rs<sp/>-qc*rs-qs*rc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[qs<sp/><sp/>qc]<sp/><sp/><sp/>[rs<sp/><sp/>rc]<sp/><sp/><sp/>[qs*rc+qc*rs<sp/>-qs*rs+qc*rc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s<sp/>=<sp/>qs<sp/>*<sp/>rc<sp/>+<sp/>qc<sp/>*<sp/>rs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>=<sp/>qc<sp/>*<sp/>rc<sp/>-<sp/>qs<sp/>*<sp/>rs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref><sp/>qr;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qr.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>=<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>+<sp/>q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qr.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>=<sp/>q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>-<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qr;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="b2_math_8h_1a37986fc259888a4e588e6cdb72ad9cd3" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref><sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/>q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/><ref refid="cxcore_8h_1a54709f3b06b33b66763f1613cc7fb571" kindref="member">r</ref>)</highlight></codeline>
<codeline lineno="565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[<sp/>qc<sp/>qs]<sp/>*<sp/>[rc<sp/>-rs]<sp/>=<sp/>[qc*rc+qs*rs<sp/>-qc*rs+qs*rc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[-qs<sp/>qc]<sp/><sp/><sp/>[rs<sp/><sp/>rc]<sp/><sp/><sp/>[-qs*rc+qc*rs<sp/>qs*rs+qc*rc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>s<sp/>=<sp/>qc<sp/>*<sp/>rs<sp/>-<sp/>qs<sp/>*<sp/>rc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>=<sp/>qc<sp/>*<sp/>rc<sp/>+<sp/>qs<sp/>*<sp/>rs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref><sp/>qr;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qr.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>=<sp/>q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>-<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qr.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>=<sp/>q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>+<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>r.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qr;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="b2_math_8h_1a2c19b253c5ce1933a3520082a86f41f2" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/>q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>-<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="583" refid="b2_math_8h_1a61bc6ce555c51823d7c0747bc7b010b9" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_rot" kindref="compound" tooltip="Rotation.">b2Rot</ref>&amp;<sp/>q,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>-q.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>q.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="b2_math_8h_1adc2859334a7f260742bf13e0d506e977" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>(T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>-<sp/>T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>)<sp/>+<sp/>T.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>=<sp/>(T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>+<sp/>T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>)<sp/>+<sp/>T.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(x,<sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="b2_math_8h_1a157696518d038a2b900f81e0e40ef27f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>px<sp/>=<sp/>v.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref><sp/>-<sp/>T.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>py<sp/>=<sp/>v.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref><sp/>-<sp/>T.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref><sp/>=<sp/>(T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>px<sp/>+<sp/>T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>py);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="highgui_8h_1af1202c02b14870c18fb3a1da73e9e7c7" kindref="member">y</ref><sp/>=<sp/>(-T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1a15725ce0a89cc735ad90687b4c0f4dce" kindref="member" tooltip="Sine and cosine.">s</ref><sp/>*<sp/>px<sp/>+<sp/>T.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1af23e5d31889dcb806ce46ce55aa81261" kindref="member">c</ref><sp/>*<sp/>py);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//<sp/>v2<sp/>=<sp/>A.q.Rot(B.q.Rot(v1)<sp/>+<sp/>B.p)<sp/>+<sp/>A.p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>=<sp/>(A.q<sp/>*<sp/>B.q).Rot(v1)<sp/>+<sp/>A.q.Rot(B.p)<sp/>+<sp/>A.p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608" refid="b2_math_8h_1a5dee99094252065c5c334ddde9c95e59" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/>C;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref><sp/>=<sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(A.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>,<sp/>B.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref><sp/>=<sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(A.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>,<sp/>B.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>)<sp/>+<sp/>A.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>v2<sp/>=<sp/>A.q&apos;<sp/>*<sp/>(B.q<sp/>*<sp/>v1<sp/>+<sp/>B.p<sp/>-<sp/>A.p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>=<sp/>A.q&apos;<sp/>*<sp/>B.q<sp/>*<sp/>v1<sp/>+<sp/>A.q&apos;<sp/>*<sp/>(B.p<sp/>-<sp/>A.p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618" refid="b2_math_8h_1aa6a218f164938003edd5040760e36c8e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref>&amp;<sp/><ref refid="cv_8h_1ad029a852b561fb55dd583daf3830ed89" kindref="member">B</ref>)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_transform" kindref="compound">b2Transform</ref><sp/>C;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref><sp/>=<sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(A.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>,<sp/>B.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref><sp/>=<sp/><ref refid="b2_math_8h_1a38bf48069527b2dc0224e0dedbafe17c" kindref="member">b2MulT</ref>(A.<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>,<sp/>B.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref><sp/>-<sp/>A.<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="627" refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(<ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref>(0)<sp/>?<sp/>a<sp/>:<sp/>-<ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="b2_math_8h_1a9a96bf0b2b574a8b88346e631ce85312" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(<ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>),<sp/><ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>));</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="b2_math_8h_1a4e14463da9e9a214121aedc4590822c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref><sp/><ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>&amp;<sp/>A)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_mat22" kindref="compound" tooltip="A 2-by-2 matrix. Stored in column-major order.">b2Mat22</ref>(<ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(A.<ref refid="structb2_mat22_1abaffa5fc1d401ea36415acffa6205689" kindref="member">ex</ref>),<sp/><ref refid="b2_math_8h_1a7711eacff2f9755d3b34b360f679b33a" kindref="member">b2Abs</ref>(A.<ref refid="structb2_mat22_1af19db58941d2cd146325ef3191b776fd" kindref="member">ey</ref>));</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="643" refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(<ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&lt;<sp/>b<sp/>?<sp/>a<sp/>:<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="b2_math_8h_1a87b278b32677b28124d594008742f8c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(<ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>),<sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>));</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="654" refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(<ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>&gt;<sp/>b<sp/>?<sp/>a<sp/>:<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="b2_math_8h_1adf07fe44a1bfc17daef355f8f1281b00" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>(<ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(a.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>,<sp/>b.<ref refid="structb2_vec2_1a07021c1c08c547868e3cce9c9ef2ea71" kindref="member">x</ref>),<sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(a.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>,<sp/>b.<ref refid="structb2_vec2_1a880f573a9efe402ec207e9d132cb2a43" kindref="member">y</ref>));</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="665" refid="b2_math_8h_1afd644f04a598cfa9ee1286ff04333d53" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="b2_math_8h_1afd644f04a598cfa9ee1286ff04333d53" kindref="member">b2Clamp</ref>(<ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/>low,<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/>high)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(low,<sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(a,<sp/>high));</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="b2_math_8h_1a26a6e5df5af01d16c687a9d1a0d72771" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref><sp/><ref refid="b2_math_8h_1afd644f04a598cfa9ee1286ff04333d53" kindref="member">b2Clamp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>low,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structb2_vec2" kindref="compound" tooltip="A 2D column vector.">b2Vec2</ref>&amp;<sp/>high)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1ab35d30607cf554096fa67407304be217" kindref="member">b2Max</ref>(low,<sp/><ref refid="b2_math_8h_1a169e88bf0dd7c5462555219dd725e11d" kindref="member">b2Min</ref>(a,<sp/>high));</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675" refid="b2_math_8h_1a68c06593a75374fd69e2eb1d1f1caf09" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1a68c06593a75374fd69e2eb1d1f1caf09" kindref="member">b2Swap</ref>(<ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref>&amp;<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>,<sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref>&amp;<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cv_8h_1a3efb9551a871ddd0463079a808916717" kindref="member">T</ref><sp/>tmp<sp/>=<sp/><ref refid="cvaux_8h_1a1031d0e0a97a340abfe0a6ab9e831045" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/><ref refid="cvaux_8h_1ac04272e8ca865b8fba18d36edae9fd2a" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="b2_math_8h_1a1bd53d288c039f6eeb1526bd55ce1414" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref><sp/><ref refid="b2_math_8h_1a1bd53d288c039f6eeb1526bd55ce1414" kindref="member">b2NextPowerOfTwo</ref>(<ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>|=<sp/>(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697" refid="b2_math_8h_1a8c73c20bd0705c5a19148486ae305a12" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="b2_math_8h_1a8c73c20bd0705c5a19148486ae305a12" kindref="member">b2IsPowerOfTwo</ref>(<ref refid="b2_settings_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref><sp/><ref refid="highgui_8h_1a6150e0515f7202e2fb518f7206ed97dc" kindref="member">x</ref>)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1adf46fee3107905e425f34254cbce0d9a" kindref="member">result</ref><sp/>=<sp/>x<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(x<sp/>&amp;<sp/>(x<sp/>-<sp/>1))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cv_8h_1adf46fee3107905e425f34254cbce0d9a" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="structb2_sweep_1a81947646092468290d15005928e12fcd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a81947646092468290d15005928e12fcd" kindref="member">b2Sweep::GetTransform</ref>(<ref refid="structb2_transform" kindref="compound">b2Transform</ref>*<sp/>xf,<sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="704"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xf-&gt;<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref><sp/>=<sp/>(1.0f<sp/>-<sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref>)<sp/>*<sp/><ref refid="structb2_sweep_1a16dacd7188f3c7b2adef3242012587d8" kindref="member">c0</ref><sp/>+<sp/>beta<sp/>*<sp/><ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a00147158cd32c0f762ad7d5917e6d8fd" kindref="member">angle</ref><sp/>=<sp/>(1.0f<sp/>-<sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref>)<sp/>*<sp/><ref refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" kindref="member">a0</ref><sp/>+<sp/>beta<sp/>*<sp/><ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref>;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xf-&gt;<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>.<ref refid="structb2_rot_1acde9186de0a4a7397bf8ef714408ad60" kindref="member" tooltip="Set using an angle in radians.">Set</ref>(angle);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>to<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xf-&gt;<ref refid="structb2_transform_1a9eeeb643a016c29a4d389e480ba6c628" kindref="member">p</ref><sp/>-=<sp/><ref refid="b2_math_8h_1a12738edb3f24ad9d872421f4e6898de9" kindref="member">b2Mul</ref>(xf-&gt;<ref refid="structb2_transform_1ae4aaac23f32686e165138c4e5dc4ce85" kindref="member">q</ref>,<sp/><ref refid="structb2_sweep_1a4bcc302cf78771896d6256fc53f2f8be" kindref="member" tooltip="local center of mass position">localCenter</ref>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="structb2_sweep_1a35eb9b976ca87c9b8d758bec070c6c06" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1a35eb9b976ca87c9b8d758bec070c6c06" kindref="member">b2Sweep::Advance</ref>(<ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1ad41061098bac66a8a839219e14877324" kindref="member">alpha</ref>)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1ab3fe3791ea4d700d5cc1f8124d2edf33" kindref="member">b2Assert</ref>(<ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref><sp/>&lt;<sp/>1.0f);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref><sp/>=<sp/>(alpha<sp/>-<sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref>)<sp/>/<sp/>(1.0f<sp/>-<sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_sweep_1a16dacd7188f3c7b2adef3242012587d8" kindref="member">c0</ref><sp/>=<sp/>(1.0f<sp/>-<sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref>)<sp/>*<sp/><ref refid="structb2_sweep_1a16dacd7188f3c7b2adef3242012587d8" kindref="member">c0</ref><sp/>+<sp/>beta<sp/>*<sp/><ref refid="structb2_sweep_1a1b5402e01b92cc82473389fc6f0375c3" kindref="member" tooltip="center world positions">c</ref>;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" kindref="member">a0</ref><sp/>=<sp/>(1.0f<sp/>-<sp/><ref refid="cv_8h_1a4bf45595b7df91ad095c49cf02ddee05" kindref="member">beta</ref>)<sp/>*<sp/><ref refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" kindref="member">a0</ref><sp/>+<sp/>beta<sp/>*<sp/><ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref>;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_sweep_1aa5f8ab90178b58bc0777096cbc6b91cf" kindref="member">alpha0</ref><sp/>=<sp/><ref refid="cv_8h_1ad41061098bac66a8a839219e14877324" kindref="member">alpha</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="723" refid="structb2_sweep_1ad66a3086bc7656df9cf7454013a2f61b" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structb2_sweep_1ad66a3086bc7656df9cf7454013a2f61b" kindref="member" tooltip="Normalize the angles.">b2Sweep::Normalize</ref>()</highlight></codeline>
<codeline lineno="724"><highlight class="normal">{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/>twoPi<sp/>=<sp/>2.0f<sp/>*<sp/><ref refid="b2_settings_8h_1a3f1872f3fc3c46abc809e7f7d467eb6c" kindref="member">b2_pi</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="b2_settings_8h_1aacdc525d6f7bddb3ae95d5c311bd06a1" kindref="member">float32</ref><sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref><sp/>=<sp/><sp/>twoPi<sp/>*<sp/>floorf(<ref refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" kindref="member">a0</ref><sp/>/<sp/>twoPi);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_sweep_1acf89c7d1223f8ab27501ff033aeac92b" kindref="member">a0</ref><sp/>-=<sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structb2_sweep_1afa96bacc91dd3c92ae716a45512332d6" kindref="member" tooltip="world angles">a</ref><sp/>-=<sp/><ref refid="cv_8h_1a6f364afbe132c4ecfea48bde1b0618ba" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/gaspard/git/lubyk/modules/b2/bind/b2Math.h"/>
  </compounddef>
</doxygen>
