<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="classcv_1_1_mat" kind="class" prot="public">
    <compoundname>cv::Mat</compoundname>
    <derivedcompoundref refid="classcv_1_1_mat__" prot="public" virt="non-virtual">cv::Mat_&lt; _Tp &gt;</derivedcompoundref>
    <includes refid="cxcore_8hpp" local="no">cxcore.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12f" prot="public" static="no">
        <name>@62</name>
        <enumvalue id="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12fa2082a2faa4b65dedcc5b84433c97f817" prot="public">
          <name>MAGIC_VAL</name>
          <initializer>0x42FF0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12fa1c147538fd896f4f9abce9eaea9727e3" prot="public">
          <name>AUTO_STEP</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12fa3a50403178ba15a9617f5ff341418cf9" prot="public">
          <name>CONTINUOUS_FLAG</name>
          <initializer>CV_MAT_CONT_FLAG</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1008" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1008" bodyend="1008"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classcv_1_1_mat_1af9333f06c84f115fda4cdf3af18c2ad0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1015" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1abed816466c45234254d25bc59c31245e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::rows</definition>
        <argsstring></argsstring>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1017" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cv::Mat::cols</definition>
        <argsstring></argsstring>
        <name>cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1017" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1a189e3e4d28750a300bbf49103ce3ec6e" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t cv::Mat::step</definition>
        <argsstring></argsstring>
        <name>step</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1019" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1019" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564" prot="public" static="no" mutable="no">
        <type><ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1021" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1a731b10faf33879e2d6a0ebd0fcce4ce4" prot="public" static="no" mutable="no">
        <type>int *</type>
        <definition>int* cv::Mat::refcount</definition>
        <argsstring></argsstring>
        <name>refcount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1025" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1a3c094be66d6a19b74c93d57a502a59d0" prot="public" static="no" mutable="no">
        <type><ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::datastart</definition>
        <argsstring></argsstring>
        <name>datastart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1028" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcv_1_1_mat_1a717e658d46d705f4c4863b67cade70d8" prot="public" static="no" mutable="no">
        <type><ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::dataend</definition>
        <argsstring></argsstring>
        <name>dataend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1029" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1029" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>()</argsstring>
        <name>Mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="746"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a083d116f0db8e67991f60ac0f7fbf7a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int _rows, int _cols, int _type)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>_rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new matrix of the given size and type.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer representing the <ref refid="group___magic_type" kindref="compound">MagicType</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="754"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a6bd47aeb10295ac550af449fe0c3e643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Size _size, int _type)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="755"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a1cd663c089366877df2b666ac609bbde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int _rows, int _cols, int _type, const Scalar &amp;_s)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>_rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="757"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a1315aee0375536d374630d6e7c42af44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Size _size, int _type, const Scalar &amp;_s)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="758"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a294eaf8a95d2f9c7be19ff594d06278e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="760"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a65a7515778ed4045708af82c2f7eec63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(int _rows, int _cols, int _type, void *_data, size_t _step=AUTO_STEP)</argsstring>
        <name>Mat</name>
        <param>
          <type>int</type>
          <declname>_rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_step</declname>
          <defval>AUTO_STEP</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a matrix header pointing to user-allocated data. If this matrix is further assigned to another matrix, the data <bold>will not</bold> be copied and no reference counting will be executed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer representing a <ref refid="group___magic_type" kindref="compound">MagicType</ref> of the data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_data</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the user-allocated data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_step</parametername>
</parameternamelist>
<parameterdescription>
<para>number of <bold>bytes</bold> to advance from one row to the other. If the value is <computeroutput>AUTO_STEP</computeroutput>, the number of bytes will be calculated from the type and number of columns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="774"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a4f2ba3afb7980dbdfe676bc8e04fdbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(Size _size, int _type, void *_data, size_t _step=AUTO_STEP)</argsstring>
        <name>Mat</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_step</declname>
          <defval>AUTO_STEP</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="775"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a1ccf50d67abb0f05a14ad138e52fb80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m, const Range &amp;rowRange, const Range &amp;colRange)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_range" kindref="compound">Range</ref> &amp;</type>
          <declname>rowRange</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_range" kindref="compound">Range</ref> &amp;</type>
          <declname>colRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="777"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aa7ec97373406215f2d4bc72cc1d27036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const Mat &amp;m, const Rect &amp;roi)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a sub-matrix from a bigger matrix</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>the original matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>roi</parametername>
</parameternamelist>
<parameterdescription>
<para>the region of interest </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="784"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ac54e1c5025e8afd7641fd2a37a3deef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const CvMat *m, bool copyData=false)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="struct_cv_mat" kindref="compound">CvMat</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="786"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a5bd19249b7951dd47b04304646404b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const IplImage *img, bool copyData=false)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="struct___ipl_image" kindref="compound">IplImage</ref> *</type>
          <declname>img</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="788"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a7d65237bb33769a0f785239ede9c0eac" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const vector&lt; _Tp &gt; &amp;vec, bool copyData=false)</argsstring>
        <name>Mat</name>
        <param>
          <type>const vector&lt; _Tp &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>copyData</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="790"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ac0d35e5faf631138a36895c8f8d63dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::Mat</definition>
        <argsstring>(const MatExpr_Base &amp;expr)</argsstring>
        <name>Mat</name>
        <param>
          <type>const <ref refid="namespacecv_1a3a82d9b17055aebfd78f88a64827d894" kindref="member">MatExpr_Base</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="792"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a1b2ae166171f6a7306cf09ff67a2153f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::~Mat</definition>
        <argsstring>()</argsstring>
        <name>~Mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="794"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aed1f81fe7efaacc2bd95149cdfa34302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>operator=</name>
        <reimplementedby refid="classcv_1_1_mat___1afa953e9a1c92c930aed2bf1af0f61502">operator=</reimplementedby>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="796"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a4a087de5e4b6ce7e321f7cecf311d7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(const MatExpr_Base &amp;expr)</argsstring>
        <name>operator=</name>
        <reimplementedby refid="classcv_1_1_mat___1aad00d3ea7be0376d09ec0677d6ad6c72">operator=</reimplementedby>
        <param>
          <type>const <ref refid="namespacecv_1a3a82d9b17055aebfd78f88a64827d894" kindref="member">MatExpr_Base</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="797"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a5205e13801065d6a002360ca1e276d13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::operator MatExpr_&lt; Mat, Mat &gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator MatExpr_&lt; Mat, Mat &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="799"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1acce30f9c4475038ee86ea8b24e00850a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::row</definition>
        <argsstring>(int y) const </argsstring>
        <name>row</name>
        <reimplementedby refid="classcv_1_1_mat___1ac70213d03722f3598c2de5abe5cd8b83">row</reimplementedby>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="802"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ace2ab8cd964b5299c069c39f4f3318f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::col</definition>
        <argsstring>(int x) const </argsstring>
        <name>col</name>
        <reimplementedby refid="classcv_1_1_mat___1ad27fbb624e744fe738664ca3ae9db1da">col</reimplementedby>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="804"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aa5c442a1c548e3c686dbc57be60c7fad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::rowRange</definition>
        <argsstring>(int startrow, int endrow) const </argsstring>
        <name>rowRange</name>
        <param>
          <type>int</type>
          <declname>startrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="806"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a41f404b47717a0216d4e2ec16390e406" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::rowRange</definition>
        <argsstring>(const Range &amp;r) const </argsstring>
        <name>rowRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_range" kindref="compound">Range</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="807"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a1138b6f6e9fc1f0d99d8bc0f595b9a20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::colRange</definition>
        <argsstring>(int startcol, int endcol) const </argsstring>
        <name>colRange</name>
        <param>
          <type>int</type>
          <declname>startcol</declname>
        </param>
        <param>
          <type>int</type>
          <declname>endcol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="809"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1afaa1adb197492153ae11bf690d4eaaea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::colRange</definition>
        <argsstring>(const Range &amp;r) const </argsstring>
        <name>colRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_range" kindref="compound">Range</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="810"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a6a2cf5257b0e8436b9342df14a4797b7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::diag</definition>
        <argsstring>(int d=0) const </argsstring>
        <name>diag</name>
        <reimplementedby refid="classcv_1_1_mat___1a03d0b3c8cfd92883b001b0f9c3d1b47f">diag</reimplementedby>
        <param>
          <type>int</type>
          <declname>d</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="815"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1afb01ff6b2231b72f55618bfb66a5326b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <reimplementedby refid="classcv_1_1_mat___1a4a89cd7de1f298d49733969afa7d5ff4">clone</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a deep copy of the matrix. This method uses <ref refid="classcv_1_1_mat_1a93d41f0686c829fd293bfb09c5aa0d3f" kindref="member">Mat.copyTo</ref> internal so the latter is a better option if you already have a matrix to clone the content into. <simplesect kind="return"><para>new matrix with a copy of the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="824"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a93d41f0686c829fd293bfb09c5aa0d3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::copyTo</definition>
        <argsstring>(Mat &amp;m) const </argsstring>
        <name>copyTo</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy the data into another matrix. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix receiving a copy of the data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="829"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a28a159311cb0bdcaccb0bab8a12eaa7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::copyTo</definition>
        <argsstring>(Mat &amp;m, const Mat &amp;mask) const </argsstring>
        <name>copyTo</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="831"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a2e8e4141e6e2a4b504a8300aa45deaa0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::convertTo</definition>
        <argsstring>(Mat &amp;m, int rtype, double alpha=1, double beta=0) const </argsstring>
        <name>convertTo</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert to another datatype with optional value scaling. This method first multiplies the values by <computeroutput>alpha</computeroutput> (scale), adds <computeroutput>beta</computeroutput> (shift) and then converts to the new <ref refid="group___magic_type" kindref="compound">MagicType</ref> <computeroutput>rtype</computeroutput>. <simplesect kind="see"><para>cvConvertScale </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to which the resulting content will be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtype</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___magic_type" kindref="compound">MagicType</ref> of the converted matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alpha</parametername>
</parameternamelist>
<parameterdescription>
<para>value scaling factor (applied first) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beta</parametername>
</parameternamelist>
<parameterdescription>
<para>shift factor (applied after scaling but before conversion) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="843"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a1ae9e51754ae9e3577c567c635d06a72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::assignTo</definition>
        <argsstring>(Mat &amp;m, int type=-1) const </argsstring>
        <name>assignTo</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="845"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::operator=</definition>
        <argsstring>(const Scalar &amp;s)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="848"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a53bd9b635ccac48bb44ebcdeeb9dc676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::setTo</definition>
        <argsstring>(const Scalar &amp;s, const Mat &amp;mask=Mat())</argsstring>
        <name>setTo</name>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="850"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1adbca7d35259c060dbd9346a6ccff6bba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::reshape</definition>
        <argsstring>(int _cn, int _rows=0) const </argsstring>
        <name>reshape</name>
        <param>
          <type>int</type>
          <declname>_cn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_rows</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="853"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ab291c4a4818f8f7a257b1cb670ae9307" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MatExpr_&lt; MatExpr_Op2_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, double, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1a0e43134a513eec9867f199dace31c8c3" kindref="member">MatOp_T_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>MatExpr_&lt;MatExpr_Op2_&lt;Mat, double, Mat, MatOp_T_&lt;Mat&gt; &gt;, Mat&gt; cv::Mat::t</definition>
        <argsstring>() const </argsstring>
        <name>t</name>
        <reimplementedby refid="classcv_1_1_mat___1ab22a528ec17982893297ed4727320ac7">t</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="857"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a92064ae3058eb780d10b1d0e16e10a87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MatExpr_&lt; MatExpr_Op2_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, int, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1a10f88824e47afee16e4ee9ae4dc239f4" kindref="member">MatOp_Inv_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>MatExpr_&lt;MatExpr_Op2_&lt;Mat, int, Mat, MatOp_Inv_&lt;Mat&gt; &gt;, Mat&gt; cv::Mat::inv</definition>
        <argsstring>(int method=DECOMP_LU) const </argsstring>
        <name>inv</name>
        <reimplementedby refid="classcv_1_1_mat___1a91fbd5ed62c0578121f9c1260a56edca">inv</reimplementedby>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval>DECOMP_LU</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="860"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ab915211d568d9a3286a765e1a10378e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MatExpr_&lt; MatExpr_Op4_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, double, char, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1aa84c1d1ae9cf2476d71a1e085fe9e081" kindref="member">MatOp_MulDiv_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>MatExpr_&lt;MatExpr_Op4_&lt;Mat, Mat, double, char, Mat, MatOp_MulDiv_&lt;Mat&gt; &gt;, Mat&gt; cv::Mat::mul</definition>
        <argsstring>(const Mat &amp;m, double scale=1) const </argsstring>
        <name>mul</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="863"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a173122ee6a42a6a5964c5e3cf7993302" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MatExpr_&lt; MatExpr_Op4_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, double, char, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1aa84c1d1ae9cf2476d71a1e085fe9e081" kindref="member">MatOp_MulDiv_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>MatExpr_&lt;MatExpr_Op4_&lt;Mat, Mat, double, char, Mat, MatOp_MulDiv_&lt;Mat&gt; &gt;, Mat&gt; cv::Mat::mul</definition>
        <argsstring>(const MatExpr_&lt; MatExpr_Op2_&lt; Mat, double, Mat, MatOp_Scale_&lt; Mat &gt; &gt;, Mat &gt; &amp;m, double scale=1) const </argsstring>
        <name>mul</name>
        <param>
          <type>const MatExpr_&lt; MatExpr_Op2_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, double, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1a838d1cf4bd3d04a0dde4fe73c61f4f85" kindref="member">MatOp_Scale_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="865"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a269878746e8cdc1d2c5464822781eccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>MatExpr_&lt; MatExpr_Op4_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, double, char, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1aa84c1d1ae9cf2476d71a1e085fe9e081" kindref="member">MatOp_MulDiv_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>MatExpr_&lt;MatExpr_Op4_&lt;Mat, Mat, double, char, Mat, MatOp_MulDiv_&lt;Mat&gt; &gt;, Mat&gt; cv::Mat::mul</definition>
        <argsstring>(const MatExpr_&lt; MatExpr_Op2_&lt; Mat, double, Mat, MatOp_DivRS_&lt; Mat &gt; &gt;, Mat &gt; &amp;m, double scale=1) const </argsstring>
        <name>mul</name>
        <param>
          <type>const MatExpr_&lt; MatExpr_Op2_&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, double, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1a4e317b7fcf701e6c834e0f68fb845c7b" kindref="member">MatOp_DivRS_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="867"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1af22eb949a15144a145e9283ed0cadccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::cross</definition>
        <argsstring>(const Mat &amp;m) const </argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="870"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ac2a05e801a408df5be90491639a52c89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cv::Mat::dot</definition>
        <argsstring>(const Mat &amp;m) const </argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="872"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aef6575da9c9d0286c4687d6ddbb00788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::create</definition>
        <argsstring>(int _rows, int _cols, int _type)</argsstring>
        <name>create</name>
        <param>
          <type>int</type>
          <declname>_rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate new matrix data unless the matrix already has the specified size and type. The previous data will be unreferenced if needed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in the new matrix data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns in the new matrix data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_type</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___magic_type" kindref="compound">MagicType</ref> of the new data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="888"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a8e1e3ce54ef27bfb07b88b6db807b480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::create</definition>
        <argsstring>(Size _size, int _type)</argsstring>
        <name>create</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="889"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a9d3794250e3dc39714f980b4d0d45864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::addref</definition>
        <argsstring>()</argsstring>
        <name>addref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="891"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::release</definition>
        <argsstring>()</argsstring>
        <name>release</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="894"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1af188277bef9a3c31dc8054519ba76d77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cv::Mat::locateROI</definition>
        <argsstring>(Size &amp;wholeSize, Point &amp;ofs) const </argsstring>
        <name>locateROI</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref> &amp;</type>
          <declname>wholeSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &amp;</type>
          <declname>ofs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="897"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a2fece3507ee7e1284deee6da99e76b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
        <definition>Mat&amp; cv::Mat::adjustROI</definition>
        <argsstring>(int dtop, int dbottom, int dleft, int dright)</argsstring>
        <name>adjustROI</name>
        <reimplementedby refid="classcv_1_1_mat___1a25bbeeabcfac92ac63c9a7fa0ef4d037">adjustROI</reimplementedby>
        <param>
          <type>int</type>
          <declname>dtop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dbottom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dleft</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dright</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Changes the Region Of Interest (ROI) by moving/resizing the current ROI. All adjustments are limited to the bounds of the original matrix to ensure that the ROI does not go out of the matrix data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtop</parametername>
</parameternamelist>
<parameterdescription>
<para>delta to move top side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dbottom</parametername>
</parameternamelist>
<parameterdescription>
<para>delta to move bottom side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dleft</parametername>
</parameternamelist>
<parameterdescription>
<para>delta to move left side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dright</parametername>
</parameternamelist>
<parameterdescription>
<para>delta to move right side </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the current matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="909"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a639213bc2cb22d5215cee2d50fd38e0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::operator()</definition>
        <argsstring>(Range rowRange, Range colRange) const </argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classcv_1_1_range" kindref="compound">Range</ref></type>
          <declname>rowRange</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_range" kindref="compound">Range</ref></type>
          <declname>colRange</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a rectangular sub-matrix from row and column range information.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowRange</parametername>
</parameternamelist>
<parameterdescription>
<para>the row range that we want to extract </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colRange</parametername>
</parameternamelist>
<parameterdescription>
<para>the column range that we want to extract </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> header sharing the data of the original matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="917"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a07413f2e3e63a12185b8b218c24c7270" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>Mat cv::Mat::operator()</definition>
        <argsstring>(const Rect &amp;roi) const </argsstring>
        <name>operator()</name>
        <reimplementedby refid="classcv_1_1_mat___1a7c0098257cea0d87bb599904b64d4fdb">operator()</reimplementedby>
        <param>
          <type>const <ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> &amp;</type>
          <declname>roi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a rectangular sub-matrix from a rectangle ROI.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>roi</parametername>
</parameternamelist>
<parameterdescription>
<para>the region of interest in the current matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> header sharing the data of the original matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="924"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aa09a1c7966df3ce9bb5b1d936354d868" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::operator CvMat</definition>
        <argsstring>() const </argsstring>
        <name>operator CvMat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert header to legacy <ref refid="struct_cv_mat" kindref="compound">CvMat</ref> format without copying the data. <simplesect kind="return"><para>a new <ref refid="struct_cv_mat" kindref="compound">CvMat</ref> header using the same format and data. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="929"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a58be4601818b7271611786bb554241c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cv::Mat::operator IplImage</definition>
        <argsstring>() const </argsstring>
        <name>operator IplImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="931"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aff83775c7fc1479de5f4a8c4e67fe361" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cv::Mat::isContinuous</definition>
        <argsstring>() const </argsstring>
        <name>isContinuous</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="936"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1af72a7cf6705c102f05b5760db5d3b6ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::elemSize</definition>
        <argsstring>() const </argsstring>
        <name>elemSize</name>
        <reimplementedby refid="classcv_1_1_mat___1ab76741aad767a3574eae164742e3d7b5">elemSize</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size in bytes of an element. For example: a matrix with type <computeroutput>CV_32FC3</computeroutput> would have a channel size of 3 and thus an element size of 3 floats = 12 bytes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="942"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a91e0bf81a49b68ca1d95fdf7dce58d30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::elemSize1</definition>
        <argsstring>() const </argsstring>
        <name>elemSize1</name>
        <reimplementedby refid="classcv_1_1_mat___1a9667acbed43ae6d910d7023de41ce7e5">elemSize1</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size in bytes of a single value. For example: a matrix with type <computeroutput>CV_32FC3</computeroutput> would have an value size of 1 float = 4 bytes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="948"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aa6477efc7399fbe742418250ccf99a4b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::type</definition>
        <argsstring>() const </argsstring>
        <name>type</name>
        <reimplementedby refid="classcv_1_1_mat___1ad049d5f8816aa3e8c2e8584ea0a9c437">type</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="group___magic_type" kindref="compound">MagicType</ref> of the data. This method is similar to CV_MAT_TYPE(cvmat-&gt;type).</para><para><simplesect kind="return"><para><ref refid="group___magic_type" kindref="compound">MagicType</ref> of the data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="955"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aaad7b287d4ea97236f6c506d2c4823a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::depth</definition>
        <argsstring>() const </argsstring>
        <name>depth</name>
        <reimplementedby refid="classcv_1_1_mat___1a91854cefee382a2ead2bc691ac9cf41a">depth</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="group___depth_type" kindref="compound">DepthType</ref> of the current matrix. The DepthType is a single number representing the kind of value stored. This method is similar to CV_MAT_DEPTH(cvmat-&gt;type). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="961"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a25a881a7ec5963714af7de1e4a63e521" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cv::Mat::channels</definition>
        <argsstring>() const </argsstring>
        <name>channels</name>
        <reimplementedby refid="classcv_1_1_mat___1ace2da405cbb8da7092628764c124816e">channels</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of channels (number of values in each element). Similar to CV_MAT_CN(cvmat-&gt;type). <simplesect kind="return"><para>number of channels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="967"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1adfa282a0c8b9e5ff259f14b12f2417af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t cv::Mat::step1</definition>
        <argsstring>() const </argsstring>
        <name>step1</name>
        <reimplementedby refid="classcv_1_1_mat___1a78ae1bdd524adc4b6d09613a70ff4917">step1</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of elements to move to next row. This number is the number of bytes to next row (<ref refid="classcv_1_1_mat_1a189e3e4d28750a300bbf49103ce3ec6e" kindref="member">step</ref>) divided by the number of bytes forming a single element (<ref refid="classcv_1_1_mat_1af72a7cf6705c102f05b5760db5d3b6ed" kindref="member">elemSize</ref>). <simplesect kind="return"><para>number of elements to move to next row </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="974"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1af864f7576072dc7594cd0eab9eacc5c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
        <definition>Size cv::Mat::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="namespacecv_1a346f563897249351a34549137c8532a0" kindref="member">Size</ref> of the matrix. The <computeroutput>width</computeroutput> parameter represents the number of columns and the <computeroutput>height</computeroutput> parameter the number of rows. <simplesect kind="return"><para>size of the matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="981"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a17d0777aef52a7cfbdb8d04d189fa5c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cv::Mat::empty</definition>
        <argsstring>() const </argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="983"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a8d2d1cd8de25fe16d8b0348f6fb456a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>uchar* cv::Mat::ptr</definition>
        <argsstring>(int y=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>y</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="986"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ac5491133b0711178c1697f3fc16febac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
        <definition>const uchar* cv::Mat::ptr</definition>
        <argsstring>(int y=0) const </argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>y</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="987"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a5601d721e5f8e83c7a774e716c312782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>_Tp* cv::Mat::ptr</definition>
        <argsstring>(int y=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>y</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="990"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a0c003aad66785786abd582ad3b42bfc0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp *</type>
        <definition>const _Tp* cv::Mat::ptr</definition>
        <argsstring>(int y=0) const </argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>y</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="991"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a02ab6928538a4122db4b776b882cbbd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(int y, int x)</argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="996"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a2083246e89fe69e1a81c4c793b1eee56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp &amp;</type>
        <definition>_Tp&amp; cv::Mat::at</definition>
        <argsstring>(Point pt)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="997"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ac8aa00cdb411fec2fd56b2b3e15f23b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(int y, int x) const </argsstring>
        <name>at</name>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="998"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a16ba832ec218e2957fa7164f339eae3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>const _Tp &amp;</type>
        <definition>const _Tp&amp; cv::Mat::at</definition>
        <argsstring>(Point pt) const </argsstring>
        <name>at</name>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="999"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a7c429283d024a1b3eb38fe156e7de766" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcv_1_1_mat_iterator__" kindref="compound">MatIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatIterator_&lt;_Tp&gt; cv::Mat::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <reimplementedby refid="classcv_1_1_mat___1aa795ee2dc38e65ee129d9125cbabab0e">begin</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1003"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1afbfd610b6809c56318ebd45c1182d120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcv_1_1_mat_iterator__" kindref="compound">MatIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatIterator_&lt;_Tp&gt; cv::Mat::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <reimplementedby refid="classcv_1_1_mat___1a5e02060c1085a73a91d7fe9e8d2583a5">end</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1004"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ae001c111570be49b388fa51f824f091c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcv_1_1_mat_const_iterator__" kindref="compound">MatConstIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatConstIterator_&lt;_Tp&gt; cv::Mat::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <reimplementedby refid="classcv_1_1_mat___1a38b49b60592f45ee12b168ce67c848e1">begin</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1005"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ad133d905716f017add2ec481ac725def" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type><ref refid="classcv_1_1_mat_const_iterator__" kindref="compound">MatConstIterator_</ref>&lt; _Tp &gt;</type>
        <definition>MatConstIterator_&lt;_Tp&gt; cv::Mat::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <reimplementedby refid="classcv_1_1_mat___1a735bca4c12cb4ddf99589c7313da94d6">end</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1006"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classcv_1_1_mat_1a0f81856dbcb93eae6113947edb3ea068" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>static Mat cv::Mat::diag</definition>
        <argsstring>(const Mat &amp;d)</argsstring>
        <name>diag</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="817"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1aa85b198617b573c2e71f0bc064d82214" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" kindref="member">MatExpr_Initializer</ref></type>
        <definition>static MatExpr_Initializer cv::Mat::zeros</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>zeros</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="875"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a543a24c6033456fc68c99cfad41625d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" kindref="member">MatExpr_Initializer</ref></type>
        <definition>static MatExpr_Initializer cv::Mat::zeros</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>zeros</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="876"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a3c85ecda6d3590aa2f5c66245b68f25e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" kindref="member">MatExpr_Initializer</ref></type>
        <definition>static MatExpr_Initializer cv::Mat::ones</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>ones</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="877"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1ac130fe38df8b4fae0b0b345150aee613" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" kindref="member">MatExpr_Initializer</ref></type>
        <definition>static MatExpr_Initializer cv::Mat::ones</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>ones</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="878"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1a159f7eb0eef824c074f19d3062303fca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" kindref="member">MatExpr_Initializer</ref></type>
        <definition>static MatExpr_Initializer cv::Mat::eye</definition>
        <argsstring>(int rows, int cols, int type)</argsstring>
        <name>eye</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="879"/>
      </memberdef>
      <memberdef kind="function" id="classcv_1_1_mat_1af3230f380f439f09c676dd4fa8da2e62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" kindref="member">MatExpr_Initializer</ref></type>
        <definition>static MatExpr_Initializer cv::Mat::eye</definition>
        <argsstring>(Size size, int type)</argsstring>
        <name>eye</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="880"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="286">
        <label>cv::Mat_&lt; _Tp &gt;</label>
        <link refid="classcv_1_1_mat__"/>
        <childnode refid="285" relation="public-inheritance">
        </childnode>
      </node>
      <node id="285">
        <label>cv::Mat</label>
        <link refid="classcv_1_1_mat"/>
      </node>
    </inheritancegraph>
    <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="743" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="742" bodyend="1030"/>
    <listofallmembers>
      <member refid="classcv_1_1_mat_1a9d3794250e3dc39714f980b4d0d45864" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>addref</name></member>
      <member refid="classcv_1_1_mat_1a2fece3507ee7e1284deee6da99e76b9b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>adjustROI</name></member>
      <member refid="classcv_1_1_mat_1a1ae9e51754ae9e3577c567c635d06a72" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>assignTo</name></member>
      <member refid="classcv_1_1_mat_1a02ab6928538a4122db4b776b882cbbd2" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="classcv_1_1_mat_1a2083246e89fe69e1a81c4c793b1eee56" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="classcv_1_1_mat_1ac8aa00cdb411fec2fd56b2b3e15f23b9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="classcv_1_1_mat_1a16ba832ec218e2957fa7164f339eae3e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>at</name></member>
      <member refid="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12fa1c147538fd896f4f9abce9eaea9727e3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>AUTO_STEP</name></member>
      <member refid="classcv_1_1_mat_1a7c429283d024a1b3eb38fe156e7de766" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>begin</name></member>
      <member refid="classcv_1_1_mat_1ae001c111570be49b388fa51f824f091c" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>begin</name></member>
      <member refid="classcv_1_1_mat_1a25a881a7ec5963714af7de1e4a63e521" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>channels</name></member>
      <member refid="classcv_1_1_mat_1afb01ff6b2231b72f55618bfb66a5326b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>clone</name></member>
      <member refid="classcv_1_1_mat_1ace2ab8cd964b5299c069c39f4f3318f4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>col</name></member>
      <member refid="classcv_1_1_mat_1a1138b6f6e9fc1f0d99d8bc0f595b9a20" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>colRange</name></member>
      <member refid="classcv_1_1_mat_1afaa1adb197492153ae11bf690d4eaaea" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>colRange</name></member>
      <member refid="classcv_1_1_mat_1aa3e5a47585c9ef6a0842556739155e3e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>cols</name></member>
      <member refid="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12fa3a50403178ba15a9617f5ff341418cf9" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>CONTINUOUS_FLAG</name></member>
      <member refid="classcv_1_1_mat_1a2e8e4141e6e2a4b504a8300aa45deaa0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>convertTo</name></member>
      <member refid="classcv_1_1_mat_1a93d41f0686c829fd293bfb09c5aa0d3f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>copyTo</name></member>
      <member refid="classcv_1_1_mat_1a28a159311cb0bdcaccb0bab8a12eaa7f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>copyTo</name></member>
      <member refid="classcv_1_1_mat_1aef6575da9c9d0286c4687d6ddbb00788" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>create</name></member>
      <member refid="classcv_1_1_mat_1a8e1e3ce54ef27bfb07b88b6db807b480" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>create</name></member>
      <member refid="classcv_1_1_mat_1af22eb949a15144a145e9283ed0cadccb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>cross</name></member>
      <member refid="classcv_1_1_mat_1a4d33bed1c850265370d2af0ff02e1564" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>data</name></member>
      <member refid="classcv_1_1_mat_1a717e658d46d705f4c4863b67cade70d8" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>dataend</name></member>
      <member refid="classcv_1_1_mat_1a3c094be66d6a19b74c93d57a502a59d0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>datastart</name></member>
      <member refid="classcv_1_1_mat_1aaad7b287d4ea97236f6c506d2c4823a4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>depth</name></member>
      <member refid="classcv_1_1_mat_1a6a2cf5257b0e8436b9342df14a4797b7" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>diag</name></member>
      <member refid="classcv_1_1_mat_1a0f81856dbcb93eae6113947edb3ea068" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>diag</name></member>
      <member refid="classcv_1_1_mat_1ac2a05e801a408df5be90491639a52c89" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>dot</name></member>
      <member refid="classcv_1_1_mat_1af72a7cf6705c102f05b5760db5d3b6ed" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>elemSize</name></member>
      <member refid="classcv_1_1_mat_1a91e0bf81a49b68ca1d95fdf7dce58d30" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>elemSize1</name></member>
      <member refid="classcv_1_1_mat_1a17d0777aef52a7cfbdb8d04d189fa5c3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>empty</name></member>
      <member refid="classcv_1_1_mat_1afbfd610b6809c56318ebd45c1182d120" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>end</name></member>
      <member refid="classcv_1_1_mat_1ad133d905716f017add2ec481ac725def" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>end</name></member>
      <member refid="classcv_1_1_mat_1a159f7eb0eef824c074f19d3062303fca" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>eye</name></member>
      <member refid="classcv_1_1_mat_1af3230f380f439f09c676dd4fa8da2e62" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>eye</name></member>
      <member refid="classcv_1_1_mat_1af9333f06c84f115fda4cdf3af18c2ad0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>flags</name></member>
      <member refid="classcv_1_1_mat_1a92064ae3058eb780d10b1d0e16e10a87" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>inv</name></member>
      <member refid="classcv_1_1_mat_1aff83775c7fc1479de5f4a8c4e67fe361" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>isContinuous</name></member>
      <member refid="classcv_1_1_mat_1af188277bef9a3c31dc8054519ba76d77" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>locateROI</name></member>
      <member refid="classcv_1_1_mat_1a8972932ab3070c42b7898cdbeaebc12fa2082a2faa4b65dedcc5b84433c97f817" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>MAGIC_VAL</name></member>
      <member refid="classcv_1_1_mat_1af1d014cecd1510cdf580bf2ed7e5aafc" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a083d116f0db8e67991f60ac0f7fbf7a5" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a6bd47aeb10295ac550af449fe0c3e643" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a1cd663c089366877df2b666ac609bbde" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a1315aee0375536d374630d6e7c42af44" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a294eaf8a95d2f9c7be19ff594d06278e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a65a7515778ed4045708af82c2f7eec63" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a4f2ba3afb7980dbdfe676bc8e04fdbc4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a1ccf50d67abb0f05a14ad138e52fb80b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1aa7ec97373406215f2d4bc72cc1d27036" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1ac54e1c5025e8afd7641fd2a37a3deef7" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a5bd19249b7951dd47b04304646404b5c" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1a7d65237bb33769a0f785239ede9c0eac" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1ac0d35e5faf631138a36895c8f8d63dba" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>Mat</name></member>
      <member refid="classcv_1_1_mat_1ab915211d568d9a3286a765e1a10378e6" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>mul</name></member>
      <member refid="classcv_1_1_mat_1a173122ee6a42a6a5964c5e3cf7993302" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>mul</name></member>
      <member refid="classcv_1_1_mat_1a269878746e8cdc1d2c5464822781eccb" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>mul</name></member>
      <member refid="classcv_1_1_mat_1a3c85ecda6d3590aa2f5c66245b68f25e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ones</name></member>
      <member refid="classcv_1_1_mat_1ac130fe38df8b4fae0b0b345150aee613" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ones</name></member>
      <member refid="classcv_1_1_mat_1aa09a1c7966df3ce9bb5b1d936354d868" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator CvMat</name></member>
      <member refid="classcv_1_1_mat_1a58be4601818b7271611786bb554241c3" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator IplImage</name></member>
      <member refid="classcv_1_1_mat_1a5205e13801065d6a002360ca1e276d13" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator MatExpr_&lt; Mat, Mat &gt;</name></member>
      <member refid="classcv_1_1_mat_1a639213bc2cb22d5215cee2d50fd38e0a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator()</name></member>
      <member refid="classcv_1_1_mat_1a07413f2e3e63a12185b8b218c24c7270" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator()</name></member>
      <member refid="classcv_1_1_mat_1aed1f81fe7efaacc2bd95149cdfa34302" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="classcv_1_1_mat_1a4a087de5e4b6ce7e321f7cecf311d7dd" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="classcv_1_1_mat_1aa5c947f7e449a4d856a4f3a87fcebd50" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>operator=</name></member>
      <member refid="classcv_1_1_mat_1a8d2d1cd8de25fe16d8b0348f6fb456a1" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="classcv_1_1_mat_1ac5491133b0711178c1697f3fc16febac" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="classcv_1_1_mat_1a5601d721e5f8e83c7a774e716c312782" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="classcv_1_1_mat_1a0c003aad66785786abd582ad3b42bfc0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>ptr</name></member>
      <member refid="classcv_1_1_mat_1a731b10faf33879e2d6a0ebd0fcce4ce4" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>refcount</name></member>
      <member refid="classcv_1_1_mat_1ae48d4913285518e2c21a3457017e716e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>release</name></member>
      <member refid="classcv_1_1_mat_1adbca7d35259c060dbd9346a6ccff6bba" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>reshape</name></member>
      <member refid="classcv_1_1_mat_1acce30f9c4475038ee86ea8b24e00850a" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>row</name></member>
      <member refid="classcv_1_1_mat_1aa5c442a1c548e3c686dbc57be60c7fad" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>rowRange</name></member>
      <member refid="classcv_1_1_mat_1a41f404b47717a0216d4e2ec16390e406" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>rowRange</name></member>
      <member refid="classcv_1_1_mat_1abed816466c45234254d25bc59c31245e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>rows</name></member>
      <member refid="classcv_1_1_mat_1a53bd9b635ccac48bb44ebcdeeb9dc676" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>setTo</name></member>
      <member refid="classcv_1_1_mat_1af864f7576072dc7594cd0eab9eacc5c0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>size</name></member>
      <member refid="classcv_1_1_mat_1a189e3e4d28750a300bbf49103ce3ec6e" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>step</name></member>
      <member refid="classcv_1_1_mat_1adfa282a0c8b9e5ff259f14b12f2417af" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>step1</name></member>
      <member refid="classcv_1_1_mat_1ab291c4a4818f8f7a257b1cb670ae9307" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>t</name></member>
      <member refid="classcv_1_1_mat_1aa6477efc7399fbe742418250ccf99a4b" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>type</name></member>
      <member refid="classcv_1_1_mat_1aa85b198617b573c2e71f0bc064d82214" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>zeros</name></member>
      <member refid="classcv_1_1_mat_1a543a24c6033456fc68c99cfad41625d0" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>zeros</name></member>
      <member refid="classcv_1_1_mat_1a1b2ae166171f6a7306cf09ff67a2153f" prot="public" virt="non-virtual"><scope>cv::Mat</scope><name>~Mat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
