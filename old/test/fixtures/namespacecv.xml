<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.3">
  <compounddef id="namespacecv" kind="namespace">
    <compoundname>cv</compoundname>
    <innerclass refid="classcv_1_1_base_row_filter" prot="public">cv::BaseRowFilter</innerclass>
    <innerclass refid="classcv_1_1_base_column_filter" prot="public">cv::BaseColumnFilter</innerclass>
    <innerclass refid="classcv_1_1_base_filter" prot="public">cv::BaseFilter</innerclass>
    <innerclass refid="classcv_1_1_filter_engine" prot="public">cv::FilterEngine</innerclass>
    <innerclass refid="classcv_1_1_moments" prot="public">cv::Moments</innerclass>
    <innerclass refid="classcv_1_1_kalman_filter" prot="public">cv::KalmanFilter</innerclass>
    <innerclass refid="classcv_1_1_feature_evaluator" prot="public">cv::FeatureEvaluator</innerclass>
    <innerclass refid="classcv_1_1_cascade_classifier" prot="public">cv::CascadeClassifier</innerclass>
    <innerclass refid="classcv_1_1_stereo_b_m" prot="public">cv::StereoBM</innerclass>
    <innerclass refid="classcv_1_1_stereo_s_g_b_m" prot="public">cv::StereoSGBM</innerclass>
    <innerclass refid="classcv_1_1_key_point" prot="public">cv::KeyPoint</innerclass>
    <innerclass refid="classcv_1_1_s_u_r_f" prot="public">cv::SURF</innerclass>
    <innerclass refid="classcv_1_1_m_s_e_r" prot="public">cv::MSER</innerclass>
    <innerclass refid="classcv_1_1_star_detector" prot="public">cv::StarDetector</innerclass>
    <innerclass refid="classcv_1_1_exception" prot="public">cv::Exception</innerclass>
    <innerclass refid="classcv_1_1_allocator" prot="public">cv::Allocator</innerclass>
    <innerclass refid="classcv_1_1_data_depth" prot="public">cv::DataDepth</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01bool_01_4" prot="public">cv::DataDepth&lt; bool &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01uchar_01_4" prot="public">cv::DataDepth&lt; uchar &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01schar_01_4" prot="public">cv::DataDepth&lt; schar &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01ushort_01_4" prot="public">cv::DataDepth&lt; ushort &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01short_01_4" prot="public">cv::DataDepth&lt; short &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01int_01_4" prot="public">cv::DataDepth&lt; int &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01float_01_4" prot="public">cv::DataDepth&lt; float &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01double_01_4" prot="public">cv::DataDepth&lt; double &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_depth_3_01___tp_01_5_01_4" prot="public">cv::DataDepth&lt; _Tp * &gt;</innerclass>
    <innerclass refid="classcv_1_1_vec" prot="public">cv::Vec</innerclass>
    <innerclass refid="classcv_1_1_complex" prot="public">cv::Complex</innerclass>
    <innerclass refid="classcv_1_1_point__" prot="public">cv::Point_</innerclass>
    <innerclass refid="classcv_1_1_point3__" prot="public">cv::Point3_</innerclass>
    <innerclass refid="classcv_1_1_size__" prot="public">cv::Size_</innerclass>
    <innerclass refid="classcv_1_1_rect__" prot="public">cv::Rect_</innerclass>
    <innerclass refid="classcv_1_1_rotated_rect" prot="public">cv::RotatedRect</innerclass>
    <innerclass refid="classcv_1_1_scalar__" prot="public">cv::Scalar_</innerclass>
    <innerclass refid="classcv_1_1_range" prot="public">cv::Range</innerclass>
    <innerclass refid="classcv_1_1_data_type" prot="public">cv::DataType</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01bool_01_4" prot="public">cv::DataType&lt; bool &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01uchar_01_4" prot="public">cv::DataType&lt; uchar &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01schar_01_4" prot="public">cv::DataType&lt; schar &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01ushort_01_4" prot="public">cv::DataType&lt; ushort &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01short_01_4" prot="public">cv::DataType&lt; short &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01int_01_4" prot="public">cv::DataType&lt; int &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01float_01_4" prot="public">cv::DataType&lt; float &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01double_01_4" prot="public">cv::DataType&lt; double &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_vec_3_01___tp_00_01cn_01_4_01_4" prot="public">cv::DataType&lt; Vec&lt; _Tp, cn &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01std_1_1complex_3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; std::complex&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_complex_3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; Complex&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_point___3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; Point_&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_point3___3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; Point3_&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_size___3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; Size_&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_rect___3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; Rect_&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_scalar___3_01___tp_01_4_01_4" prot="public">cv::DataType&lt; Scalar_&lt; _Tp &gt; &gt;</innerclass>
    <innerclass refid="classcv_1_1_data_type_3_01_range_01_4" prot="public">cv::DataType&lt; Range &gt;</innerclass>
    <innerclass refid="classcv_1_1_ptr" prot="public">cv::Ptr</innerclass>
    <innerclass refid="classcv_1_1_mat" prot="public">cv::Mat</innerclass>
    <innerclass refid="classcv_1_1_r_n_g" prot="public">cv::RNG</innerclass>
    <innerclass refid="classcv_1_1_term_criteria" prot="public">cv::TermCriteria</innerclass>
    <innerclass refid="classcv_1_1_p_c_a" prot="public">cv::PCA</innerclass>
    <innerclass refid="classcv_1_1_s_v_d" prot="public">cv::SVD</innerclass>
    <innerclass refid="classcv_1_1_line_iterator" prot="public">cv::LineIterator</innerclass>
    <innerclass refid="classcv_1_1_mat__" prot="public">cv::Mat_</innerclass>
    <innerclass refid="classcv_1_1_mat_const_iterator__" prot="public">cv::MatConstIterator_</innerclass>
    <innerclass refid="classcv_1_1_mat_iterator__" prot="public">cv::MatIterator_</innerclass>
    <innerclass refid="classcv_1_1_mat_comma_initializer__" prot="public">cv::MatCommaInitializer_</innerclass>
    <innerclass refid="classcv_1_1_auto_buffer" prot="public">cv::AutoBuffer</innerclass>
    <innerclass refid="classcv_1_1_mat_n_d" prot="public">cv::MatND</innerclass>
    <innerclass refid="classcv_1_1_n_ary_mat_n_d_iterator" prot="public">cv::NAryMatNDIterator</innerclass>
    <innerclass refid="classcv_1_1_mat_n_d__" prot="public">cv::MatND_</innerclass>
    <innerclass refid="classcv_1_1_sparse_mat" prot="public">cv::SparseMat</innerclass>
    <innerclass refid="classcv_1_1_sparse_mat_const_iterator" prot="public">cv::SparseMatConstIterator</innerclass>
    <innerclass refid="classcv_1_1_sparse_mat_iterator" prot="public">cv::SparseMatIterator</innerclass>
    <innerclass refid="classcv_1_1_sparse_mat__" prot="public">cv::SparseMat_</innerclass>
    <innerclass refid="classcv_1_1_sparse_mat_const_iterator__" prot="public">cv::SparseMatConstIterator_</innerclass>
    <innerclass refid="classcv_1_1_sparse_mat_iterator__" prot="public">cv::SparseMatIterator_</innerclass>
    <innerclass refid="classcv_1_1_k_d_tree" prot="public">cv::KDTree</innerclass>
    <innerclass refid="classcv_1_1_file_storage" prot="public">cv::FileStorage</innerclass>
    <innerclass refid="classcv_1_1_file_node" prot="public">cv::FileNode</innerclass>
    <innerclass refid="classcv_1_1_file_node_iterator" prot="public">cv::FileNodeIterator</innerclass>
    <innerclass refid="classcv_1_1_seq" prot="public">cv::Seq</innerclass>
    <innerclass refid="classcv_1_1_seq_iterator" prot="public">cv::SeqIterator</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacecv_1aa40afca20bac89db1ccab192069bfcab" prot="public" static="no">
        <name>@0</name>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcabaa1de4cff95e3377d6d0cbe7569bd4e9f" prot="public">
          <name>BORDER_REPLICATE</name>
          <initializer>IPL_BORDER_REPLICATE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcabaed2e4346047e265c8c5a6d0276dcd838" prot="public">
          <name>BORDER_CONSTANT</name>
          <initializer>IPL_BORDER_CONSTANT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcaba815c8a89b7cb206dcba14d11b7560f4b" prot="public">
          <name>BORDER_REFLECT</name>
          <initializer>IPL_BORDER_REFLECT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcabab3c5a6143d8120b95005fa7105a10bb4" prot="public">
          <name>BORDER_REFLECT_101</name>
          <initializer>IPL_BORDER_REFLECT_101</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcaba119fb22eda11675d2e00426d334a1a81" prot="public">
          <name>BORDER_REFLECT101</name>
          <initializer>BORDER_REFLECT_101</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcaba697c1b011884a7c2bdc0e5caf7955661" prot="public">
          <name>BORDER_WRAP</name>
          <initializer>IPL_BORDER_WRAP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcaba886a5eb6b466854d63f9e742d5c8eefe" prot="public">
          <name>BORDER_TRANSPARENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcabafe14c13a4ea8b8e3b3ef399013dbae01" prot="public">
          <name>BORDER_DEFAULT</name>
          <initializer>BORDER_REFLECT_101</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aa40afca20bac89db1ccab192069bfcaba4fcb77ae62e1e1336c1c2b24a441995c" prot="public">
          <name>BORDER_ISOLATED</name>
          <initializer>16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="53" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a9e8ffd0cccc9273e9334d80db2a14d15" prot="public" static="no">
        <name>@1</name>
        <enumvalue id="namespacecv_1a9e8ffd0cccc9273e9334d80db2a14d15a4a8f89a81b41dfedea54e8486aca64bd" prot="public">
          <name>KERNEL_GENERAL</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a9e8ffd0cccc9273e9334d80db2a14d15a4b518662ac9e192d941fe3a714eb5e01" prot="public">
          <name>KERNEL_SYMMETRICAL</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a9e8ffd0cccc9273e9334d80db2a14d15ac1550d3aa81ed7603c7b8108db71fab7" prot="public">
          <name>KERNEL_ASYMMETRICAL</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a9e8ffd0cccc9273e9334d80db2a14d15a39068536a687b7f7f0c242850484fb81" prot="public">
          <name>KERNEL_SMOOTH</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a9e8ffd0cccc9273e9334d80db2a14d15ac9ca87d7ff4e043c8c07b4a49750eafb" prot="public">
          <name>KERNEL_INTEGER</name>
          <initializer>8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="149" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="149" bodyend="150"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a399140175919325d93e19dc058339ec8" prot="public" static="no">
        <name>@2</name>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8aa3783a21b429f4c31c178264a0403fcd" prot="public">
          <name>MORPH_ERODE</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8a2b9f6b6fb168b4d1d5277caebfe7b73d" prot="public">
          <name>MORPH_DILATE</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8a08d3cc3a2ace00cec488966d31fa29ea" prot="public">
          <name>MORPH_OPEN</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8a68c4b9c6144a30bcd52d1cdf39bb30e1" prot="public">
          <name>MORPH_CLOSE</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8a887efd64e82cee95a62f851c7f3b617b" prot="public">
          <name>MORPH_GRADIENT</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8ada67be24f4dce6d7e6c57527f8724f3b" prot="public">
          <name>MORPH_TOPHAT</name>
          <initializer>5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a399140175919325d93e19dc058339ec8a24d27f56df6b98b1cb92ae8108d4638f" prot="public">
          <name>MORPH_BLACKHAT</name>
          <initializer>6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="203" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="203" bodyend="204"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a4bb30260c91cf16302d400008c824416" prot="public" static="no">
        <name>@3</name>
        <enumvalue id="namespacecv_1a4bb30260c91cf16302d400008c824416a260c4cbde19a749726763c01a074c60f" prot="public">
          <name>MORPH_RECT</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a4bb30260c91cf16302d400008c824416a318435753d0b9f7faa241a658ec2e191" prot="public">
          <name>MORPH_CROSS</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a4bb30260c91cf16302d400008c824416a33a3c67a61f349d21c507d05c53a755f" prot="public">
          <name>MORPH_ELLIPSE</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="218" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a393fbd89880a50a6b584eaa2f646088a" prot="public" static="no">
        <name>@4</name>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aaa5521d8e080972c762467c45f3b70e6c" prot="public">
          <name>INTER_NEAREST</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aac97d8e4880d8b5d509e96825c7522deb" prot="public">
          <name>INTER_LINEAR</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aa55e404e7fa9684af79fe9827f36a5dc1" prot="public">
          <name>INTER_CUBIC</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aacf959dca2480cc694ca016b81b442ceb" prot="public">
          <name>INTER_AREA</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aac6c578caa97f2d00f82bac879cf3c781" prot="public">
          <name>INTER_LANCZOS4</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aa49bb9f818707a31ae1f19158b60f7112" prot="public">
          <name>INTER_MAX</name>
          <initializer>7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a393fbd89880a50a6b584eaa2f646088aaa48be1c433186c4eae1ea86aa0ca75ba" prot="public">
          <name>WARP_INVERSE_MAP</name>
          <initializer>16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="323" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="323" bodyend="324"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7b" prot="public" static="no">
        <name>@5</name>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7ba147222a96556ebc1d948b372bcd7ac59" prot="public">
          <name>THRESH_BINARY</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7ba19120b1a11d8067576cc24f4d2f03754" prot="public">
          <name>THRESH_BINARY_INV</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7bac7e89a5e95490116e7d2082b3096b2b8" prot="public">
          <name>THRESH_TRUNC</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7ba0e50a338a4b711a8c48f06a6b105dd98" prot="public">
          <name>THRESH_TOZERO</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7ba47518a30aae90d799035bdcf0bb39a50" prot="public">
          <name>THRESH_TOZERO_INV</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7ba8e723ef461a5349c391032aee325fe15" prot="public">
          <name>THRESH_MASK</name>
          <initializer>7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ae47e362ab6bd9ea60b7c0c75495e8f7ba95251923e8e22f368ffa86ba8bce87ff" prot="public">
          <name>THRESH_OTSU</name>
          <initializer>8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="382" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="382" bodyend="383"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a234057c65114861f52a325c0aa192add" prot="public" static="no">
        <name>@6</name>
        <enumvalue id="namespacecv_1a234057c65114861f52a325c0aa192addad0c5199ae8637a6b195062fea4789fa9" prot="public">
          <name>ADAPTIVE_THRESH_MEAN_C</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a234057c65114861f52a325c0aa192addaf262a01e7a3f112bbab4e8d8e28182dd" prot="public">
          <name>ADAPTIVE_THRESH_GAUSSIAN_C</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="387" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a8e6ef4dc51f3daf2c6820f5ecf486ada" prot="public" static="no">
        <name>@7</name>
        <enumvalue id="namespacecv_1a8e6ef4dc51f3daf2c6820f5ecf486adaa9d4430ac75199af0cf6fcdefba30eafe" prot="public">
          <name>OPTFLOW_USE_INITIAL_FLOW</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a8e6ef4dc51f3daf2c6820f5ecf486adaa4ffe37adbc548e44a61025a26a1914aa" prot="public">
          <name>OPTFLOW_FARNEBACK_GAUSSIAN</name>
          <initializer>256</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="409" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a57c3ce2761bd260d51666aa5c654307e" prot="public" static="no">
        <name>@8</name>
        <enumvalue id="namespacecv_1a57c3ce2761bd260d51666aa5c654307ea889f1ce109543e8aed80a7abbc6dcb39" prot="public">
          <name>GC_BGD</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a57c3ce2761bd260d51666aa5c654307ea4757c1f0587bcf6e53e86dee7689a649" prot="public">
          <name>GC_FGD</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a57c3ce2761bd260d51666aa5c654307eaf748414821c7f39fab3493f9eed1eedf" prot="public">
          <name>GC_PR_BGD</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a57c3ce2761bd260d51666aa5c654307ead33184b73cb87e08d29e0a3411b7c863" prot="public">
          <name>GC_PR_FGD</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="459" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="459" bodyend="463"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a6ee0c8b1037e61bf7dae1de53b56b4dc" prot="public" static="no">
        <name>@9</name>
        <enumvalue id="namespacecv_1a6ee0c8b1037e61bf7dae1de53b56b4dca5f8853c1e5a89c4aa2687d1f78a7e550" prot="public">
          <name>GC_INIT_WITH_RECT</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a6ee0c8b1037e61bf7dae1de53b56b4dcab01527c7effb50fd1c54d8c4e671ed22" prot="public">
          <name>GC_INIT_WITH_MASK</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a6ee0c8b1037e61bf7dae1de53b56b4dcaef3752e3c27c4af9445d0b5590b6aa05" prot="public">
          <name>GC_EVAL</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="465" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="465" bodyend="468"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1ad0875f35f31450060178e498b588c52f" prot="public" static="no">
        <name>@10</name>
        <enumvalue id="namespacecv_1ad0875f35f31450060178e498b588c52fa05e763003a805e6c11c673a9f4ba7d07" prot="public">
          <name>INPAINT_NS</name>
          <initializer>CV_INPAINT_NS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1ad0875f35f31450060178e498b588c52fa892824c38e258feb5e72f308a358d52e" prot="public">
          <name>INPAINT_TELEA</name>
          <initializer>CV_INPAINT_TELEA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="474" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="474" bodyend="474"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a927f02f8283bd769025f8b9be4f9b41e" prot="public" static="no">
        <name>@11</name>
        <enumvalue id="namespacecv_1a927f02f8283bd769025f8b9be4f9b41ea8aafb7a6a87df91c7624d44f4b092fe3" prot="public">
          <name>FLOODFILL_FIXED_RANGE</name>
          <initializer> 1 &lt;&lt; 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a927f02f8283bd769025f8b9be4f9b41ea7161dca1d0b9e84e5208c7e8021b4d3a" prot="public">
          <name>FLOODFILL_MASK_ONLY</name>
          <initializer> 1 &lt;&lt; 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="485" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="485" bodyend="486"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a98805470352da81c3dcec8b307852a7c" prot="public" static="no">
        <name>@12</name>
        <enumvalue id="namespacecv_1a98805470352da81c3dcec8b307852a7cab65c042ed62c9e9e095a1e7e41fe2773" prot="public">
          <name>TM_SQDIFF</name>
          <initializer>CV_TM_SQDIFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a98805470352da81c3dcec8b307852a7ca5382c8f9df87e87cf1e9f9927dc3bc31" prot="public">
          <name>TM_SQDIFF_NORMED</name>
          <initializer>CV_TM_SQDIFF_NORMED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a98805470352da81c3dcec8b307852a7ca5be00b45a4d99b5e42625b4400bfde65" prot="public">
          <name>TM_CCORR</name>
          <initializer>CV_TM_CCORR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a98805470352da81c3dcec8b307852a7caf9c3ab9296f597ea71f056399a5831da" prot="public">
          <name>TM_CCORR_NORMED</name>
          <initializer>CV_TM_CCORR_NORMED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a98805470352da81c3dcec8b307852a7cac5babb7dfda59544e3e31ea928f8cb16" prot="public">
          <name>TM_CCOEFF</name>
          <initializer>CV_TM_CCOEFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a98805470352da81c3dcec8b307852a7cac6677e2af5e0fae82cc5339bfaef5038" prot="public">
          <name>TM_CCOEFF_NORMED</name>
          <initializer>CV_TM_CCOEFF_NORMED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="518" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="518" bodyend="520"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a0f034a173676a89dfa47eda1ec83dc34" prot="public" static="no">
        <name>@13</name>
        <enumvalue id="namespacecv_1a0f034a173676a89dfa47eda1ec83dc34aa7adc6d6608609fd84650f71b954b981" prot="public">
          <name>RETR_EXTERNAL</name>
          <initializer>CV_RETR_EXTERNAL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0f034a173676a89dfa47eda1ec83dc34a48b9c2cb1056f775ae50bb68288b875e" prot="public">
          <name>RETR_LIST</name>
          <initializer>CV_RETR_LIST</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0f034a173676a89dfa47eda1ec83dc34a7d1d4b509fb2a9a8dc2f960357748752" prot="public">
          <name>RETR_CCOMP</name>
          <initializer>CV_RETR_CCOMP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0f034a173676a89dfa47eda1ec83dc34ab10df56aed56c89a026580adc9431f58" prot="public">
          <name>RETR_TREE</name>
          <initializer>CV_RETR_TREE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="524" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="524" bodyend="525"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1abdab02e31fd5188960403458083ef6d3" prot="public" static="no">
        <name>@14</name>
        <enumvalue id="namespacecv_1abdab02e31fd5188960403458083ef6d3af7d9a3582d021d5dadcb0e37201a62f8" prot="public">
          <name>CHAIN_APPROX_NONE</name>
          <initializer>CV_CHAIN_APPROX_NONE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1abdab02e31fd5188960403458083ef6d3a5f2883048e654999209f88ba04c302f5" prot="public">
          <name>CHAIN_APPROX_SIMPLE</name>
          <initializer>CV_CHAIN_APPROX_SIMPLE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1abdab02e31fd5188960403458083ef6d3ad29171855734b1cf69fb6653c5d1db35" prot="public">
          <name>CHAIN_APPROX_TC89_L1</name>
          <initializer>CV_CHAIN_APPROX_TC89_L1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1abdab02e31fd5188960403458083ef6d3a867e7a9ab72c8199a60e2d595d1078a3" prot="public">
          <name>CHAIN_APPROX_TC89_KCOS</name>
          <initializer>CV_CHAIN_APPROX_TC89_KCOS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="527" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a526c1d74b622e3cbf17cd7d6580e6bdf" prot="public" static="no">
        <name>@15</name>
        <enumvalue id="namespacecv_1a526c1d74b622e3cbf17cd7d6580e6bdfae59a3f6677ddd05b96a298a6c24fcbe6" prot="public">
          <name>LMEDS</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a526c1d74b622e3cbf17cd7d6580e6bdfa724159df258a5d7e29410a6a2f4e6c87" prot="public">
          <name>RANSAC</name>
          <initializer>8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="736" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="736" bodyend="736"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a23f2c2108a66bf7d3472a1f32f85dcac" prot="public" static="no">
        <name>@16</name>
        <enumvalue id="namespacecv_1a23f2c2108a66bf7d3472a1f32f85dcaca9e296b20df217b62e581c56ad9359db5" prot="public">
          <name>CALIB_CB_ADAPTIVE_THRESH</name>
          <initializer> CV_CALIB_CB_ADAPTIVE_THRESH</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a23f2c2108a66bf7d3472a1f32f85dcacaf54c37b53d4375f95e9b1a3d9846c97a" prot="public">
          <name>CALIB_CB_NORMALIZE_IMAGE</name>
          <initializer> CV_CALIB_CB_NORMALIZE_IMAGE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a23f2c2108a66bf7d3472a1f32f85dcacaa3481a374c81f6996c3c897fcf5b9b39" prot="public">
          <name>CALIB_CB_FILTER_QUADS</name>
          <initializer> CV_CALIB_CB_FILTER_QUADS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="804" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="804" bodyend="806"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70" prot="public" static="no">
        <name>@17</name>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a6eedf3c8312d4b29edfe0a434722e2ef" prot="public">
          <name>CALIB_USE_INTRINSIC_GUESS</name>
          <initializer> CV_CALIB_USE_INTRINSIC_GUESS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a131c3576ad5c96991adea3a133b6ce65" prot="public">
          <name>CALIB_FIX_ASPECT_RATIO</name>
          <initializer> CV_CALIB_FIX_ASPECT_RATIO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a564091bdcc5ab14785f185e16430ff62" prot="public">
          <name>CALIB_FIX_PRINCIPAL_POINT</name>
          <initializer> CV_CALIB_FIX_PRINCIPAL_POINT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a769b5792d4e9c4ae073eaf317aec73ef" prot="public">
          <name>CALIB_ZERO_TANGENT_DIST</name>
          <initializer> CV_CALIB_ZERO_TANGENT_DIST</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a72b96c0777e60eda049e938b90c03e89" prot="public">
          <name>CALIB_FIX_FOCAL_LENGTH</name>
          <initializer> CV_CALIB_FIX_FOCAL_LENGTH</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70ab4ac5ea2d2f2636ca8a384a5b717dd35" prot="public">
          <name>CALIB_FIX_K1</name>
          <initializer> CV_CALIB_FIX_K1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a78351bf220ecb6e910e446e6cac3c1d6" prot="public">
          <name>CALIB_FIX_K2</name>
          <initializer> CV_CALIB_FIX_K2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a5b447f4987f8a689cf7c618965a7a5a4" prot="public">
          <name>CALIB_FIX_K3</name>
          <initializer> CV_CALIB_FIX_K3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a51df9c05343c61ddb18324ded0fab86a" prot="public">
          <name>CALIB_FIX_INTRINSIC</name>
          <initializer> CV_CALIB_FIX_INTRINSIC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70a53709cea2e0d6129e99606fe3d27385e" prot="public">
          <name>CALIB_SAME_FOCAL_LENGTH</name>
          <initializer> CV_CALIB_SAME_FOCAL_LENGTH</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1acd062c3b47441a8abd06c0b340f32f70ae49985db1f4453c5dda1d701a3d8dd76" prot="public">
          <name>CALIB_ZERO_DISPARITY</name>
          <initializer> CV_CALIB_ZERO_DISPARITY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="818" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="817" bodyend="832"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a7a3ffa74701a215a3d84598009d6508a" prot="public" static="no">
        <name>@18</name>
        <enumvalue id="namespacecv_1a7a3ffa74701a215a3d84598009d6508aa8ccd232f3e7691efae984c76bb99e047" prot="public">
          <name>FM_7POINT</name>
          <initializer> CV_FM_7POINT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a7a3ffa74701a215a3d84598009d6508aa3960f8c87052a64c3297704db34aaedf" prot="public">
          <name>FM_8POINT</name>
          <initializer> CV_FM_8POINT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a7a3ffa74701a215a3d84598009d6508aa8a81ff35b40a5de086bc91dbc1ef8bba" prot="public">
          <name>FM_LMEDS</name>
          <initializer> CV_FM_LMEDS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a7a3ffa74701a215a3d84598009d6508aaeb30cc6b8fc94600bc04f16c14644fdd" prot="public">
          <name>FM_RANSAC</name>
          <initializer> CV_FM_RANSAC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="886" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="885" bodyend="891"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1aebf43f737ba1660073c88419ffd882bd" prot="public" static="no">
        <name>@25</name>
        <enumvalue id="namespacecv_1aebf43f737ba1660073c88419ffd882bdaae866dad5f28d95c6849ab089d29a7c2" prot="public">
          <name>MAGIC_MASK</name>
          <initializer>0xFFFF0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aebf43f737ba1660073c88419ffd882bdacdf6078de739c1e49ec21f27f01836ee" prot="public">
          <name>TYPE_MASK</name>
          <initializer>0x00000FFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1aebf43f737ba1660073c88419ffd882bdaeff805d7e95884dcd6f0bc7184a67739" prot="public">
          <name>DEPTH_MASK</name>
          <initializer>7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="730" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="730" bodyend="730"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459" prot="public" static="no">
        <name>@26</name>
        <enumvalue id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459a247a3455cd64973152e17e26999dc024" prot="public">
          <name>DECOMP_LU</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459a523b676c90c7a1d2841b1267ba9ba614" prot="public">
          <name>DECOMP_SVD</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459a3fc1b148b39f0ca4ac5fc6e0f1b7198b" prot="public">
          <name>DECOMP_EIG</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459a33cf860f98004310374a81d2c01715da" prot="public">
          <name>DECOMP_CHOLESKY</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459ab086be5a080138d7db9b11dab378d845" prot="public">
          <name>DECOMP_QR</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a0c6ff1c39c61dc19f4d07682001e7459a13eaae0241295166140291223db12166" prot="public">
          <name>DECOMP_NORMAL</name>
          <initializer>16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="735" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="735" bodyend="735"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a917d5254cdf96f27867e26cac7ec468a" prot="public" static="no">
        <name>@27</name>
        <enumvalue id="namespacecv_1a917d5254cdf96f27867e26cac7ec468aad33872d928c74f8a49d1ba06d72aefc3" prot="public">
          <name>NORM_INF</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a917d5254cdf96f27867e26cac7ec468aab55c78ff204a979026c026ea19de65c9" prot="public">
          <name>NORM_L1</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a917d5254cdf96f27867e26cac7ec468aa7bacbe84d400336a8f26297d8e80e3a2" prot="public">
          <name>NORM_L2</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a917d5254cdf96f27867e26cac7ec468aaaabf1ea549554e2cbdfde2acfcfc5374" prot="public">
          <name>NORM_TYPE_MASK</name>
          <initializer>7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a917d5254cdf96f27867e26cac7ec468aa0a85f9203dcdf3fbc1cca589b6f5df39" prot="public">
          <name>NORM_RELATIVE</name>
          <initializer>8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a917d5254cdf96f27867e26cac7ec468aa9f0c1c342a18114d47b516a88e29822e" prot="public">
          <name>NORM_MINMAX</name>
          <initializer>32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="736" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="736" bodyend="736"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6e" prot="public" static="no">
        <name>@28</name>
        <enumvalue id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6ea878fbe5d23e277c3d87128a8844e639d" prot="public">
          <name>CMP_EQ</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6eada5167eceeaca5a3dc9d7f6a96255827" prot="public">
          <name>CMP_GT</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6ea0dd1b1a6fa443343f44aef8c52942625" prot="public">
          <name>CMP_GE</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6ea5a747de43c04d59b6e51a2959a8af105" prot="public">
          <name>CMP_LT</name>
          <initializer>3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6ea45cc5be6c7f35292542aa7c00ce4cf1c" prot="public">
          <name>CMP_LE</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1adf64e2cea27f6cf43c024e29b0c34d6ea7997997a104b827c918884b6c5ee0e59" prot="public">
          <name>CMP_NE</name>
          <initializer>5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="737" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a2905c8129dfdf3771c74ec0ebe07a144" prot="public" static="no">
        <name>@29</name>
        <enumvalue id="namespacecv_1a2905c8129dfdf3771c74ec0ebe07a144a04b6ef29f9ae9332d139828ffc7c1f39" prot="public">
          <name>GEMM_1_T</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a2905c8129dfdf3771c74ec0ebe07a144a188bdf58e57b4b8f0685451ba15cdd2d" prot="public">
          <name>GEMM_2_T</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a2905c8129dfdf3771c74ec0ebe07a144a6ba75d49e23663b42c4cc5dcd1cc5752" prot="public">
          <name>GEMM_3_T</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="738" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="738" bodyend="738"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a35687927581296aa48d7d43749a1ba49" prot="public" static="no">
        <name>@30</name>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a4e01d7e91cae1dbb68a26767d7b636be" prot="public">
          <name>DFT_INVERSE</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a74746fb171aa4bfc08ace28d73f52375" prot="public">
          <name>DFT_SCALE</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a1744dc1cf1249944bc841e78c1565b7f" prot="public">
          <name>DFT_ROWS</name>
          <initializer>4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a07b45079b38d60e7837dfb666a55299b" prot="public">
          <name>DFT_COMPLEX_OUTPUT</name>
          <initializer>16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a28347c7846e5eaed83e019cd003e8e03" prot="public">
          <name>DFT_REAL_OUTPUT</name>
          <initializer>32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a7d18108cbce9d52e6496633c713587da" prot="public">
          <name>DCT_INVERSE</name>
          <initializer> DFT_INVERSE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a35687927581296aa48d7d43749a1ba49a49bc8de8aedbe7fabb8960445133e494" prot="public">
          <name>DCT_ROWS</name>
          <initializer>DFT_ROWS</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="739" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="739" bodyend="740"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1abdc66fad88be8548f500d0bd5fbc2fa8" prot="public" static="no">
        <name>@31</name>
        <enumvalue id="namespacecv_1abdc66fad88be8548f500d0bd5fbc2fa8adfa80a38dfc0aef0de888c3164f33faf" prot="public">
          <name>KMEANS_RANDOM_CENTERS</name>
          <initializer>0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1abdc66fad88be8548f500d0bd5fbc2fa8a78ddd00a99cd51db10ed63c024eb1e62" prot="public">
          <name>KMEANS_PP_CENTERS</name>
          <initializer>2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1abdc66fad88be8548f500d0bd5fbc2fa8a40625baa3d28c780813f9634b960b366" prot="public">
          <name>KMEANS_USE_INITIAL_LABELS</name>
          <initializer>1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1237" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1237" bodyend="1237"/>
      </memberdef>
      <memberdef kind="enum" id="namespacecv_1a65d96673c965d12c31233999123d1215" prot="public" static="no">
        <name>@32</name>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215afff8b973668df2e4028dddc5274310c9" prot="public">
          <name>FONT_HERSHEY_SIMPLEX</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215a08cf3b0a37729fbb62a3007d499cbd8b" prot="public">
          <name>FONT_HERSHEY_PLAIN</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215ab307bdc73fdd06074acad940115bda7a" prot="public">
          <name>FONT_HERSHEY_DUPLEX</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215af7b1b25521fc9b5731a97cfd13460c2a" prot="public">
          <name>FONT_HERSHEY_COMPLEX</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215a2880034c653349b7f9fcc2bb60342fc6" prot="public">
          <name>FONT_HERSHEY_TRIPLEX</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215adfd28fc57520df956e00c7a26fb718ed" prot="public">
          <name>FONT_HERSHEY_COMPLEX_SMALL</name>
          <initializer> 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215a58de14ee43572b502c8cb71f788e9fdc" prot="public">
          <name>FONT_HERSHEY_SCRIPT_SIMPLEX</name>
          <initializer> 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215a8e7f6a22d4aec98c59375649eee1c696" prot="public">
          <name>FONT_HERSHEY_SCRIPT_COMPLEX</name>
          <initializer> 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacecv_1a65d96673c965d12c31233999123d1215af0f7c8824fe42205076771a7b67661c2" prot="public">
          <name>FONT_ITALIC</name>
          <initializer> 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1308" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1307" bodyend="1318"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacecv_1a1f6634802eeadfd7245bc75cf3e216c2" prot="public" static="no">
        <type>std::string</type>
        <definition>typedef std::string cv::String</definition>
        <argsstring></argsstring>
        <name>String</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="74" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a563111b3c46f1242cae9541b70c3436c" prot="public" static="no">
        <type>std::basic_string&lt; wchar_t &gt;</type>
        <definition>typedef std::basic_string&lt;wchar_t&gt; cv::WString</definition>
        <argsstring></argsstring>
        <name>WString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="75" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a595458e63aa1443ddd5c51fa71d70e2a" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref>, 2 &gt;</type>
        <definition>typedef Vec&lt;uchar, 2&gt; cv::Vec2b</definition>
        <argsstring></argsstring>
        <name>Vec2b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="244" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a7e6060c0b8d48459964df6e1eb524c03" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref>, 3 &gt;</type>
        <definition>typedef Vec&lt;uchar, 3&gt; cv::Vec3b</definition>
        <argsstring></argsstring>
        <name>Vec3b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="245" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ac8e7c61fdf0d8d9f6e8be7c25dc36584" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref>, 4 &gt;</type>
        <definition>typedef Vec&lt;uchar, 4&gt; cv::Vec4b</definition>
        <argsstring></argsstring>
        <name>Vec4b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="246" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a8c8616b035cf33c4b2b02fd7b89d6335" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; short, 2 &gt;</type>
        <definition>typedef Vec&lt;short, 2&gt; cv::Vec2s</definition>
        <argsstring></argsstring>
        <name>Vec2s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="248" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a2a2f4663171710b47944de9a74383dd0" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; short, 3 &gt;</type>
        <definition>typedef Vec&lt;short, 3&gt; cv::Vec3s</definition>
        <argsstring></argsstring>
        <name>Vec3s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="249" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a40acb05e3e183aabebc77a235389b582" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; short, 4 &gt;</type>
        <definition>typedef Vec&lt;short, 4&gt; cv::Vec4s</definition>
        <argsstring></argsstring>
        <name>Vec4s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="250" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a622811ee01673a858f41b4fbfd4b1043" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; <ref refid="cxtypes_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref>, 2 &gt;</type>
        <definition>typedef Vec&lt;ushort, 2&gt; cv::Vec2w</definition>
        <argsstring></argsstring>
        <name>Vec2w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="252" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ac2ca2e7d93b15bc56b379fd5c42c0932" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; <ref refid="cxtypes_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref>, 3 &gt;</type>
        <definition>typedef Vec&lt;ushort, 3&gt; cv::Vec3w</definition>
        <argsstring></argsstring>
        <name>Vec3w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="253" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a50f51484537d86bd43ff14c681ee3abd" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; <ref refid="cxtypes_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref>, 4 &gt;</type>
        <definition>typedef Vec&lt;ushort, 4&gt; cv::Vec4w</definition>
        <argsstring></argsstring>
        <name>Vec4w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="254" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a121402b88177c336b18945dd71d96ae0" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; int, 2 &gt;</type>
        <definition>typedef Vec&lt;int, 2&gt; cv::Vec2i</definition>
        <argsstring></argsstring>
        <name>Vec2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="256" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a55864bca2bbede9731df5baa0d1be763" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; int, 3 &gt;</type>
        <definition>typedef Vec&lt;int, 3&gt; cv::Vec3i</definition>
        <argsstring></argsstring>
        <name>Vec3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="257" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a94ce799099ae6cdd66685e3fd0cad7d7" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; int, 4 &gt;</type>
        <definition>typedef Vec&lt;int, 4&gt; cv::Vec4i</definition>
        <argsstring></argsstring>
        <name>Vec4i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="258" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a392bb4f8a6b9e0dde07f31dc28e73319" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; float, 2 &gt;</type>
        <definition>typedef Vec&lt;float, 2&gt; cv::Vec2f</definition>
        <argsstring></argsstring>
        <name>Vec2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="260" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ab9e0ab642a3e01742916763173b72232" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; float, 3 &gt;</type>
        <definition>typedef Vec&lt;float, 3&gt; cv::Vec3f</definition>
        <argsstring></argsstring>
        <name>Vec3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="261" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a4f29b2178d21a471ee688b14d66d6567" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; float, 4 &gt;</type>
        <definition>typedef Vec&lt;float, 4&gt; cv::Vec4f</definition>
        <argsstring></argsstring>
        <name>Vec4f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="262" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a74b819dd94c6a8c6f3d8cc39aeaa4992" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; float, 6 &gt;</type>
        <definition>typedef Vec&lt;float, 6&gt; cv::Vec6f</definition>
        <argsstring></argsstring>
        <name>Vec6f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="263" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1af20d857c2077c986d3b303e3d58bbc54" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; double, 2 &gt;</type>
        <definition>typedef Vec&lt;double, 2&gt; cv::Vec2d</definition>
        <argsstring></argsstring>
        <name>Vec2d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="265" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a370d94209693b5b13437ab4991cabf73" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; double, 3 &gt;</type>
        <definition>typedef Vec&lt;double, 3&gt; cv::Vec3d</definition>
        <argsstring></argsstring>
        <name>Vec3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="266" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a41502c424d368098331a348dc26141bf" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; double, 4 &gt;</type>
        <definition>typedef Vec&lt;double, 4&gt; cv::Vec4d</definition>
        <argsstring></argsstring>
        <name>Vec4d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="267" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a07a801beb07134f7090e3d789ca7c324" prot="public" static="no">
        <type><ref refid="classcv_1_1_vec" kindref="compound">Vec</ref>&lt; double, 6 &gt;</type>
        <definition>typedef Vec&lt;double, 6&gt; cv::Vec6d</definition>
        <argsstring></argsstring>
        <name>Vec6d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="268" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1aab0325d447419758daf5de162ffb051f" prot="public" static="no">
        <type><ref refid="classcv_1_1_complex" kindref="compound">Complex</ref>&lt; float &gt;</type>
        <definition>typedef Complex&lt;float&gt; cv::Complexf</definition>
        <argsstring></argsstring>
        <name>Complexf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="285" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a3a5d93a0cbc1d360dbd3abf218bbb4ae" prot="public" static="no">
        <type><ref refid="classcv_1_1_complex" kindref="compound">Complex</ref>&lt; double &gt;</type>
        <definition>typedef Complex&lt;double&gt; cv::Complexd</definition>
        <argsstring></argsstring>
        <name>Complexd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="286" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a0f70b52f0c0b119f7ed2448ffebdc144" prot="public" static="no">
        <type><ref refid="classcv_1_1_point__" kindref="compound">Point_</ref>&lt; int &gt;</type>
        <definition>typedef Point_&lt;int&gt; cv::Point2i</definition>
        <argsstring></argsstring>
        <name>Point2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="392" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a1e83eafb2d26b3c93f09e8338bcab192" prot="public" static="no">
        <type><ref refid="classcv_1_1_point__" kindref="compound">Point2i</ref></type>
        <definition>typedef Point2i cv::Point</definition>
        <argsstring></argsstring>
        <name>Point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="393" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a5ef7f5978948e0cb3c3a3d4172594aec" prot="public" static="no">
        <type><ref refid="classcv_1_1_size__" kindref="compound">Size_</ref>&lt; int &gt;</type>
        <definition>typedef Size_&lt;int&gt; cv::Size2i</definition>
        <argsstring></argsstring>
        <name>Size2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="394" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a346f563897249351a34549137c8532a0" prot="public" static="no">
        <type><ref refid="classcv_1_1_size__" kindref="compound">Size2i</ref></type>
        <definition>typedef Size2i cv::Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents a two dimensional size as a pair of integer values. <simplesect kind="see"><para><ref refid="classcv_1_1_size__" kindref="compound">Size_</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="399" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a954f5c2ab7c3f0f5d4eed444cdabf038" prot="public" static="no">
        <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect_</ref>&lt; int &gt;</type>
        <definition>typedef Rect_&lt;int&gt; cv::Rect</definition>
        <argsstring></argsstring>
        <name>Rect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="400" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a7d080aa40de011e4410bca63385ffe2a" prot="public" static="no">
        <type><ref refid="classcv_1_1_point__" kindref="compound">Point_</ref>&lt; float &gt;</type>
        <definition>typedef Point_&lt;float&gt; cv::Point2f</definition>
        <argsstring></argsstring>
        <name>Point2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="401" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a32986d8c6fd05949688352abd112509f" prot="public" static="no">
        <type><ref refid="classcv_1_1_point__" kindref="compound">Point_</ref>&lt; double &gt;</type>
        <definition>typedef Point_&lt;double&gt; cv::Point2d</definition>
        <argsstring></argsstring>
        <name>Point2d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="402" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ab34496d2466b5f69930ab74c70f117d4" prot="public" static="no">
        <type><ref refid="classcv_1_1_size__" kindref="compound">Size_</ref>&lt; float &gt;</type>
        <definition>typedef Size_&lt;float&gt; cv::Size2f</definition>
        <argsstring></argsstring>
        <name>Size2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="403" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ac4ae8f2fb37ecb4b5d9268f17e46a18e" prot="public" static="no">
        <type><ref refid="classcv_1_1_point3__" kindref="compound">Point3_</ref>&lt; int &gt;</type>
        <definition>typedef Point3_&lt;int&gt; cv::Point3i</definition>
        <argsstring></argsstring>
        <name>Point3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="404" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a3d79ceeb4419bccd0308dfdf1cd31435" prot="public" static="no">
        <type><ref refid="classcv_1_1_point3__" kindref="compound">Point3_</ref>&lt; float &gt;</type>
        <definition>typedef Point3_&lt;float&gt; cv::Point3f</definition>
        <argsstring></argsstring>
        <name>Point3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="405" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a17f8af95b76535bd387f4909850c8810" prot="public" static="no">
        <type><ref refid="classcv_1_1_point3__" kindref="compound">Point3_</ref>&lt; double &gt;</type>
        <definition>typedef Point3_&lt;double&gt; cv::Point3d</definition>
        <argsstring></argsstring>
        <name>Point3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="406" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a599fe92e910c027be274233eccad7beb" prot="public" static="no">
        <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar_</ref>&lt; double &gt;</type>
        <definition>typedef Scalar_&lt;double&gt; cv::Scalar</definition>
        <argsstring></argsstring>
        <name>Scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="440" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a3a82d9b17055aebfd78f88a64827d894" prot="public" static="no">
        <type><ref refid="namespacecv_1ae051c7d3b8b161c3d91bb34a05be5333" kindref="member">MatExpr_Base_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>typedef MatExpr_Base_&lt;Mat&gt; cv::MatExpr_Base</definition>
        <argsstring></argsstring>
        <name>MatExpr_Base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="707" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a15c6f18d0d0a4a1f6622c6c063453042" prot="public" static="no">
        <type>MatExpr_&lt; MatExpr_Op4_&lt; <ref refid="classcv_1_1_size__" kindref="compound">Size</ref>, int, <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>, int, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>, <ref refid="namespacecv_1a5778a2a8b109fba1d0ca888b2a23e893" kindref="member">MatOp_Set_</ref>&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &gt;, <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt;</type>
        <definition>typedef MatExpr_&lt;MatExpr_Op4_&lt;Size, int, Scalar, int, Mat, MatOp_Set_&lt;Mat&gt; &gt;, Mat&gt; cv::MatExpr_Initializer</definition>
        <argsstring></argsstring>
        <name>MatExpr_Initializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="725" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a1d355af1bc5c7241588bdb3600951515" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> &gt;</type>
        <definition>typedef Mat_&lt;uchar&gt; cv::Mat1b</definition>
        <argsstring></argsstring>
        <name>Mat1b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1441" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1af7e98a9c920ba16ba08b99bb53c52224" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2b</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec2b&gt; cv::Mat2b</definition>
        <argsstring></argsstring>
        <name>Mat2b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1442" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a7198dbdcacbcde70f7c7d1209d57146a" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3b</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec3b&gt; cv::Mat3b</definition>
        <argsstring></argsstring>
        <name>Mat3b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1443" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a38bd307d9a0cac4c335e648ef8b63a3e" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4b</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec4b&gt; cv::Mat4b</definition>
        <argsstring></argsstring>
        <name>Mat4b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1444" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a0c456856506ff905ce035acec092ef9f" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; short &gt;</type>
        <definition>typedef Mat_&lt;short&gt; cv::Mat1s</definition>
        <argsstring></argsstring>
        <name>Mat1s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1446" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1af945be4c317df201188e50e578e1fa75" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2s</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec2s&gt; cv::Mat2s</definition>
        <argsstring></argsstring>
        <name>Mat2s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1447" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a4c3cec2bb940613dec561e59b0948801" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3s</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec3s&gt; cv::Mat3s</definition>
        <argsstring></argsstring>
        <name>Mat3s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1448" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a7de7f3b26b41d7326e85ab2e5d9eb1c4" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4s</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec4s&gt; cv::Mat4s</definition>
        <argsstring></argsstring>
        <name>Mat4s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1449" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a4895c2ba170884f13b4a1b1c80fea8ff" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="cxtypes_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref> &gt;</type>
        <definition>typedef Mat_&lt;ushort&gt; cv::Mat1w</definition>
        <argsstring></argsstring>
        <name>Mat1w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1451" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1aeb96ec2e3fd29bc27da746681e692b60" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2w</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec2w&gt; cv::Mat2w</definition>
        <argsstring></argsstring>
        <name>Mat2w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1452" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a5574e954e5acfdb4e1e03e1dbd8bab6a" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3w</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec3w&gt; cv::Mat3w</definition>
        <argsstring></argsstring>
        <name>Mat3w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1453" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a66c490bf66285c5cb0b5a21696d0cd03" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4w</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec4w&gt; cv::Mat4w</definition>
        <argsstring></argsstring>
        <name>Mat4w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1454" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a87332e283de569e7bb029d4f4b401dcc" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; int &gt;</type>
        <definition>typedef Mat_&lt;int&gt; cv::Mat1i</definition>
        <argsstring></argsstring>
        <name>Mat1i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1456" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a1ee6db17208ebd8bef5749d81267bf17" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2i</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec2i&gt; cv::Mat2i</definition>
        <argsstring></argsstring>
        <name>Mat2i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1457" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a89d566f26821c717c666d31bcfc6bf35" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3i</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec3i&gt; cv::Mat3i</definition>
        <argsstring></argsstring>
        <name>Mat3i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1458" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a8895fd82b424209f63bf9713fd5259a2" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4i</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec4i&gt; cv::Mat4i</definition>
        <argsstring></argsstring>
        <name>Mat4i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1459" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a9747ac59f97cbb93ddd719c4fb3e2d5d" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; float &gt;</type>
        <definition>typedef Mat_&lt;float&gt; cv::Mat1f</definition>
        <argsstring></argsstring>
        <name>Mat1f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1461" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a5d6e8769d5f6a8b21eb59137e643f095" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2f</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec2f&gt; cv::Mat2f</definition>
        <argsstring></argsstring>
        <name>Mat2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1462" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a8ee031423ba0ecb65fef2bc40abd970e" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3f</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec3f&gt; cv::Mat3f</definition>
        <argsstring></argsstring>
        <name>Mat3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1463" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a781cc98063ecb8e02e3576140714842f" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4f</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec4f&gt; cv::Mat4f</definition>
        <argsstring></argsstring>
        <name>Mat4f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1464" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a8dc8a9e248a8885bb3c61d35f07b61ed" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; double &gt;</type>
        <definition>typedef Mat_&lt;double&gt; cv::Mat1d</definition>
        <argsstring></argsstring>
        <name>Mat1d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1466" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a04278ad1d5a287e15c07239d6119fe0a" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2d</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec2d&gt; cv::Mat2d</definition>
        <argsstring></argsstring>
        <name>Mat2d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1467" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1af14b1aa52fc952072c0b653f916ffac8" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3d</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec3d&gt; cv::Mat3d</definition>
        <argsstring></argsstring>
        <name>Mat3d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1468" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ab7781ee46e4a6148e037be23217201dc" prot="public" static="no">
        <type><ref refid="classcv_1_1_mat__" kindref="compound">Mat_</ref>&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4d</ref> &gt;</type>
        <definition>typedef Mat_&lt;Vec4d&gt; cv::Mat4d</definition>
        <argsstring></argsstring>
        <name>Mat4d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1469" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1a178118cdbb19b708b986d0db39cd284c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* cv::ConvertData)(const void *from, void *to, int cn)</definition>
        <argsstring>)(const void *from, void *to, int cn)</argsstring>
        <name>ConvertData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1789" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1ab317e9c58ba1be9f7613e021606b1ba8" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* cv::ConvertScaleData)(const void *from, void *to, int cn, double alpha, double beta)</definition>
        <argsstring>)(const void *from, void *to, int cn, double alpha, double beta)</argsstring>
        <name>ConvertScaleData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1790" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacecv_1addc0d7042a479360085ed66ce96e7302" prot="public" static="no">
        <type><ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="struct_cv_mem_storage" kindref="compound">CvMemStorage</ref> &gt;</type>
        <definition>typedef Ptr&lt;CvMemStorage&gt; cv::MemStorage</definition>
        <argsstring></argsstring>
        <name>MemStorage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="2329" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="2327" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacecv_1a6e9ed140cef92654a1f359369fd9a98a" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::Size_</definition>
        <argsstring></argsstring>
        <name>Size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="70" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a8da6a2e2bab2f922ddf39627ef620285" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::Point_</definition>
        <argsstring></argsstring>
        <name>Point_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="71" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1ab685f8980efaab9608d2d6b23542d3e8" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::Rect_</definition>
        <argsstring></argsstring>
        <name>Rect_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="72" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1ae051c7d3b8b161c3d91bb34a05be5333" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatExpr_Base_</definition>
        <argsstring></argsstring>
        <name>MatExpr_Base_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="706" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a4e317b7fcf701e6c834e0f68fb845c7b" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_DivRS_</definition>
        <argsstring></argsstring>
        <name>MatOp_DivRS_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="716" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a10f88824e47afee16e4ee9ae4dc239f4" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_Inv_</definition>
        <argsstring></argsstring>
        <name>MatOp_Inv_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="717" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1aa84c1d1ae9cf2476d71a1e085fe9e081" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_MulDiv_</definition>
        <argsstring></argsstring>
        <name>MatOp_MulDiv_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="718" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a131bc921e9db4dc98469904fdfb424c1" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_Repeat_</definition>
        <argsstring></argsstring>
        <name>MatOp_Repeat_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="719" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a5778a2a8b109fba1d0ca888b2a23e893" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_Set_</definition>
        <argsstring></argsstring>
        <name>MatOp_Set_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="720" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a838d1cf4bd3d04a0dde4fe73c61f4f85" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_Scale_</definition>
        <argsstring></argsstring>
        <name>MatOp_Scale_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="721" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a0e43134a513eec9867f199dace31c8c3" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_T_</definition>
        <argsstring></argsstring>
        <name>MatOp_T_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="722" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a93d1cde8da304aa298d5991bb6145538" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::MatOp_Iter_</definition>
        <argsstring></argsstring>
        <name>MatOp_Iter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1530" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1a9e09aa518f21325f801b2f5d23aef4d0" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::FileNode</definition>
        <argsstring></argsstring>
        <name>FileNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="2218" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="2218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacecv_1ae11c8b9761b4bc6cda8838739c865782" prot="public" static="no" mutable="no">
        <type>class CV_EXPORTS</type>
        <definition>class CV_EXPORTS cv::FileNodeIterator</definition>
        <argsstring></argsstring>
        <name>FileNodeIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="2252" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="2252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacecv_1a9b7db9375e9fddf72f7308d9d2c5c706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::borderInterpolate</definition>
        <argsstring>(int p, int len, int borderType)</argsstring>
        <name>borderInterpolate</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aca511a6be033cf1b32b64d9b8f9c4cce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::getKernelType</definition>
        <argsstring>(const Mat &amp;kernel, Point anchor)</argsstring>
        <name>getKernelType</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8a57e4b946c27b1e088ee72a29ff550d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_row_filter" kindref="compound">BaseRowFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseRowFilter&gt; cv::getLinearRowFilter</definition>
        <argsstring>(int srcType, int bufType, const Mat &amp;kernel, int anchor, int symmetryType)</argsstring>
        <name>getLinearRowFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bufType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>symmetryType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afde3c04bdd289bbe8f57d512b824adc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_column_filter" kindref="compound">BaseColumnFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseColumnFilter&gt; cv::getLinearColumnFilter</definition>
        <argsstring>(int bufType, int dstType, const Mat &amp;kernel, int anchor, int symmetryType, double delta=0, int bits=0)</argsstring>
        <name>getLinearColumnFilter</name>
        <param>
          <type>int</type>
          <declname>bufType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>symmetryType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afceb0bb400f74ab7b59bde0d5f1e0521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_filter" kindref="compound">BaseFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseFilter&gt; cv::getLinearFilter</definition>
        <argsstring>(int srcType, int dstType, const Mat &amp;kernel, Point anchor=Point(-1,-1), double delta=0, int bits=0)</argsstring>
        <name>getLinearFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af027966100026a0749d7f206c20041de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_filter_engine" kindref="compound">FilterEngine</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;FilterEngine&gt; cv::createSeparableLinearFilter</definition>
        <argsstring>(int srcType, int dstType, const Mat &amp;rowKernel, const Mat &amp;columnKernel, Point _anchor=Point(-1,-1), double delta=0, int _rowBorderType=BORDER_DEFAULT, int _columnBorderType=-1, const Scalar &amp;_borderValue=Scalar())</argsstring>
        <name>createSeparableLinearFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rowKernel</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>columnKernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>_anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_rowBorderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_columnBorderType</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>_borderValue</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="173"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abe7fc760fc4164f8cfb2b7765dccac82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_filter_engine" kindref="compound">FilterEngine</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;FilterEngine&gt; cv::createLinearFilter</definition>
        <argsstring>(int srcType, int dstType, const Mat &amp;kernel, Point _anchor=Point(-1,-1), double delta=0, int _rowBorderType=BORDER_DEFAULT, int _columnBorderType=-1, const Scalar &amp;_borderValue=Scalar())</argsstring>
        <name>createLinearFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>_anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_rowBorderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_columnBorderType</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>_borderValue</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="178"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afb90174bec23271c3459a5cf4c92365f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getGaussianKernel</definition>
        <argsstring>(int ksize, double sigma, int ktype=CV_64F)</argsstring>
        <name>getGaussianKernel</name>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ktype</declname>
          <defval>CV_64F</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a9ccf952efaacf5c241c119d832992cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_filter_engine" kindref="compound">FilterEngine</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;FilterEngine&gt; cv::createGaussianFilter</definition>
        <argsstring>(int type, Size ksize, double sigma1, double sigma2=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>createGaussianFilter</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="184"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abac1862f908ee30f59c88d8b08f94675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::getDerivKernels</definition>
        <argsstring>(Mat &amp;kx, Mat &amp;ky, int dx, int dy, int ksize, bool normalize=false, int ktype=CV_32F)</argsstring>
        <name>getDerivKernels</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kx</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>int</type>
          <declname>ktype</declname>
          <defval>CV_32F</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a12c4c5ee234d8ac34b398123eb46e407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_filter_engine" kindref="compound">FilterEngine</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;FilterEngine&gt; cv::createDerivFilter</definition>
        <argsstring>(int srcType, int dstType, int dx, int dy, int ksize, int borderType=BORDER_DEFAULT)</argsstring>
        <name>createDerivFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="191"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad2e1bf11c0b40d9667215e9e3f5f060d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_row_filter" kindref="compound">BaseRowFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseRowFilter&gt; cv::getRowSumFilter</definition>
        <argsstring>(int srcType, int sumType, int ksize, int anchor=-1)</argsstring>
        <name>getRowSumFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sumType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="194"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2e8117cdbe0191058123a18437537ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_column_filter" kindref="compound">BaseColumnFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseColumnFilter&gt; cv::getColumnSumFilter</definition>
        <argsstring>(int sumType, int dstType, int ksize, int anchor=-1, double scale=1)</argsstring>
        <name>getColumnSumFilter</name>
        <param>
          <type>int</type>
          <declname>sumType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="197"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a757fa4d50fab3dd6edef45e94d9ea00f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_filter_engine" kindref="compound">FilterEngine</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;FilterEngine&gt; cv::createBoxFilter</definition>
        <argsstring>(int srcType, int dstType, Size ksize, Point anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT)</argsstring>
        <name>createBoxFilter</name>
        <param>
          <type>int</type>
          <declname>srcType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstType</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>ksize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="201"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a67756c5008da46bf1fbbf5c6d0be1828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_row_filter" kindref="compound">BaseRowFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseRowFilter&gt; cv::getMorphologyRowFilter</definition>
        <argsstring>(int op, int type, int ksize, int anchor=-1)</argsstring>
        <name>getMorphologyRowFilter</name>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1acbda19951781b3cd0620542f42d114e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_column_filter" kindref="compound">BaseColumnFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseColumnFilter&gt; cv::getMorphologyColumnFilter</definition>
        <argsstring>(int op, int type, int ksize, int anchor=-1)</argsstring>
        <name>getMorphologyColumnFilter</name>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>anchor</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abe9f63d1cddbcb11c0b33140a0f79b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_base_filter" kindref="compound">BaseFilter</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;BaseFilter&gt; cv::getMorphologyFilter</definition>
        <argsstring>(int op, int type, const Mat &amp;kernel, Point anchor=Point(-1,-1))</argsstring>
        <name>getMorphologyFilter</name>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a94756fad83d9d24d29c9bf478558c40a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>static Scalar cv::morphologyDefaultBorderValue</definition>
        <argsstring>()</argsstring>
        <name>morphologyDefaultBorderValue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="211" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6a5d4a8e845c0a0ca61bef4548cd2e19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_ptr" kindref="compound">Ptr</ref>&lt; <ref refid="classcv_1_1_filter_engine" kindref="compound">FilterEngine</ref> &gt;</type>
        <definition>CV_EXPORTS Ptr&lt;FilterEngine&gt; cv::createMorphologyFilter</definition>
        <argsstring>(int op, int type, const Mat &amp;kernel, Point anchor=Point(-1,-1), int _rowBorderType=BORDER_CONSTANT, int _columnBorderType=-1, const Scalar &amp;_borderValue=morphologyDefaultBorderValue())</argsstring>
        <name>createMorphologyFilter</name>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_rowBorderType</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_columnBorderType</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>_borderValue</declname>
          <defval>morphologyDefaultBorderValue()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6e8c9aacc7c29dbe0450ae170864e0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getStructuringElement</definition>
        <argsstring>(int shape, Size ksize, Point anchor=Point(-1,-1))</argsstring>
        <name>getStructuringElement</name>
        <param>
          <type>int</type>
          <declname>shape</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>ksize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad1c3537fc07654089a5de3915a01fa9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::copyMakeBorder</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int top, int bottom, int left, int right, int borderType, const Scalar &amp;value=Scalar())</argsstring>
        <name>copyMakeBorder</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>top</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>left</declname>
        </param>
        <param>
          <type>int</type>
          <declname>right</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>value</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="227"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a73f5d2b1adc7da9cd5e9076b15dbcf3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::medianBlur</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ksize)</argsstring>
        <name>medianBlur</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a25f296be508dd9ffb265b3b5f06ca23b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::GaussianBlur</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, Size ksize, double sigma1, double sigma2=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>GaussianBlur</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigma2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="232"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a051d9df292ac128c0bfef7b2af59075d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bilateralFilter</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int d, double sigmaColor, double sigmaSpace, int borderType=BORDER_DEFAULT)</argsstring>
        <name>bilateralFilter</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaColor</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sigmaSpace</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5b15ddfd4babd667c4adf40aafa0df1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::boxFilter</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ddepth, Size ksize, Point anchor=Point(-1,-1), bool normalize=true, int borderType=BORDER_DEFAULT)</argsstring>
        <name>boxFilter</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ddepth</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>ksize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalize</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="239"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a26a8d936224495b10ae64d3759ff6ea4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cv::blur</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, Size ksize, Point anchor=Point(-1,-1), int borderType=BORDER_DEFAULT)</argsstring>
        <name>blur</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>ksize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="243" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5d4b04502b34025a55067b712cc40135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::filter2D</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ddepth, const Mat &amp;kernel, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>filter2D</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ddepth</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1adb27bcd599c8522dfe9341be6ea27b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::sepFilter2D</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ddepth, const Mat &amp;kernelX, const Mat &amp;kernelY, Point anchor=Point(-1,-1), double delta=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>sepFilter2D</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ddepth</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernelX</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernelY</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="254"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abcb8881170fa5008cb2a0a109400f53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::Sobel</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ddepth, int dx, int dy, int ksize=3, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>Sobel</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ddepth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae1eb35c92aa749ebbde89798caba1304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::Scharr</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ddepth, int dx, int dy, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>Scharr</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ddepth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="263"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a98c85dc3610d02e778c240340cd96485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::Laplacian</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ddepth, int ksize=1, double scale=1, double delta=0, int borderType=BORDER_DEFAULT)</argsstring>
        <name>Laplacian</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ddepth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>delta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="267"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0d9685be68236c32841de44147e98fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::Canny</definition>
        <argsstring>(const Mat &amp;image, Mat &amp;edges, double threshold1, double threshold2, int apertureSize=3, bool L2gradient=false)</argsstring>
        <name>Canny</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>edges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>apertureSize</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>L2gradient</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="271"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2028b6eaa327ef460f51e93f58dc0397" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::cornerMinEigenVal</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int blockSize, int ksize=3, int borderType=BORDER_DEFAULT)</argsstring>
        <name>cornerMinEigenVal</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="275"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a1cc8c8366178867177261a9632cc0ba9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::cornerHarris</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int blockSize, int ksize, double k, int borderType=BORDER_DEFAULT)</argsstring>
        <name>cornerHarris</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="279"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a92d8cd9801988b1178ca646a130657a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::cornerEigenValsAndVecs</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int blockSize, int ksize, int borderType=BORDER_DEFAULT)</argsstring>
        <name>cornerEigenValsAndVecs</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa062fbec510c30a24076dfef35eb68bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::preCornerDetect</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int ksize, int borderType=BORDER_DEFAULT)</argsstring>
        <name>preCornerDetect</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ksize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_DEFAULT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="286"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a26b3271d0009cfec2a46614e38c670df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::cornerSubPix</definition>
        <argsstring>(const Mat &amp;image, vector&lt; Point2f &gt; &amp;corners, Size winSize, Size zeroZone, TermCriteria criteria)</argsstring>
        <name>cornerSubPix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>corners</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>winSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>zeroZone</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref></type>
          <declname>criteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="290"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a60beac6a00f98c77dea1a4ac277ab04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::goodFeaturesToTrack</definition>
        <argsstring>(const Mat &amp;image, vector&lt; Point2f &gt; &amp;corners, int maxCorners, double qualityLevel, double minDistance, const Mat &amp;mask=Mat(), int blockSize=3, bool useHarrisDetector=false, double k=0.04)</argsstring>
        <name>goodFeaturesToTrack</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>corners</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxCorners</declname>
        </param>
        <param>
          <type>double</type>
          <declname>qualityLevel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minDistance</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>blockSize</declname>
          <defval>3</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useHarrisDetector</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>double</type>
          <declname>k</declname>
          <defval>0.04</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="295"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8d842c4e3e3af850ee8081860469d4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::HoughLines</definition>
        <argsstring>(const Mat &amp;image, vector&lt; Vec2f &gt; &amp;lines, double rho, double theta, int threshold, double srn=0, double stn=0)</argsstring>
        <name>HoughLines</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec2f</ref> &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>srn</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>stn</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="299"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a230d3a4a6aa38ce905f4f1375ca0b772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::HoughLinesP</definition>
        <argsstring>(Mat &amp;image, vector&lt; Vec4i &gt; &amp;lines, double rho, double theta, int threshold, double minLineLength=0, double maxLineGap=0)</argsstring>
        <name>HoughLinesP</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4i</ref> &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rho</declname>
        </param>
        <param>
          <type>double</type>
          <declname>theta</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minLineLength</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxLineGap</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="303"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af1099433ff568121b1399cc09d883062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::HoughCircles</definition>
        <argsstring>(const Mat &amp;image, vector&lt; Vec3f &gt; &amp;circles, int method, double dp, double minDist, double param1=100, double param2=100, int minRadius=0, int maxRadius=0)</argsstring>
        <name>HoughCircles</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3f</ref> &gt; &amp;</type>
          <declname>circles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minDist</declname>
        </param>
        <param>
          <type>double</type>
          <declname>param1</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param2</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>int</type>
          <declname>minRadius</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>maxRadius</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="308"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a500536e39dc146b1b16864e1eccfc8c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::erode</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &amp;borderValue=morphologyDefaultBorderValue())</argsstring>
        <name>erode</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>borderValue</declname>
          <defval>morphologyDefaultBorderValue()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="313"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad073ea6f169f4e1359bb3f658fb269b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::dilate</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &amp;borderValue=morphologyDefaultBorderValue())</argsstring>
        <name>dilate</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>borderValue</declname>
          <defval>morphologyDefaultBorderValue()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="317"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a21d2fb1e64e78c2007688c1499e2f8ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::morphologyEx</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int op, const Mat &amp;kernel, Point anchor=Point(-1,-1), int iterations=1, int borderType=BORDER_CONSTANT, const Scalar &amp;borderValue=morphologyDefaultBorderValue())</argsstring>
        <name>morphologyEx</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>kernel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>anchor</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>(-1,-1)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderType</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>borderValue</declname>
          <defval>morphologyDefaultBorderValue()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="321"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a499709bf0b1c163796c1a7e6bc18e7c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::resize</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, Size dsize, double fx=0, double fy=0, int interpolation=INTER_LINEAR)</argsstring>
        <name>resize</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>dsize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>fy</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>interpolation</declname>
          <defval>INTER_LINEAR</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize the source matrix and write results in the destination matrix. Unlike cvResize, this method uses an explicit <ref refid="namespacecv_1a346f563897249351a34549137c8532a0" kindref="member">Size</ref> parameter instead of using the destination ROI for the resizing information.<linebreak/>
 Also note that not all source depths are supported. Currently, the source depth must be <ref refid="group___depth_type_1ga32b18d904ee2b1731a9416a8eef67d06" kindref="member">CV_8U</ref>, <ref refid="group___depth_type_1gaf55ae5a94c48cae66b96979877576f12" kindref="member">CV_16U</ref> or <ref refid="group___depth_type_1ga4a3def5d72b74bed31f5f8ab7676099c" kindref="member">CV_32F</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>original matrix to be resized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>target matrix to write resulting image into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dsize</parametername>
</parameternamelist>
<parameterdescription>
<para>target size (if empty, fx and fy should be provided) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fx</parametername>
</parameternamelist>
<parameterdescription>
<para>width scaling factor (not used if <computeroutput>dsize</computeroutput> is not empty) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fy</parametername>
</parameternamelist>
<parameterdescription>
<para>height scaling factor (not used if <computeroutput>dsize</computeroutput> is not empty) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interpolation</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___interpolation_option" kindref="compound">InterpolationOption</ref> to use during resize (default is Bilinear). <linebreak/>
 Note that true &quot;area&quot; interpolation is only implemented for the case (fx &lt;= 1 &amp;&amp; fy &lt;= 1). In other cases it is emulated using some variant of bilinear interpolation. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a435a37e3b4071e90c97ee3e79d4bbecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::warpAffine</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &amp;borderValue=Scalar())</argsstring>
        <name>warpAffine</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>dsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>INTER_LINEAR</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderMode</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>borderValue</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="349"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3215a47d3e1cfe9fe27c0b5e8557e50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::warpPerspective</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar &amp;borderValue=Scalar())</argsstring>
        <name>warpPerspective</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>dsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>INTER_LINEAR</defval>
        </param>
        <param>
          <type>int</type>
          <declname>borderMode</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>borderValue</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="354"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac9b092b642edecc9059a4232a2b6f5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::remap</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;map1, const Mat &amp;map2, int interpolation, int borderMode=BORDER_CONSTANT, const Scalar &amp;borderValue=Scalar())</argsstring>
        <name>remap</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>map1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>map2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>interpolation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>borderMode</declname>
          <defval>BORDER_CONSTANT</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>borderValue</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="358"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3336fcebdbc1f25638c28f97cf6070ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::convertMaps</definition>
        <argsstring>(const Mat &amp;map1, const Mat &amp;map2, Mat &amp;dstmap1, Mat &amp;dstmap2, int dstmap1type, bool nninterpolation=false)</argsstring>
        <name>convertMaps</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>map1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>map2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dstmap1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dstmap2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstmap1type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nninterpolation</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="361"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1acaef7be7ae5d0825cce7e677bf6d6b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getRotationMatrix2D</definition>
        <argsstring>(Point2f center, double angle, double scale)</argsstring>
        <name>getRotationMatrix2D</name>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="363"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a57c98631f11caa482f16ea5ec82ed7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getPerspectiveTransform</definition>
        <argsstring>(const Point2f src[], const Point2f dst[])</argsstring>
        <name>getPerspectiveTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>src</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>dst</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="364"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2f52608043f85e81d60af16f78c75985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getAffineTransform</definition>
        <argsstring>(const Point2f src[], const Point2f dst[])</argsstring>
        <name>getAffineTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>src</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>dst</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="365"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afc3d75060f8393b1981f2fe066746bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::invertAffineTransform</definition>
        <argsstring>(const Mat &amp;M, Mat &amp;iM)</argsstring>
        <name>invertAffineTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>iM</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="366"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac0846e0fe3bdf581fac0699a9220aadb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::getRectSubPix</definition>
        <argsstring>(const Mat &amp;image, Size patchSize, Point2f center, Mat &amp;patch, int patchType=-1)</argsstring>
        <name>getRectSubPix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>patchSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>patch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>patchType</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="369"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a09ad05ac30836fd8e1870099bf850a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::integral</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;sum, int sdepth=-1)</argsstring>
        <name>integral</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sdepth</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="371"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a310de81c7d2702b0efd8cd506bbcde73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::integral</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;sum, Mat &amp;sqsum, int sdepth=-1)</argsstring>
        <name>integral</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>sum</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>sqsum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sdepth</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="372"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a32be342d29f9234d1f4890a9515672a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::integral</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;sum, Mat &amp;sqsum, Mat &amp;tilted, int sdepth=-1)</argsstring>
        <name>integral</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>sum</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>sqsum</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tilted</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sdepth</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4e3c6869bca977d2e4199505384ddc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::accumulate</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;mask=Mat())</argsstring>
        <name>accumulate</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="375"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa2badaff73c56ae99f26fc08c966add5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::accumulateSquare</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;mask=Mat())</argsstring>
        <name>accumulateSquare</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="376"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3786faaee07e4838a457fe3393706326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::accumulateProduct</definition>
        <argsstring>(const Mat &amp;src1, const Mat &amp;src2, Mat &amp;dst, const Mat &amp;mask=Mat())</argsstring>
        <name>accumulateProduct</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="378"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a50e489f079462d4081fcbad8ece93b8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::accumulateWeighted</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, double alpha, const Mat &amp;mask=Mat())</argsstring>
        <name>accumulateWeighted</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="380"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aec98cd2011124ee5a362ef180775e51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::threshold</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, double thresh, double maxval, int type)</argsstring>
        <name>threshold</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>thresh</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxval</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="385"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abcfaa87d3ec23d7bde999eda4feae8b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::adaptiveThreshold</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)</argsstring>
        <name>adaptiveThreshold</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>adaptiveMethod</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thresholdType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blockSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>C</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="391"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af33cc9554fb59bc038c7a7e750a4e90f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::pyrDown</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Size &amp;dstsize=Size())</argsstring>
        <name>pyrDown</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_size__" kindref="compound">Size</ref> &amp;</type>
          <declname>dstsize</declname>
          <defval><ref refid="classcv_1_1_size__" kindref="compound">Size</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="393"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abdcae45bf2daa2c9a9ef342d638a88da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::pyrUp</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Size &amp;dstsize=Size())</argsstring>
        <name>pyrUp</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_size__" kindref="compound">Size</ref> &amp;</type>
          <declname>dstsize</declname>
          <defval><ref refid="classcv_1_1_size__" kindref="compound">Size</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="394"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a024c28c4c73ffb79950cc4e1fb3d08de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::buildPyramid</definition>
        <argsstring>(const Mat &amp;src, vector&lt; Mat &gt; &amp;dst, int maxlevel)</argsstring>
        <name>buildPyramid</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxlevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="395"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a222f2ee5afee5c73e2dbc27a228b8ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::undistort</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, const Mat &amp;newCameraMatrix=Mat())</argsstring>
        <name>undistort</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>newCameraMatrix</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="399"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aec339184acc9acd3431010d8b541258e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::initUndistortRectifyMap</definition>
        <argsstring>(const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, const Mat &amp;R, const Mat &amp;newCameraMatrix, Size size, int m1type, Mat &amp;map1, Mat &amp;map2)</argsstring>
        <name>initUndistortRectifyMap</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>newCameraMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m1type</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>map1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>map2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="402"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7e28b4e1c5f0355118a7b01a125742f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getOptimalNewCameraMatrix</definition>
        <argsstring>(const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, Size imageSize, double alpha, Size newImgSize=Size(), Rect *validPixROI=0)</argsstring>
        <name>getOptimalNewCameraMatrix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>newImgSize</declname>
          <defval><ref refid="classcv_1_1_size__" kindref="compound">Size</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> *</type>
          <declname>validPixROI</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="405"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5668d4312e7488bf370a3fe2a7545d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::getDefaultNewCameraMatrix</definition>
        <argsstring>(const Mat &amp;cameraMatrix, Size imgsize=Size(), bool centerPrincipalPoint=false)</argsstring>
        <name>getDefaultNewCameraMatrix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imgsize</declname>
          <defval><ref refid="classcv_1_1_size__" kindref="compound">Size</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>centerPrincipalPoint</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="407"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a098d954d7796c869cfa818eea155adb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcOpticalFlowPyrLK</definition>
        <argsstring>(const Mat &amp;prevImg, const Mat &amp;nextImg, const vector&lt; Point2f &gt; &amp;prevPts, vector&lt; Point2f &gt; &amp;nextPts, vector&lt; uchar &gt; &amp;status, vector&lt; float &gt; &amp;err, Size winSize=Size(15, 15), int maxLevel=3, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), double derivLambda=0.5, int flags=0)</argsstring>
        <name>calcOpticalFlowPyrLK</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>prevImg</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>nextImg</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>prevPts</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>nextPts</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> &gt; &amp;</type>
          <declname>status</declname>
        </param>
        <param>
          <type>vector&lt; float &gt; &amp;</type>
          <declname>err</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>winSize</declname>
          <defval><ref refid="classcv_1_1_size__" kindref="compound">Size</ref>(15, 15)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>maxLevel</declname>
          <defval>3</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref></type>
          <declname>criteria</declname>
          <defval><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref>(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>derivLambda</declname>
          <defval>0.5</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="419"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afe4997787810e66406c601eef5a79d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcOpticalFlowFarneback</definition>
        <argsstring>(const Mat &amp;prev0, const Mat &amp;next0, Mat &amp;flow0, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)</argsstring>
        <name>calcOpticalFlowFarneback</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>prev0</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>next0</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>flow0</declname>
        </param>
        <param>
          <type>double</type>
          <declname>pyr_scale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>levels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>winsize</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>int</type>
          <declname>poly_n</declname>
        </param>
        <param>
          <type>double</type>
          <declname>poly_sigma</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="423"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a700188b08eb2d39f5e2ae54b618d5f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcHist</definition>
        <argsstring>(const Mat *images, int nimages, const int *channels, const Mat &amp;mask, MatND &amp;hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)</argsstring>
        <name>calcHist</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nimages</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>histSize</declname>
        </param>
        <param>
          <type>const float **</type>
          <declname>ranges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>uniform</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>accumulate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="433"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2804319035d2b84c8115aab1a84fd4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcHist</definition>
        <argsstring>(const Mat *images, int nimages, const int *channels, const Mat &amp;mask, SparseMat &amp;hist, int dims, const int *histSize, const float **ranges, bool uniform=true, bool accumulate=false)</argsstring>
        <name>calcHist</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nimages</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>hist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>histSize</declname>
        </param>
        <param>
          <type>const float **</type>
          <declname>ranges</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>uniform</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>accumulate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="439"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a49f56c1a2f8251ade38cde20cf75bea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcBackProject</definition>
        <argsstring>(const Mat *images, int nimages, const int *channels, const MatND &amp;hist, Mat &amp;backProject, const float **ranges, double scale=1, bool uniform=true)</argsstring>
        <name>calcBackProject</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nimages</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>hist</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>backProject</declname>
        </param>
        <param>
          <type>const float **</type>
          <declname>ranges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>uniform</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="444"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5c602e8e785c81d6f976c0af9e3b1319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcBackProject</definition>
        <argsstring>(const Mat *images, int nimages, const int *channels, const SparseMat &amp;hist, Mat &amp;backProject, const float **ranges, double scale=1, bool uniform=true)</argsstring>
        <name>calcBackProject</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>images</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nimages</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>hist</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>backProject</declname>
        </param>
        <param>
          <type>const float **</type>
          <declname>ranges</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>uniform</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="449"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3f685d07265152afe37d8bbe0a0c10c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::compareHist</definition>
        <argsstring>(const MatND &amp;H1, const MatND &amp;H2, int method)</argsstring>
        <name>compareHist</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>H1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>H2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="451"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0086d0a70bf8c9dc7018af1478a19f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::compareHist</definition>
        <argsstring>(const SparseMat &amp;H1, const SparseMat &amp;H2, int method)</argsstring>
        <name>compareHist</name>
        <param>
          <type>const <ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>H1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>H2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="453"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac2dcc16eef7f4c229d85940793fc4ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::equalizeHist</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst)</argsstring>
        <name>equalizeHist</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="455"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a44c808cd7fbe6cb375199a5a03477e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::watershed</definition>
        <argsstring>(const Mat &amp;image, Mat &amp;markers)</argsstring>
        <name>watershed</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>markers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a92e3ba28ddd09debc1f4de94f37e4f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::grabCut</definition>
        <argsstring>(const Mat &amp;img, Mat &amp;mask, Rect rect, Mat &amp;bgdModel, Mat &amp;fgdModel, int iterCount, int mode=GC_EVAL)</argsstring>
        <name>grabCut</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref></type>
          <declname>rect</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>bgdModel</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>fgdModel</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterCount</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
          <defval>GC_EVAL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="472"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5ffd5d04c74a5f11ad02c7baeb08fbda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::inpaint</definition>
        <argsstring>(const Mat &amp;src, const Mat &amp;inpaintMask, Mat &amp;dst, double inpaintRange, int flags)</argsstring>
        <name>inpaint</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>inpaintMask</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>inpaintRange</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="477"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7cb8bdd86181a06595828f0cedfc5bd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::distanceTransform</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, Mat &amp;labels, int distanceType, int maskSize)</argsstring>
        <name>distanceTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>labels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distanceType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maskSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="480"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a157ff209b3d5c2716ffe67fa66ad1c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::distanceTransform</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int distanceType, int maskSize)</argsstring>
        <name>distanceTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distanceType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maskSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="483"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a148c2a6d00455681ddedc2e9551e3b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::floodFill</definition>
        <argsstring>(Mat &amp;image, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)</argsstring>
        <name>floodFill</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>seedPoint</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>newVal</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> *</type>
          <declname>rect</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>loDiff</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>upDiff</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="491"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a96698066a3abd547464eb3d83ead5afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::floodFill</definition>
        <argsstring>(Mat &amp;image, Mat &amp;mask, Point seedPoint, Scalar newVal, Rect *rect=0, Scalar loDiff=Scalar(), Scalar upDiff=Scalar(), int flags=4)</argsstring>
        <name>floodFill</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>seedPoint</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>newVal</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> *</type>
          <declname>rect</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>loDiff</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>upDiff</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>4</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="496"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0c9c4daf2cc2961f459678722658ea83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::cvtColor</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int code, int dstCn=0)</argsstring>
        <name>cvtColor</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstCn</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="498"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a386f62d404d664468d903f9f212d681e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_moments" kindref="compound">Moments</ref></type>
        <definition>CV_EXPORTS Moments cv::moments</definition>
        <argsstring>(const Mat &amp;array, bool binaryImage=false)</argsstring>
        <name>moments</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>binaryImage</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="514"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0556712e37566ce295038f19f4f50f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::HuMoments</definition>
        <argsstring>(const Moments &amp;moments, double hu[7])</argsstring>
        <name>HuMoments</name>
        <param>
          <type>const <ref refid="classcv_1_1_moments" kindref="compound">Moments</ref> &amp;</type>
          <declname>moments</declname>
        </param>
        <param>
          <type>double</type>
          <declname>hu</declname>
          <array>[7]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="516"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7c0eabb0f86f95369dd1ad383698bc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::matchTemplate</definition>
        <argsstring>(const Mat &amp;image, const Mat &amp;templ, Mat &amp;result, int method)</argsstring>
        <name>matchTemplate</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>templ</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="522"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afa96ef27d4a8253ad1ea830274571b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::findContours</definition>
        <argsstring>(const Mat &amp;image, vector&lt; vector&lt; Point &gt; &gt; &amp;contours, vector&lt; Vec4i &gt; &amp;hierarchy, int mode, int method, Point offset=Point())</argsstring>
        <name>findContours</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &gt; &gt; &amp;</type>
          <declname>contours</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4i</ref> &gt; &amp;</type>
          <declname>hierarchy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>offset</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="534"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a561c945397faebcf5a4ac11722e276cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::findContours</definition>
        <argsstring>(const Mat &amp;image, vector&lt; vector&lt; Point &gt; &gt; &amp;contours, int mode, int method, Point offset=Point())</argsstring>
        <name>findContours</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &gt; &gt; &amp;</type>
          <declname>contours</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>offset</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="537"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa8e4a4b1e7be1d3c06a1dc53caf8a688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::drawContours</definition>
        <argsstring>(Mat &amp;image, const vector&lt; vector&lt; Point &gt; &gt; &amp;contours, int contourIdx, const Scalar &amp;color, int thickness=1, int lineType=8, const vector&lt; Vec4i &gt; &amp;hierarchy=vector&lt; Vec4i &gt;(), int maxLevel=INT_MAX, Point offset=Point())</argsstring>
        <name>drawContours</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &gt; &gt; &amp;</type>
          <declname>contours</declname>
        </param>
        <param>
          <type>int</type>
          <declname>contourIdx</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4i</ref> &gt; &amp;</type>
          <declname>hierarchy</declname>
          <defval>vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec4i</ref> &gt;()</defval>
        </param>
        <param>
          <type>int</type>
          <declname>maxLevel</declname>
          <defval>INT_MAX</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>offset</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="543"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a791a74559a5d1d774ae5998a00ab90d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::approxPolyDP</definition>
        <argsstring>(const Mat &amp;curve, vector&lt; Point &gt; &amp;approxCurve, double epsilon, bool closed)</argsstring>
        <name>approxPolyDP</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &gt; &amp;</type>
          <declname>approxCurve</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>closed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="547"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afd50f46e8e37b1da5c898fbed53f8957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::arcLength</definition>
        <argsstring>(const Mat &amp;curve, bool closed)</argsstring>
        <name>arcLength</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>curve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>closed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="552"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0b63375b35b0ef268d8a4e9b64a706fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref></type>
        <definition>CV_EXPORTS Rect cv::boundingRect</definition>
        <argsstring>(const Mat &amp;points)</argsstring>
        <name>boundingRect</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="553"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a9d4afa71dbd3e1b0c06ac5e39e165d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::contourArea</definition>
        <argsstring>(const Mat &amp;contour)</argsstring>
        <name>contourArea</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>contour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="554"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a54d99d5554a058f0330c30e9f083f4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_rotated_rect" kindref="compound">RotatedRect</ref></type>
        <definition>CV_EXPORTS RotatedRect cv::minAreaRect</definition>
        <argsstring>(const Mat &amp;points)</argsstring>
        <name>minAreaRect</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="555"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac25581f4152d257e43a5afcb7690871d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::minEnclosingCircle</definition>
        <argsstring>(const Mat &amp;points, Point2f &amp;center, float &amp;radius)</argsstring>
        <name>minEnclosingCircle</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="557"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae91766ec207f121c8a00a79cd070e121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::matchShapes</definition>
        <argsstring>(const Mat &amp;contour1, const Mat &amp;contour2, int method, double parameter)</argsstring>
        <name>matchShapes</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>contour1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>contour2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
        </param>
        <param>
          <type>double</type>
          <declname>parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="560"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3c0f33c50340ad8fa8200f504d86ec1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::convexHull</definition>
        <argsstring>(const Mat &amp;points, vector&lt; int &gt; &amp;hull, bool clockwise=false)</argsstring>
        <name>convexHull</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>vector&lt; int &gt; &amp;</type>
          <declname>hull</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clockwise</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="562"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af3e4f678829aa8c054ce6b63f5af32dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::convexHull</definition>
        <argsstring>(const Mat &amp;points, vector&lt; Point &gt; &amp;hull, bool clockwise=false)</argsstring>
        <name>convexHull</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &gt; &amp;</type>
          <declname>hull</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>clockwise</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="563"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a73d951f2aa5df5729a9bec94637608a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::isContourConvex</definition>
        <argsstring>(const Mat &amp;contour)</argsstring>
        <name>isContourConvex</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>contour</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="566"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0c6a14f749ec692cee3d06619f7b0268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_rotated_rect" kindref="compound">RotatedRect</ref></type>
        <definition>CV_EXPORTS RotatedRect cv::fitEllipse</definition>
        <argsstring>(const Mat &amp;points)</argsstring>
        <name>fitEllipse</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="568"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa58fd0ed6bcbb3357d42a7ff19b68ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::fitLine</definition>
        <argsstring>(const Mat &amp;points, Vec4f &amp;line, int distType, double param, double reps, double aeps)</argsstring>
        <name>fitLine</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_vec" kindref="compound">Vec4f</ref> &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>distType</declname>
        </param>
        <param>
          <type>double</type>
          <declname>param</declname>
        </param>
        <param>
          <type>double</type>
          <declname>reps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aeps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="571"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab14f4c855003ac6180610c3071e041e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::pointPolygonTest</definition>
        <argsstring>(const Mat &amp;contour, Point2f pt, bool measureDist)</argsstring>
        <name>pointPolygonTest</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>contour</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref></type>
          <declname>pt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>measureDist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="576"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af367b47c445029cc6dcec1ed537e602d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::estimateRigidTransform</definition>
        <argsstring>(const Mat &amp;A, const Mat &amp;B, bool fullAffine)</argsstring>
        <name>estimateRigidTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fullAffine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="579"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4d8f841b7f25316576c3f68c252de51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::updateMotionHistory</definition>
        <argsstring>(const Mat &amp;silhouette, Mat &amp;mhi, double timestamp, double duration)</argsstring>
        <name>updateMotionHistory</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>silhouette</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mhi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="582"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac526a2894f80da70f2376c8fe7dbc85f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcMotionGradient</definition>
        <argsstring>(const Mat &amp;mhi, Mat &amp;mask, Mat &amp;orientation, double delta1, double delta2, int apertureSize=3)</argsstring>
        <name>calcMotionGradient</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mhi</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>delta2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>apertureSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="587"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac00a61433442975b277b209efd38487f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::calcGlobalOrientation</definition>
        <argsstring>(const Mat &amp;orientation, const Mat &amp;mask, const Mat &amp;mhi, double timestamp, double duration)</argsstring>
        <name>calcGlobalOrientation</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>orientation</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mhi</declname>
        </param>
        <param>
          <type>double</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="591"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a090dc6318f23f79b6cfdad9f5b48b416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_rotated_rect" kindref="compound">RotatedRect</ref></type>
        <definition>CV_EXPORTS RotatedRect cv::CamShift</definition>
        <argsstring>(const Mat &amp;probImage, Rect &amp;window, TermCriteria criteria)</argsstring>
        <name>CamShift</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>probImage</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> &amp;</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref></type>
          <declname>criteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="595"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a34ee441339e92fc07f34a4e46af0e0ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::meanShift</definition>
        <argsstring>(const Mat &amp;probImage, Rect &amp;window, TermCriteria criteria)</argsstring>
        <name>meanShift</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>probImage</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> &amp;</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref></type>
          <declname>criteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="598"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a251e1d986c7d7e5f504cf9463c312fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::estimateAffine3D</definition>
        <argsstring>(const Mat &amp;from, const Mat &amp;to, Mat &amp;out, vector&lt; uchar &gt; &amp;outliers, double param1=3.0, double param2=0.99)</argsstring>
        <name>estimateAffine3D</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> &gt; &amp;</type>
          <declname>outliers</declname>
        </param>
        <param>
          <type>double</type>
          <declname>param1</declname>
          <defval>3.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param2</declname>
          <defval>0.99</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="602"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a73fd8e609d4e42f773c483b6fbb3ce0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::groupRectangles</definition>
        <argsstring>(vector&lt; Rect &gt; &amp;rectList, int groupThreshold, double eps=0.2)</argsstring>
        <name>groupRectangles</name>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> &gt; &amp;</type>
          <declname>rectList</declname>
        </param>
        <param>
          <type>int</type>
          <declname>groupThreshold</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eps</declname>
          <defval>0.2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="640"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3867c32372e509339bea12285f16b976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::undistortPoints</definition>
        <argsstring>(const Mat &amp;src, vector&lt; Point2f &gt; &amp;dst, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, const Mat &amp;R=Mat(), const Mat &amp;P=Mat())</argsstring>
        <name>undistortPoints</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>P</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="728"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abdb323d9dba21a4639b5f29306157fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::undistortPoints</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, const Mat &amp;R=Mat(), const Mat &amp;P=Mat())</argsstring>
        <name>undistortPoints</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>P</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="731"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aed671d611344dbc9a7982912f15fce02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::Rodrigues</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst)</argsstring>
        <name>Rodrigues</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="733"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4624531cb55131290f86509a920c41e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::Rodrigues</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, Mat &amp;jacobian)</argsstring>
        <name>Rodrigues</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>jacobian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="734"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae78d86a19f04c05d9547e97a1c9ac8cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::findHomography</definition>
        <argsstring>(const Mat &amp;srcPoints, const Mat &amp;dstPoints, Mat &amp;mask, int method=0, double ransacReprojThreshold=0)</argsstring>
        <name>findHomography</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>srcPoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dstPoints</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ransacReprojThreshold</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="741"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac66b5ccc463c3d70e48632c2a7624a48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::findHomography</definition>
        <argsstring>(const Mat &amp;srcPoints, const Mat &amp;dstPoints, vector&lt; uchar &gt; &amp;mask, int method=0, double ransacReprojThreshold=0)</argsstring>
        <name>findHomography</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>srcPoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dstPoints</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ransacReprojThreshold</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="746"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a9f1084930033d77c73a4dcad8d9062a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::findHomography</definition>
        <argsstring>(const Mat &amp;srcPoints, const Mat &amp;dstPoints, int method=0, double ransacReprojThreshold=0)</argsstring>
        <name>findHomography</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>srcPoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dstPoints</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>ransacReprojThreshold</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="750"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2352ec6085c4bc532a994a6af9570381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::RQDecomp3x3</definition>
        <argsstring>(const Mat &amp;M, Mat &amp;R, Mat &amp;Q)</argsstring>
        <name>RQDecomp3x3</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="753"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af3af88003271ff8091072e522a38d14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_vec" kindref="compound">Vec3d</ref></type>
        <definition>CV_EXPORTS Vec3d cv::RQDecomp3x3</definition>
        <argsstring>(const Mat &amp;M, Mat &amp;R, Mat &amp;Q, Mat &amp;Qx, Mat &amp;Qy, Mat &amp;Qz)</argsstring>
        <name>RQDecomp3x3</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>M</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Qx</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Qy</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Qz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="755"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad9f7e27c9e1d8423580189b995021dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::decomposeProjectionMatrix</definition>
        <argsstring>(const Mat &amp;projMatrix, Mat &amp;cameraMatrix, Mat &amp;rotMatrix, Mat &amp;transVect)</argsstring>
        <name>decomposeProjectionMatrix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>projMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rotMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>transVect</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="758"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab18d818f8fec596bc6ffd1e36ab6b2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::decomposeProjectionMatrix</definition>
        <argsstring>(const Mat &amp;projMatrix, Mat &amp;cameraMatrix, Mat &amp;rotMatrix, Mat &amp;transVect, Mat &amp;rotMatrixX, Mat &amp;rotMatrixY, Mat &amp;rotMatrixZ, Vec3d &amp;eulerAngles)</argsstring>
        <name>decomposeProjectionMatrix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>projMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rotMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>transVect</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rotMatrixX</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rotMatrixY</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rotMatrixZ</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_vec" kindref="compound">Vec3d</ref> &amp;</type>
          <declname>eulerAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="762"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a9d9c6ed1c041bb52d98626553385b99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::matMulDeriv</definition>
        <argsstring>(const Mat &amp;A, const Mat &amp;B, Mat &amp;dABdA, Mat &amp;dABdB)</argsstring>
        <name>matMulDeriv</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>B</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dABdA</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dABdB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="764"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abbd38ffec3e47db415f01f64f864505a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::composeRT</definition>
        <argsstring>(const Mat &amp;rvec1, const Mat &amp;tvec1, const Mat &amp;rvec2, const Mat &amp;tvec2, Mat &amp;rvec3, Mat &amp;tvec3)</argsstring>
        <name>composeRT</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec3</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="768"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3332231c3e17e95cb98755b8a4904d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::composeRT</definition>
        <argsstring>(const Mat &amp;rvec1, const Mat &amp;tvec1, const Mat &amp;rvec2, const Mat &amp;tvec2, Mat &amp;rvec3, Mat &amp;tvec3, Mat &amp;dr3dr1, Mat &amp;dr3dt1, Mat &amp;dr3dr2, Mat &amp;dr3dt2, Mat &amp;dt3dr1, Mat &amp;dt3dt1, Mat &amp;dt3dr2, Mat &amp;dt3dt2)</argsstring>
        <name>composeRT</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec3</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec3</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dr3dr1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dr3dt1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dr3dr2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dr3dt2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dt3dr1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dt3dt1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dt3dr2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dt3dt2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="776"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aec70407d501d09723e570679c474d21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::projectPoints</definition>
        <argsstring>(const Mat &amp;objectPoints, const Mat &amp;rvec, const Mat &amp;tvec, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, vector&lt; Point2f &gt; &amp;imagePoints)</argsstring>
        <name>projectPoints</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="782"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a1f3749b68a15da24124fa330ee4d9aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::projectPoints</definition>
        <argsstring>(const Mat &amp;objectPoints, const Mat &amp;rvec, const Mat &amp;tvec, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, vector&lt; Point2f &gt; &amp;imagePoints, Mat &amp;dpdrot, Mat &amp;dpdt, Mat &amp;dpdf, Mat &amp;dpdc, Mat &amp;dpddist, double aspectRatio=0)</argsstring>
        <name>projectPoints</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dpdrot</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dpdt</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dpdf</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dpdc</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dpddist</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aspectRatio</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="791"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad2a529b6a4458bd58b872f1a0305c028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::solvePnP</definition>
        <argsstring>(const Mat &amp;objectPoints, const Mat &amp;imagePoints, const Mat &amp;cameraMatrix, const Mat &amp;distCoeffs, Mat &amp;rvec, Mat &amp;tvec, bool useExtrinsicGuess=false)</argsstring>
        <name>solvePnP</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>tvec</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useExtrinsicGuess</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="798"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1add4ec7f88d1693de004b6933e88b7e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::initCameraMatrix2D</definition>
        <argsstring>(const vector&lt; vector&lt; Point3f &gt; &gt; &amp;objectPoints, const vector&lt; vector&lt; Point2f &gt; &gt; &amp;imagePoints, Size imageSize, double aspectRatio=1.)</argsstring>
        <name>initCameraMatrix2D</name>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point3__" kindref="compound">Point3f</ref> &gt; &gt; &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &gt; &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aspectRatio</declname>
          <defval>1.</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="802"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a570466f89eb1240ed49c79c1c8109d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::findChessboardCorners</definition>
        <argsstring>(const Mat &amp;image, Size patternSize, vector&lt; Point2f &gt; &amp;corners, int flags=CV_CALIB_CB_ADAPTIVE_THRESH+CV_CALIB_CB_NORMALIZE_IMAGE)</argsstring>
        <name>findChessboardCorners</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>patternSize</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>corners</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>CV_CALIB_CB_ADAPTIVE_THRESH+CV_CALIB_CB_NORMALIZE_IMAGE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="811"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a14ad5c4a5080e76e917f318fee8f14c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::drawChessboardCorners</definition>
        <argsstring>(Mat &amp;image, Size patternSize, const Mat &amp;corners, bool patternWasFound)</argsstring>
        <name>drawChessboardCorners</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>image</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>patternSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>corners</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>patternWasFound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="815"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad9c9069ddb8dca88c0d478c287a72e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::calibrateCamera</definition>
        <argsstring>(const vector&lt; vector&lt; Point3f &gt; &gt; &amp;objectPoints, const vector&lt; vector&lt; Point2f &gt; &gt; &amp;imagePoints, Size imageSize, Mat &amp;cameraMatrix, Mat &amp;distCoeffs, vector&lt; Mat &gt; &amp;rvecs, vector&lt; Mat &gt; &amp;tvecs, int flags=0)</argsstring>
        <name>calibrateCamera</name>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point3__" kindref="compound">Point3f</ref> &gt; &gt; &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &gt; &amp;</type>
          <declname>imagePoints</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &amp;</type>
          <declname>rvecs</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &gt; &amp;</type>
          <declname>tvecs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="839"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac0c8d2bf123afe43c09bcb8ce38d2d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calibrationMatrixValues</definition>
        <argsstring>(const Mat &amp;cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double &amp;fovx, double &amp;fovy, double &amp;focalLength, Point2d &amp;principalPoint, double &amp;aspectRatio)</argsstring>
        <name>calibrationMatrixValues</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>apertureWidth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>apertureHeight</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fovx</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>fovy</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>focalLength</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point2d</ref> &amp;</type>
          <declname>principalPoint</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>aspectRatio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="849"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a309e47ead7e41708570fa7072b0a34bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::stereoCalibrate</definition>
        <argsstring>(const vector&lt; vector&lt; Point3f &gt; &gt; &amp;objectPoints, const vector&lt; vector&lt; Point2f &gt; &gt; &amp;imagePoints1, const vector&lt; vector&lt; Point2f &gt; &gt; &amp;imagePoints2, Mat &amp;cameraMatrix1, Mat &amp;distCoeffs1, Mat &amp;cameraMatrix2, Mat &amp;distCoeffs2, Size imageSize, Mat &amp;R, Mat &amp;T, Mat &amp;E, Mat &amp;F, TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6), int flags=CALIB_FIX_INTRINSIC)</argsstring>
        <name>stereoCalibrate</name>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point3__" kindref="compound">Point3f</ref> &gt; &gt; &amp;</type>
          <declname>objectPoints</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &gt; &amp;</type>
          <declname>imagePoints1</declname>
        </param>
        <param>
          <type>const vector&lt; vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &gt; &amp;</type>
          <declname>imagePoints2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>E</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref></type>
          <declname>criteria</declname>
          <defval><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref>(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>CALIB_FIX_INTRINSIC</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="860"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac51888c7f7062e50360704465c52de1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::stereoRectify</definition>
        <argsstring>(const Mat &amp;cameraMatrix1, const Mat &amp;distCoeffs1, const Mat &amp;cameraMatrix2, const Mat &amp;distCoeffs2, Size imageSize, const Mat &amp;R, const Mat &amp;T, Mat &amp;R1, Mat &amp;R2, Mat &amp;P1, Mat &amp;P2, Mat &amp;Q, int flags=CALIB_ZERO_DISPARITY)</argsstring>
        <name>stereoRectify</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>P2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>CALIB_ZERO_DISPARITY</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="866"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad80bdc18d49e21dd723cce4f4ac53c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::stereoRectify</definition>
        <argsstring>(const Mat &amp;cameraMatrix1, const Mat &amp;distCoeffs1, const Mat &amp;cameraMatrix2, const Mat &amp;distCoeffs2, Size imageSize, const Mat &amp;R, const Mat &amp;T, Mat &amp;R1, Mat &amp;R2, Mat &amp;P1, Mat &amp;P2, Mat &amp;Q, double alpha, Size newImageSize=Size(), Rect *validPixROI1=0, Rect *validPixROI2=0, int flags=CALIB_ZERO_DISPARITY)</argsstring>
        <name>stereoRectify</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>cameraMatrix2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>distCoeffs2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imageSize</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>R2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>P1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>P2</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>newImageSize</declname>
          <defval><ref refid="classcv_1_1_size__" kindref="compound">Size</ref>()</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> *</type>
          <declname>validPixROI1</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref> *</type>
          <declname>validPixROI2</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>CALIB_ZERO_DISPARITY</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="874"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8e55510e1b9db6e377aeabb7a0a0ece2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::stereoRectifyUncalibrated</definition>
        <argsstring>(const Mat &amp;points1, const Mat &amp;points2, const Mat &amp;F, Size imgSize, Mat &amp;H1, Mat &amp;H2, double threshold=5)</argsstring>
        <name>stereoRectifyUncalibrated</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imgSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>H1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>H2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="880"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abbcfcb4d92b15b9be3ff54089cfae1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::convertPointsHomogeneous</definition>
        <argsstring>(const Mat &amp;src, vector&lt; Point3f &gt; &amp;dst)</argsstring>
        <name>convertPointsHomogeneous</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point3__" kindref="compound">Point3f</ref> &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="882"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a00c95dd0b2279d632d93f8dba916bc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::convertPointsHomogeneous</definition>
        <argsstring>(const Mat &amp;src, vector&lt; Point2f &gt; &amp;dst)</argsstring>
        <name>convertPointsHomogeneous</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point2f</ref> &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="883"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2733aac83e26a6e86773e790adb30aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::findFundamentalMat</definition>
        <argsstring>(const Mat &amp;points1, const Mat &amp;points2, vector&lt; uchar &gt; &amp;mask, int method=FM_RANSAC, double param1=3., double param2=0.99)</argsstring>
        <name>findFundamentalMat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points2</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="cxtypes_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval>FM_RANSAC</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param1</declname>
          <defval>3.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param2</declname>
          <defval>0.99</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="895"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a554462aaff76ee0b0ecccaace0a47759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>CV_EXPORTS Mat cv::findFundamentalMat</definition>
        <argsstring>(const Mat &amp;points1, const Mat &amp;points2, int method=FM_RANSAC, double param1=3., double param2=0.99)</argsstring>
        <name>findFundamentalMat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>method</declname>
          <defval>FM_RANSAC</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param1</declname>
          <defval>3.</defval>
        </param>
        <param>
          <type>double</type>
          <declname>param2</declname>
          <defval>0.99</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="899"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abfe9f9aec93e571fa3615a03613c7f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::computeCorrespondEpilines</definition>
        <argsstring>(const Mat &amp;points1, int whichImage, const Mat &amp;F, vector&lt; Vec3f &gt; &amp;lines)</argsstring>
        <name>computeCorrespondEpilines</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>points1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whichImage</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>F</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_vec" kindref="compound">Vec3f</ref> &gt; &amp;</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="903"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae713c733c2ce643e73c1f65c076cd143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::filterSpeckles</definition>
        <argsstring>(Mat &amp;img, double newVal, int maxSpeckleSize, double maxDiff, Mat &amp;buf)</argsstring>
        <name>filterSpeckles</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>double</type>
          <declname>newVal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxSpeckleSize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxDiff</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="956"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a714d8e93570a65da1a7667f727afc67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::reprojectImageTo3D</definition>
        <argsstring>(const Mat &amp;disparity, Mat &amp;_3dImage, const Mat &amp;Q, bool handleMissingValues=false)</argsstring>
        <name>reprojectImageTo3D</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>disparity</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>_3dImage</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>Q</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>handleMissingValues</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="960"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0154af9ed1d58ac33af18c01dd68fd20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::write</definition>
        <argsstring>(FileStorage &amp;fs, const string &amp;name, const vector&lt; KeyPoint &gt; &amp;keypoints)</argsstring>
        <name>write</name>
        <param>
          <type><ref refid="classcv_1_1_file_storage" kindref="compound">FileStorage</ref> &amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const vector&lt; <ref refid="classcv_1_1_key_point" kindref="compound">KeyPoint</ref> &gt; &amp;</type>
          <declname>keypoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="983"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0339ea15f71b154623b8682ecc6b9d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::read</definition>
        <argsstring>(const FileNode &amp;node, vector&lt; KeyPoint &gt; &amp;keypoints)</argsstring>
        <name>read</name>
        <param>
          <type>const <ref refid="classcv_1_1_file_node" kindref="compound">FileNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_key_point" kindref="compound">KeyPoint</ref> &gt; &amp;</type>
          <declname>keypoints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="984"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5c7f99dc13f084f90bdf0442130b4280" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS string</type>
        <definition>CV_EXPORTS string cv::fromUtf16</definition>
        <argsstring>(const WString &amp;str)</argsstring>
        <name>fromUtf16</name>
        <param>
          <type>const <ref refid="namespacecv_1a563111b3c46f1242cae9541b70c3436c" kindref="member">WString</ref> &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae9b3ff5f3fe794d0765a477ade5ebaaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="namespacecv_1a563111b3c46f1242cae9541b70c3436c" kindref="member">WString</ref></type>
        <definition>CV_EXPORTS WString cv::toUtf16</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>toUtf16</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a18435c327cd6be06af529e4c75cb40ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS string</type>
        <definition>CV_EXPORTS string cv::format</definition>
        <argsstring>(const char *fmt,...)</argsstring>
        <name>format</name>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7ad1e70dba3dcb88ab656e51625c4144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::error</definition>
        <argsstring>(const Exception &amp;exc)</argsstring>
        <name>error</name>
        <param>
          <type>const <ref refid="classcv_1_1_exception" kindref="compound">Exception</ref> &amp;</type>
          <declname>exc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aea3e33d6fd445df00b15b8fcb5f17fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::setBreakOnError</definition>
        <argsstring>(bool value)</argsstring>
        <name>setBreakOnError</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a23808f8acd70ab63269f37295df23149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS CvErrorCallback</type>
        <definition>CV_EXPORTS CvErrorCallback cv::redirectError</definition>
        <argsstring>(CvErrorCallback errCallback, void *userdata=0, void **prevUserdata=0)</argsstring>
        <name>redirectError</name>
        <param>
          <type>CvErrorCallback</type>
          <declname>errCallback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userdata</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>void **</type>
          <declname>prevUserdata</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a124c40de695c01812be28017383fd8bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::setNumThreads</definition>
        <argsstring>(int)</argsstring>
        <name>setNumThreads</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6aa4151e5a4a983791efeeb0c84ff85d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::getNumThreads</definition>
        <argsstring>()</argsstring>
        <name>getNumThreads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a83d87a6df10dbc5fb553e7a3fb00eba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::getThreadNum</definition>
        <argsstring>()</argsstring>
        <name>getThreadNum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a52d247840b8872c3beeea2dc937892c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="cxtypes_8h_1a7cde0074dfd288f2d70c0e035dacb28a" kindref="member">int64</ref></type>
        <definition>CV_EXPORTS int64 cv::getTickCount</definition>
        <argsstring>()</argsstring>
        <name>getTickCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aba7fb5393ab888930404a462853a43ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::getTickFrequency</definition>
        <argsstring>()</argsstring>
        <name>getTickFrequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a845602234a29d9c59172e0f588e1246f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="cxtypes_8h_1a7cde0074dfd288f2d70c0e035dacb28a" kindref="member">int64</ref></type>
        <definition>CV_EXPORTS int64 cv::getCPUTickCount</definition>
        <argsstring>()</argsstring>
        <name>getCPUTickCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a96859d3062353507fdac740882a7a97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void *</type>
        <definition>CV_EXPORTS void* cv::fastMalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>fastMalloc</name>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="140"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae2d12c43e10c667e03e0b0ef3ced08c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::fastFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>fastFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6c61a3d742f09c529807b2f181838f92" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>static _Tp* cv::allocate</definition>
        <argsstring>(size_t n)</argsstring>
        <name>allocate</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="144" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac2a80392f49457fabb22f43287ec0af6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void cv::deallocate</definition>
        <argsstring>(_Tp *ptr, size_t)</argsstring>
        <name>deallocate</name>
        <param>
          <type>_Tp *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="149" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a03bba441b6e06396a7274e73dabaffb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp *</type>
        <definition>static _Tp* cv::alignPtr</definition>
        <argsstring>(_Tp *ptr, int n=(int) sizeof(_Tp))</argsstring>
        <name>alignPtr</name>
        <param>
          <type>_Tp *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>(int) sizeof(_Tp)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="154" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af2ff8f837e7a44f288b050765492f800" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t cv::alignSize</definition>
        <argsstring>(size_t sz, int n)</argsstring>
        <name>alignSize</name>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="159" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a796bad710907da19bf195e911442a122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::setUseOptimized</definition>
        <argsstring>(bool)</argsstring>
        <name>setUseOptimized</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab844c496e73e015c5f436d8b16866e3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::useOptimized</definition>
        <argsstring>()</argsstring>
        <name>useOptimized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="164"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1acd16cccbc7be62773bcf60568e9a7b74" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t cv::getElemSize</definition>
        <argsstring>(int type)</argsstring>
        <name>getElemSize</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="732" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="732" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a28b6481a465a5216fd8c7c514aa31d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::extractImageCOI</definition>
        <argsstring>(const CvArr *arr, Mat &amp;coiimg, int coi=-1)</argsstring>
        <name>extractImageCOI</name>
        <param>
          <type>const <ref refid="cxtypes_8h_1ac5046bc0456e9295d80b37774384798c" kindref="member">CvArr</ref> *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>coiimg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coi</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1075"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a43f2637ee322d041039a52b64e465fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::insertImageCOI</definition>
        <argsstring>(const Mat &amp;coiimg, CvArr *arr, int coi=-1)</argsstring>
        <name>insertImageCOI</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>coiimg</declname>
        </param>
        <param>
          <type><ref refid="cxtypes_8h_1ac5046bc0456e9295d80b37774384798c" kindref="member">CvArr</ref> *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coi</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1076"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2cea77b2a01b2feb3f5df82941e6ded5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::add</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, const Mat &amp;mask)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1078"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ac682466116f52700d9b5bf6a86eec7d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, const Mat &amp;mask)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1079"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a9358726a342b0858718503d7bac0704e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::add</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1080"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab4edd30f4708c8bde9a721175e340721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1081"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af476f6372d3f30d4967607ccb36c2276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::add</definition>
        <argsstring>(const Mat &amp;a, const Scalar &amp;s, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1082"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afd018770b138c0ab0184409380bcef58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const Mat &amp;a, const Scalar &amp;s, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1083"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a106f10d99bd930cc6484aeef1b6eed34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::multiply</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, double scale=1)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1085"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af3effd4da414cd728ed8436279e471b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::divide</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, double scale=1)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1086"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5f1a7f79d7bbb6334efed144438602ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::divide</definition>
        <argsstring>(double scale, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>divide</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1087"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a20f62a40dec8b11717306e81726869f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const Scalar &amp;s, const Mat &amp;a, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1089"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad3cc0b76c2335cc89e865810738c932d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::scaleAdd</definition>
        <argsstring>(const Mat &amp;a, double alpha, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>scaleAdd</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1090"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a20f8dd6a6c3f6e50819be59435590a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::addWeighted</definition>
        <argsstring>(const Mat &amp;a, double alpha, const Mat &amp;b, double beta, double gamma, Mat &amp;c)</argsstring>
        <name>addWeighted</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1092"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a95a270daa994c3b4f8ef31dfffd1bc62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::convertScaleAbs</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;c, double alpha=1, double beta=0)</argsstring>
        <name>convertScaleAbs</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1093"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab496d3fb4091d95d193ee795f1ce2424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::LUT</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;lut, Mat &amp;b)</argsstring>
        <name>LUT</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>lut</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1094"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aff76fbbf311c8c72c79680a0dd85b167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::sum</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1096"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae351516e743c04026f3ca80cfb541c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::countNonZero</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>countNonZero</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1097"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6e16305d8856f4666e103eba6982ee54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::mean</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1099"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a354ba18da2a06c6686095bfa076579cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::mean</definition>
        <argsstring>(const Mat &amp;m, const Mat &amp;mask)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1100"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a86e8672a273c4e2b72cdd8b58be92400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::meanStdDev</definition>
        <argsstring>(const Mat &amp;m, Scalar &amp;mean, Scalar &amp;stddev, const Mat &amp;mask=Mat())</argsstring>
        <name>meanStdDev</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>stddev</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1101"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a769956b617bb0326c71a176f53646f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const Mat &amp;a, int normType=NORM_L2)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
          <defval>NORM_L2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1102"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a121ea2ddca3a484011d13ae23b696b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, int normType=NORM_L2)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
          <defval>NORM_L2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1103"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2212f87979fd1091e2ee87e635eb9bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const Mat &amp;a, int normType, const Mat &amp;mask)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1104"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3bd513316fae2054c60254103bd5a322" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, int normType, const Mat &amp;mask)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1106"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab9acbd3eb2a725bf4a4aa067590b78e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::normalize</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b, double alpha=1, double beta=0, int norm_type=NORM_L2, int rtype=-1, const Mat &amp;mask=Mat())</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>norm_type</declname>
          <defval>NORM_L2</defval>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1108"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abbcfa41285bae9b405bd8758d1ab508a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::minMaxLoc</definition>
        <argsstring>(const Mat &amp;a, double *minVal, double *maxVal=0, Point *minLoc=0, Point *maxLoc=0, const Mat &amp;mask=Mat())</argsstring>
        <name>minMaxLoc</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>maxVal</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> *</type>
          <declname>minLoc</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> *</type>
          <declname>maxLoc</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1112"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4396f61192fa22968830dc8b3a61aa2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::reduce</definition>
        <argsstring>(const Mat &amp;m, Mat &amp;dst, int dim, int rtype, int dtype=-1)</argsstring>
        <name>reduce</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtype</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1113"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af39d36e4bc047d0e0b452c80ce133544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::merge</definition>
        <argsstring>(const Mat *mv, size_t count, Mat &amp;dst)</argsstring>
        <name>merge</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>mv</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1114"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a266f8995c880d61971de2317abd1886b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::split</definition>
        <argsstring>(const Mat &amp;m, Mat *mvbegin)</argsstring>
        <name>split</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>mvbegin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1115"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a99fa8c4846bda08a807e9fbb5619a9b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::mixChannels</definition>
        <argsstring>(const Mat *src, int nsrcs, Mat *dst, int ndsts, const int *fromTo, size_t npairs)</argsstring>
        <name>mixChannels</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsrcs</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndsts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>fromTo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>npairs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1118"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa4ff595c7d19ed978ae0525742d20a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::flip</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b, int flipCode)</argsstring>
        <name>flip</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flipCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1119"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aff0ab6b2b5b10b61740273b2249467a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::repeat</definition>
        <argsstring>(const Mat &amp;a, int ny, int nx, Mat &amp;b)</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1121"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa1710a39d411fce479da4190c28d3166" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref></type>
        <definition>static Mat cv::repeat</definition>
        <argsstring>(const Mat &amp;src, int ny, int nx)</argsstring>
        <name>repeat</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ny</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1123" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1122" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0fde709cf9743ea9422c48dfffe7fe54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_and</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1128"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a636acfdb7be988b4bb08fe6c24a96cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_or</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1129"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a311d3e50b95f24ac2a4585436f93aa59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_xor</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1130"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a01496e483b6c7d782a980a15818cc807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_and</definition>
        <argsstring>(const Mat &amp;a, const Scalar &amp;s, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1131"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3a4650434659ed650ec770f416375fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_or</definition>
        <argsstring>(const Mat &amp;a, const Scalar &amp;s, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1132"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afc5d9049ca671f422e02d15f539a8cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_xor</definition>
        <argsstring>(const Mat &amp;a, const Scalar &amp;s, Mat &amp;c, const Mat &amp;mask=Mat())</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1133"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a9285cb2874ca1fb0f4b48a079fc7be2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_not</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;c)</argsstring>
        <name>bitwise_not</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1134"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a21914bae15dcb49859d5412949951ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::absdiff</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>absdiff</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1135"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a262022a1e60555d1cd2e95a55213592c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::absdiff</definition>
        <argsstring>(const Mat &amp;a, const Scalar &amp;s, Mat &amp;c)</argsstring>
        <name>absdiff</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1136"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a650e450e108cff4c8e6a96d2c405d138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::inRange</definition>
        <argsstring>(const Mat &amp;src, const Mat &amp;lowerb, const Mat &amp;upperb, Mat &amp;dst)</argsstring>
        <name>inRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>lowerb</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>upperb</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1138"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1adf38c75795f7ef55d0caad9d5e0bebf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::inRange</definition>
        <argsstring>(const Mat &amp;src, const Scalar &amp;lowerb, const Scalar &amp;upperb, Mat &amp;dst)</argsstring>
        <name>inRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lowerb</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>upperb</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1140"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a32ab9afdb3b730a2679201ce69feb2f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::compare</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, int cmpop)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmpop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1141"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3ed618b051f98a2bd1a2076fbffb96a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::compare</definition>
        <argsstring>(const Mat &amp;a, double s, Mat &amp;c, int cmpop)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmpop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1142"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a89af6e660bb5ec8d955f62be6ae5cb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::min</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1143"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a56238200764c4f3d53045dbc1443c93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::min</definition>
        <argsstring>(const Mat &amp;a, double alpha, Mat &amp;c)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1144"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1acce67e1745347ac4542304220bfa3d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::max</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1145"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae6461ef730e4ddc683ad5e3028c09b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::max</definition>
        <argsstring>(const Mat &amp;a, double alpha, Mat &amp;c)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1146"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a55b4ef98098ac0758e010bcf5e6bfb1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::sqrt</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1148"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afb8fc1f115caa087c7501a63aab4fc4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::pow</definition>
        <argsstring>(const Mat &amp;a, double power, Mat &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1149"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a07acc01ecb4ee345ec57d9955869e045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::exp</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1150"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a960d8ed63f8f90498b356532cbbf95ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::log</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1151"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a616c87ef621dd7baa28c51ac5cf07bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS float</type>
        <definition>CV_EXPORTS float cv::cubeRoot</definition>
        <argsstring>(float val)</argsstring>
        <name>cubeRoot</name>
        <param>
          <type>float</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1152"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1adeb585900aac74d822d4f16a905c3fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS float</type>
        <definition>CV_EXPORTS float cv::fastAtan2</definition>
        <argsstring>(float y, float x)</argsstring>
        <name>fastAtan2</name>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1153"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af028205c103196082a4a6910583d2e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::polarToCart</definition>
        <argsstring>(const Mat &amp;magnitude, const Mat &amp;angle, Mat &amp;x, Mat &amp;y, bool angleInDegrees=false)</argsstring>
        <name>polarToCart</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>angleInDegrees</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1155"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1adac72583356f7ef64c8482c666a90df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::cartToPolar</definition>
        <argsstring>(const Mat &amp;x, const Mat &amp;y, Mat &amp;magnitude, Mat &amp;angle, bool angleInDegrees=false)</argsstring>
        <name>cartToPolar</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>magnitude</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>angleInDegrees</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1158"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afafc3788315c543c32457f8c6e9cf663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::phase</definition>
        <argsstring>(const Mat &amp;x, const Mat &amp;y, Mat &amp;angle, bool angleInDegrees=false)</argsstring>
        <name>phase</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>angleInDegrees</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1160"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8b2350cf9d6896c65fe87db4f88030c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::magnitude</definition>
        <argsstring>(const Mat &amp;x, const Mat &amp;y, Mat &amp;magnitude)</argsstring>
        <name>magnitude</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>magnitude</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1161"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a35bb6dd220e6fe897b8c5b6d8ff40510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::checkRange</definition>
        <argsstring>(const Mat &amp;a, bool quiet=true, Point *pt=0, double minVal=-DBL_MAX, double maxVal=DBL_MAX)</argsstring>
        <name>checkRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quiet</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> *</type>
          <declname>pt</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minVal</declname>
          <defval>-DBL_MAX</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxVal</declname>
          <defval>DBL_MAX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1163"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af1f50097de603a00b959b7b94ea24b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::gemm</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, double alpha, const Mat &amp;c, double gamma, Mat &amp;d, int flags=0)</argsstring>
        <name>gemm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1166"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae1be0d64335c3d9cac803855dc65e37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::mulTransposed</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;c, bool aTa, const Mat &amp;delta=Mat(), double scale=1, int rtype=-1)</argsstring>
        <name>mulTransposed</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>aTa</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>delta</declname>
          <defval><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref>()</defval>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1169"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1acdd7dd296bed655a8924c3e78cf1abf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::transpose</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b)</argsstring>
        <name>transpose</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1170"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a66b0c5c06cd9a8ab703871a7e4866f51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::transform</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;m)</argsstring>
        <name>transform</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1171"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a814ddab74a6f07b1d3a18924c0e68419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::perspectiveTransform</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, const Mat &amp;m)</argsstring>
        <name>perspectiveTransform</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1172"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1adb51d48d8a25afb5e5985644a4708f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::completeSymm</definition>
        <argsstring>(Mat &amp;a, bool lowerToUpper=false)</argsstring>
        <name>completeSymm</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lowerToUpper</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1174"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4d8db3d6e2effe39bb3324cca8ddffc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::setIdentity</definition>
        <argsstring>(Mat &amp;c, const Scalar &amp;s=Scalar(1))</argsstring>
        <name>setIdentity</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
          <defval><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref>(1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1175"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4d676422bb8831bff1694768f277c124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::determinant</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>determinant</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1176"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abbab04be4e370756aaca264daa7e0c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::trace</definition>
        <argsstring>(const Mat &amp;m)</argsstring>
        <name>trace</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1177"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5c5af90c5d5738676dbd512f6708627e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::invert</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;c, int flags=DECOMP_LU)</argsstring>
        <name>invert</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>DECOMP_LU</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1178"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a604fb35aa2d3823651e670fbcb186d80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::solve</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;x, int flags=DECOMP_LU)</argsstring>
        <name>solve</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>DECOMP_LU</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1179"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab86b5d945918979795b93a22fb338b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::sort</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b, int flags)</argsstring>
        <name>sort</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1180"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa1a665329c1b0c74858d256bf9f98403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::sortIdx</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;b, int flags)</argsstring>
        <name>sortIdx</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1181"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a99748e71728ffcb86827e0170e718eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::solveCubic</definition>
        <argsstring>(const Mat &amp;coeffs, Mat &amp;roots)</argsstring>
        <name>solveCubic</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>coeffs</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>roots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1182"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa79686bb9400276aa874d79910f4b641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::solvePoly</definition>
        <argsstring>(const Mat &amp;coeffs, Mat &amp;roots, int maxIters=300)</argsstring>
        <name>solvePoly</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>coeffs</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>roots</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxIters</declname>
          <defval>300</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1183"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aac1129b52aad089c2e08330e66ef992b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::eigen</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;eigenvalues, int lowindex=-1, int highindex=-1)</argsstring>
        <name>eigen</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>eigenvalues</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lowindex</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>highindex</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1185"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4194ed7b0afa50bfb30dda1b89a2e84e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::eigen</definition>
        <argsstring>(const Mat &amp;a, Mat &amp;eigenvalues, Mat &amp;eigenvectors, int lowindex=-1, int highindex=-1)</argsstring>
        <name>eigen</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>eigenvalues</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>eigenvectors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lowindex</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>highindex</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1187"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aeb64d57b0503f08140d6bcd6e9716a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcCovarMatrix</definition>
        <argsstring>(const Mat *samples, int nsamples, Mat &amp;covar, Mat &amp;mean, int flags, int ctype=CV_64F)</argsstring>
        <name>calcCovarMatrix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>samples</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsamples</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>covar</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ctype</declname>
          <defval>CV_64F</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1191"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a437a1cf17d41a1cd44ea60ce08b90030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::calcCovarMatrix</definition>
        <argsstring>(const Mat &amp;samples, Mat &amp;covar, Mat &amp;mean, int flags, int ctype=CV_64F)</argsstring>
        <name>calcCovarMatrix</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>samples</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>covar</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ctype</declname>
          <defval>CV_64F</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1193"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3d12d0975a8106e67ec520d964f6b8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::Mahalanobis</definition>
        <argsstring>(const Mat &amp;v1, const Mat &amp;v2, const Mat &amp;icovar)</argsstring>
        <name>Mahalanobis</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>icovar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1225"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a099803aa7e8ac5595ccd65779cad13be" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>static double cv::Mahalonobis</definition>
        <argsstring>(const Mat &amp;v1, const Mat &amp;v2, const Mat &amp;icovar)</argsstring>
        <name>Mahalonobis</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>icovar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1227" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1226" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0e41a52ad019972a65e0f9ac0eb81f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::dft</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int flags=0, int nonzeroRows=0)</argsstring>
        <name>dft</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nonzeroRows</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1229"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a51c4017c15044fdef764e6d7a409a799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::idft</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int flags=0, int nonzeroRows=0)</argsstring>
        <name>idft</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nonzeroRows</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1230"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a60913a8242b41fe570a4a8b0f836c680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::dct</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int flags=0)</argsstring>
        <name>dct</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1231"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a90add3c42489655753b29d8f64d07a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::idct</definition>
        <argsstring>(const Mat &amp;src, Mat &amp;dst, int flags=0)</argsstring>
        <name>idct</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1232"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2710957cb46073f7b8ad269837493a02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::mulSpectrums</definition>
        <argsstring>(const Mat &amp;a, const Mat &amp;b, Mat &amp;c, int flags, bool conjB=false)</argsstring>
        <name>mulSpectrums</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>conjB</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1234"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa4a433cb6247806816deb997ce8ed34c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::getOptimalDFTSize</definition>
        <argsstring>(int vecsize)</argsstring>
        <name>getOptimalDFTSize</name>
        <param>
          <type>int</type>
          <declname>vecsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1235"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a58d4da15c6e9ef96edbe151a4cf9b702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::kmeans</definition>
        <argsstring>(const Mat &amp;data, int K, Mat &amp;best_labels, TermCriteria criteria, int attempts, int flags, Mat *centers)</argsstring>
        <name>kmeans</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>best_labels</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_term_criteria" kindref="compound">TermCriteria</ref></type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>int</type>
          <declname>attempts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> *</type>
          <declname>centers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1240"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7486e8baca835c4a4b57e689b9a01c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_r_n_g" kindref="compound">RNG</ref> &amp;</type>
        <definition>CV_EXPORTS RNG&amp; cv::theRNG</definition>
        <argsstring>()</argsstring>
        <name>theRNG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1242"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8697ca39a85bbe46f2e37893446b92f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename _Tp</type>
          </param>
        </templateparamlist>
        <type>_Tp</type>
        <definition>static _Tp cv::randu</definition>
        <argsstring>()</argsstring>
        <name>randu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1243" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1243" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4b85cf32cfc4db8f2b610fcb5a2035a6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cv::randu</definition>
        <argsstring>(Mat &amp;dst, const Scalar &amp;low, const Scalar &amp;high)</argsstring>
        <name>randu</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>low</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>high</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1246" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1245" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af33df92a9c25dd55fb84de86a64e054e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void cv::randn</definition>
        <argsstring>(Mat &amp;dst, const Scalar &amp;mean, const Scalar &amp;stddev)</argsstring>
        <name>randn</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>stddev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1248" bodyfile="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" bodystart="1247" bodyend="1248"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7b7ff24908815f95fd2d8d6cc9fcac1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::randShuffle</definition>
        <argsstring>(Mat &amp;dst, double iterFactor=1., RNG *rng=0)</argsstring>
        <name>randShuffle</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>iterFactor</declname>
          <defval>1.</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_r_n_g" kindref="compound">RNG</ref> *</type>
          <declname>rng</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1249"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a91194cdd3bb07af199ca6ca2fca408a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::line</definition>
        <argsstring>(Mat &amp;img, Point pt1, Point pt2, const Scalar &amp;color, int thickness=1, int lineType=8, int shift=0)</argsstring>
        <name>line</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>pt1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1253"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3ad247f71258223bdb3f32bf7f3130e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::rectangle</definition>
        <argsstring>(Mat &amp;img, Point pt1, Point pt2, const Scalar &amp;color, int thickness=1, int lineType=8, int shift=0)</argsstring>
        <name>rectangle</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>pt1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1257"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4c418ef2e259c77f141589504476fa1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::rectangle</definition>
        <argsstring>(Mat &amp;img, Rect rec, const Scalar &amp;color, int thickness=1, int lineType=8, int shift=0)</argsstring>
        <name>rectangle</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref></type>
          <declname>rec</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1261"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ade85723ff3a2028cbc901e050365c9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::circle</definition>
        <argsstring>(Mat &amp;img, Point center, int radius, const Scalar &amp;color, int thickness=1, int lineType=8, int shift=0)</argsstring>
        <name>circle</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1265"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a54fdab7c2bc6c676369df183b442d272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::ellipse</definition>
        <argsstring>(Mat &amp;img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar &amp;color, int thickness=1, int lineType=8, int shift=0)</argsstring>
        <name>ellipse</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>axes</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>startAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>endAngle</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1270"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a506f50524ab998af9d56a4fe9a757016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::ellipse</definition>
        <argsstring>(Mat &amp;img, const RotatedRect &amp;box, const Scalar &amp;color, int thickness=1, int lineType=8)</argsstring>
        <name>ellipse</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_rotated_rect" kindref="compound">RotatedRect</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1273"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a331232e38b978c898eecacfd403ff0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::fillConvexPoly</definition>
        <argsstring>(Mat &amp;img, const Point *pts, int npts, const Scalar &amp;color, int lineType=8, int shift=0)</argsstring>
        <name>fillConvexPoly</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> *</type>
          <declname>pts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>npts</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1277"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3c7cad306a995d94007e1c527ac336a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::fillPoly</definition>
        <argsstring>(Mat &amp;img, const Point **pts, const int *npts, int ncontours, const Scalar &amp;color, int lineType=8, int shift=0, Point offset=Point())</argsstring>
        <name>fillPoly</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> **</type>
          <declname>pts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>npts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncontours</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>offset</declname>
          <defval><ref refid="classcv_1_1_point__" kindref="compound">Point</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1281"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4fc92c1933650059333c9595815a7c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::polylines</definition>
        <argsstring>(Mat &amp;img, const Point **pts, const int *npts, int ncontours, bool isClosed, const Scalar &amp;color, int thickness=1, int lineType=8, int shift=0)</argsstring>
        <name>polylines</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> **</type>
          <declname>pts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>npts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncontours</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isClosed</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lineType</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1284"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad97f1d22ab7de254e565077b767e3873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::clipLine</definition>
        <argsstring>(Size imgSize, Point &amp;pt1, Point &amp;pt2)</argsstring>
        <name>clipLine</name>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>imgSize</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1286"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8ff16c730511d46ec6aa8f95078a0173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::clipLine</definition>
        <argsstring>(Rect img_rect, Point &amp;pt1, Point &amp;pt2)</argsstring>
        <name>clipLine</name>
        <param>
          <type><ref refid="classcv_1_1_rect__" kindref="compound">Rect</ref></type>
          <declname>img_rect</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &amp;</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &amp;</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1287"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a1c825fa580aa9b61dae8b68f5b965c65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::ellipse2Poly</definition>
        <argsstring>(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, vector&lt; Point &gt; &amp;pts)</argsstring>
        <name>ellipse2Poly</name>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>center</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
          <declname>axes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arcStart</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arcEnd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>vector&lt; <ref refid="classcv_1_1_point__" kindref="compound">Point</ref> &gt; &amp;</type>
          <declname>pts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1305"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a55a850a5b47dda6d36d75c170cc56df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::putText</definition>
        <argsstring>(Mat &amp;img, const string &amp;text, Point org, int fontFace, double fontScale, Scalar color, int thickness=1, int linetype=8, bool bottomLeftOrigin=false)</argsstring>
        <name>putText</name>
        <param>
          <type><ref refid="classcv_1_1_mat" kindref="compound">Mat</ref> &amp;</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_point__" kindref="compound">Point</ref></type>
          <declname>org</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fontFace</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fontScale</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>linetype</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>bottomLeftOrigin</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1323"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2f5a0b8396d196dc68d335e549f8416e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_size__" kindref="compound">Size</ref></type>
        <definition>CV_EXPORTS Size cv::getTextSize</definition>
        <argsstring>(const string &amp;text, int fontFace, double fontScale, int thickness, int *baseLine)</argsstring>
        <name>getTextSize</name>
        <param>
          <type>const string &amp;</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fontFace</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fontScale</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thickness</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>baseLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1327"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aaaf4b3a62bc7fecd18c94d9a0db88373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::add</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, const MatND &amp;mask)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1726"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1afd2cc33c991410888c8b06c1c035e242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, const MatND &amp;mask)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1727"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae6b4f74e1114a25b32fb8129a54e4c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::add</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1728"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0adcf6ff25194e18045cb6bdedde1a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1729"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7dc3fc72ce2d3d27e6c87c8c9bd6786c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::add</definition>
        <argsstring>(const MatND &amp;a, const Scalar &amp;s, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1730"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4cb951f0a787a689bbebbe0bd1d37721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::multiply</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, double scale=1)</argsstring>
        <name>multiply</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1732"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae93c500b22169098ac367e5aa310c359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::divide</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, double scale=1)</argsstring>
        <name>divide</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scale</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1733"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7a6e5801babb74db247c5a0d8d40a088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::divide</definition>
        <argsstring>(double scale, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>divide</name>
        <param>
          <type>double</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1734"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae67ef01d726a032fffa7382869883070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::subtract</definition>
        <argsstring>(const Scalar &amp;s, const MatND &amp;a, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>subtract</name>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1736"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab280a640c092c424375daf0f5f47c04b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::scaleAdd</definition>
        <argsstring>(const MatND &amp;a, double alpha, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>scaleAdd</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1737"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3c185df70257274cba531e200764653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::addWeighted</definition>
        <argsstring>(const MatND &amp;a, double alpha, const MatND &amp;b, double beta, double gamma, MatND &amp;c)</argsstring>
        <name>addWeighted</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>double</type>
          <declname>gamma</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1739"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a42f3b407921e678cde819f7abe60c817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::sum</definition>
        <argsstring>(const MatND &amp;m)</argsstring>
        <name>sum</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1741"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1abb505f9fc89dbd2bb139479eac5e6f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS int</type>
        <definition>CV_EXPORTS int cv::countNonZero</definition>
        <argsstring>(const MatND &amp;m)</argsstring>
        <name>countNonZero</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1742"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa87a88cb74d5b699de894867cd17432a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::mean</definition>
        <argsstring>(const MatND &amp;m)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1744"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a419a0384bf968b68b50b0fee57a19f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref></type>
        <definition>CV_EXPORTS Scalar cv::mean</definition>
        <argsstring>(const MatND &amp;m, const MatND &amp;mask)</argsstring>
        <name>mean</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1745"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7911a2e230996406bfad8975af95e05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::meanStdDev</definition>
        <argsstring>(const MatND &amp;m, Scalar &amp;mean, Scalar &amp;stddev, const MatND &amp;mask=MatND())</argsstring>
        <name>meanStdDev</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>mean</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>stddev</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1746"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a20431b6cbda7a4ccf88759f6c9f79ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const MatND &amp;a, int normType=NORM_L2, const MatND &amp;mask=MatND())</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
          <defval>NORM_L2</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1747"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab3fa205d2f18e06090ab621e878cabc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, int normType=NORM_L2, const MatND &amp;mask=MatND())</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
          <defval>NORM_L2</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1749"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab9ff7ae891956d1dd79e27f61cdb0c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::normalize</definition>
        <argsstring>(const MatND &amp;a, MatND &amp;b, double alpha=1, double beta=0, int norm_type=NORM_L2, int rtype=-1, const MatND &amp;mask=MatND())</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>norm_type</declname>
          <defval>NORM_L2</defval>
        </param>
        <param>
          <type>int</type>
          <declname>rtype</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1751"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ae0250444ee097cedde04727080631bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::minMaxLoc</definition>
        <argsstring>(const MatND &amp;a, double *minVal, double *maxVal, int *minIdx=0, int *maxIdx=0, const MatND &amp;mask=MatND())</argsstring>
        <name>minMaxLoc</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>minIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>maxIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1755"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a1a02ac4fcf290804d6729ccefe759924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::merge</definition>
        <argsstring>(const MatND *mvbegin, size_t count, MatND &amp;dst)</argsstring>
        <name>merge</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> *</type>
          <declname>mvbegin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1757"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a4e9306e5e948e0331716f73e09b2c8aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::split</definition>
        <argsstring>(const MatND &amp;m, MatND *mv)</argsstring>
        <name>split</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> *</type>
          <declname>mv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1758"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aeda9078494fbf3d49abef32f856bde4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::mixChannels</definition>
        <argsstring>(const MatND *src, int nsrcs, MatND *dst, int ndsts, const int *fromTo, size_t npairs)</argsstring>
        <name>mixChannels</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nsrcs</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndsts</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>fromTo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>npairs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1760"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6749941d1447e497b1b9d70e47f2cb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_and</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1762"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa0f022c622a4b0d62bfc1eb6fe7b1900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_or</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1763"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2edd2cb09de81db458bbbf8792224354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_xor</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1764"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa5286a2f306762184b9dde04bc253357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_and</definition>
        <argsstring>(const MatND &amp;a, const Scalar &amp;s, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>bitwise_and</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1765"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a2b0e8a899153dfac6a4be74e095cdf8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_or</definition>
        <argsstring>(const MatND &amp;a, const Scalar &amp;s, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>bitwise_or</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1766"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a0cc8aee4d9f7e006dd7b18e133bc3d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_xor</definition>
        <argsstring>(const MatND &amp;a, const Scalar &amp;s, MatND &amp;c, const MatND &amp;mask=MatND())</argsstring>
        <name>bitwise_xor</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>mask</declname>
          <defval><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1767"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a77c654461045160cd17bb0e59fed56ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::bitwise_not</definition>
        <argsstring>(const MatND &amp;a, MatND &amp;c)</argsstring>
        <name>bitwise_not</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1768"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a884af89e011643b41122ca666933e583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::absdiff</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>absdiff</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1769"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8f0e99988647e52c7ffe4136e2a47c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::absdiff</definition>
        <argsstring>(const MatND &amp;a, const Scalar &amp;s, MatND &amp;c)</argsstring>
        <name>absdiff</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1770"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad292d45657eb19c0392d6e54d8433a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::inRange</definition>
        <argsstring>(const MatND &amp;src, const MatND &amp;lowerb, const MatND &amp;upperb, MatND &amp;dst)</argsstring>
        <name>inRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>lowerb</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>upperb</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1772"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ad633656d87327f19bec31291f2f5f026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::inRange</definition>
        <argsstring>(const MatND &amp;src, const Scalar &amp;lowerb, const Scalar &amp;upperb, MatND &amp;dst)</argsstring>
        <name>inRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>lowerb</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_scalar__" kindref="compound">Scalar</ref> &amp;</type>
          <declname>upperb</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1774"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a5628279a3adb8d7892ea00ecf5244095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::compare</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c, int cmpop)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmpop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1775"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a652068709a23dad0deda7e4f9266b5f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::compare</definition>
        <argsstring>(const MatND &amp;a, double s, MatND &amp;c, int cmpop)</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cmpop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1776"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a89e73c108db8793593bb14fce185f978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::min</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1777"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a629bded779799ad8c96ce985eac71221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::min</definition>
        <argsstring>(const MatND &amp;a, double alpha, MatND &amp;c)</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1778"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1aa4a4c5d184c5d2d4d4d372af2a812fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::max</definition>
        <argsstring>(const MatND &amp;a, const MatND &amp;b, MatND &amp;c)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1779"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a6468fc175f37b5b25143c5f685ad20b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::max</definition>
        <argsstring>(const MatND &amp;a, double alpha, MatND &amp;c)</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1780"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a7e442b5c5004eb52d866034023fa3dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::sqrt</definition>
        <argsstring>(const MatND &amp;a, MatND &amp;b)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1782"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1adbc9ddfbd67829b343ab3700d4aba6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::pow</definition>
        <argsstring>(const MatND &amp;a, double power, MatND &amp;b)</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>power</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1783"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a1be90147640ba3635a608284abed5e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::exp</definition>
        <argsstring>(const MatND &amp;a, MatND &amp;b)</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1784"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a8618e0af64e54b755c750df94d668250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::log</definition>
        <argsstring>(const MatND &amp;a, MatND &amp;b)</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1785"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1ab014cee8569f1a2c360c8af9a286defe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS bool</type>
        <definition>CV_EXPORTS bool cv::checkRange</definition>
        <argsstring>(const MatND &amp;a, bool quiet=true, int *idx=0, double minVal=-DBL_MAX, double maxVal=DBL_MAX)</argsstring>
        <name>checkRange</name>
        <param>
          <type>const <ref refid="classcv_1_1_mat_n_d" kindref="compound">MatND</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>quiet</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>idx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minVal</declname>
          <defval>-DBL_MAX</defval>
        </param>
        <param>
          <type>double</type>
          <declname>maxVal</declname>
          <defval>DBL_MAX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1787"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a3b47ba482855877edfac13a397455c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="namespacecv_1a178118cdbb19b708b986d0db39cd284c" kindref="member">ConvertData</ref></type>
        <definition>CV_EXPORTS ConvertData cv::getConvertElem</definition>
        <argsstring>(int fromType, int toType)</argsstring>
        <name>getConvertElem</name>
        <param>
          <type>int</type>
          <declname>fromType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1792"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1af408c22e3436a4c5cd9881c347266a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS <ref refid="namespacecv_1ab317e9c58ba1be9f7613e021606b1ba8" kindref="member">ConvertScaleData</ref></type>
        <definition>CV_EXPORTS ConvertScaleData cv::getConvertScaleElem</definition>
        <argsstring>(int fromType, int toType)</argsstring>
        <name>getConvertScaleElem</name>
        <param>
          <type>int</type>
          <declname>fromType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>toType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="1793"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a72195f5ee5e280eb76d40a2b239527ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::minMaxLoc</definition>
        <argsstring>(const SparseMat &amp;a, double *minVal, double *maxVal, int *minIdx=0, int *maxIdx=0)</argsstring>
        <name>minMaxLoc</name>
        <param>
          <type>const <ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>minVal</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>maxVal</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>minIdx</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int *</type>
          <declname>maxIdx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="2060"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a66b97b500ef46224c6a3f87859a2b348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS double</type>
        <definition>CV_EXPORTS double cv::norm</definition>
        <argsstring>(const SparseMat &amp;src, int normType)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="2061"/>
      </memberdef>
      <memberdef kind="function" id="namespacecv_1a38342b63be10a72c446b68fcd86117a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CV_EXPORTS void</type>
        <definition>CV_EXPORTS void cv::normalize</definition>
        <argsstring>(const SparseMat &amp;src, SparseMat &amp;dst, double alpha, int normType)</argsstring>
        <name>normalize</name>
        <param>
          <type>const <ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classcv_1_1_sparse_mat" kindref="compound">SparseMat</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cxcore.hpp" line="2062"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/gaspard/git/opencv/opencv/include/opencv/cv.hpp" line="51"/>
  </compounddef>
</doxygen>
